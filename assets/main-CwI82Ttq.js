var Yh=Object.defineProperty;var Oo=i=>{throw TypeError(i)};var jh=(i,e,t)=>e in i?Yh(i,e,{enumerable:true,configurable:true,writable:true,value:t}):i[e]=t;var Bt=(i,e,t)=>jh(i,typeof e!=="symbol"?e+"":e,t);var ea=(i,e,t)=>e.has(i)||Oo("Cannot "+t);var ie=(i,e,t)=>(ea(i,e,"read from private field"),t?t.call(i):e.get(i));var Te=(i,e,t)=>e.has(i)?Oo("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(i):e.set(i,t);var Ce=(i,e,t,n)=>(ea(i,e,"write to private field"),n?n.call(i,t):e.set(i,t),t);var nt=(i,e,t)=>(ea(i,e,"access private method"),t);var qn=(i,e,t,n)=>({set _(s){Ce(i,e,s,t)},get _(){return ie(i,e,n)}});(function i(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload")){return}for(const s of document.querySelectorAll('link[rel="modulepreload"]')){n(s)}new MutationObserver(s=>{for(const r of s){if(r.type!=="childList"){continue}for(const o of r.addedNodes){if(o.tagName==="LINK"&&o.rel==="modulepreload")n(o)}}}).observe(document,{childList:true,subtree:true});function t(s){const r={};if(s.integrity)r.integrity=s.integrity;if(s.referrerPolicy)r.referrerPolicy=s.referrerPolicy;if(s.crossOrigin==="use-credentials")r.credentials="include";else if(s.crossOrigin==="anonymous")r.credentials="omit";else r.credentials="same-origin";return r}function n(s){if(s.ep)return;s.ep=true;const r=t(s);fetch(s.href,r)}})();const be=Object.freeze({sounds:{atmos:[{src:["./media/amb/amb2.opus","./media/amb/amb2.m4a","./media/amb/amb2.wav"],win:[-1.2,.2]},{src:["./media/amb/amb3.opus","./media/amb/amb3.m4a","./media/amb/amb3.wav"],win:[0,.3]},{src:["./media/amb/amb4.opus","./media/amb/amb4.m4a","./media/amb/amb4.wav"],win:[.15,.4]},{src:["./media/amb/amb5.opus","./media/amb/amb5.m4a","./media/amb/amb5.wav"],win:[.25,.5]},{src:["./media/amb/amb6.opus","./media/amb/amb6.m4a","./media/amb/amb6.wav"],win:[.3,.55]},{src:["./media/amb/amb10.opus","./media/amb/amb10.m4a","./media/amb/amb10.wav"],win:[.35,.45]},{src:["./media/amb/amb7.opus","./media/amb/amb7.m4a","./media/amb/amb7.wav"],win:[.4,.92]},{src:["./media/amb/amb8.opus","./media/amb/amb8.m4a","./media/amb/amb8.wav"],win:[.65,.8]},{src:["./media/amb/amb9.opus","./media/amb/amb9.m4a","./media/amb/amb9.wav"],win:[.75,1.1]}],projects:[{src:["./media/amb/amb1.opus","./media/amb/amb1.m4a","./media/amb/amb1.wav"]}],os:[{src:["./media/os/1.opus","./media/os/1.m4a","./media/os/1.wav"]},{src:["./media/os/2.opus","./media/os/2.m4a","./media/os/2.wav"]},{src:["./media/os/3.opus","./media/os/3.m4a","./media/os/3.wav"]},{src:["./media/os/1b.opus","./media/os/1b.m4a","./media/os/1b.wav"]},{src:["./media/os/t1.opus","./media/os/t1.m4a","./media/os/t1.wav"]},{src:["./media/os/t2.opus","./media/os/t2.m4a","./media/os/t2.wav"]}]},fk:{meta:{title:"François Kerforn",description:"François Kerforn's Portfolio - Independant sound and interface designer"},homeDescription:["Hi ! I am a developer that creates and composes sounds in various contexts.","Immersive experiences, HCI, artistic works, soundtracks, sound design tools.","I enjoy exploring and implementing fine-tuned designs, systems taylored for specific experiences."]},footer:{name:"François Kerforn",bio:"François Kerforn / independant developer focusing on sound design and web applications.",clients:["(((Echora))) - Nadine Schütz","Aurasens","GHU Paris psychiatrie & neurosciences","IRCAM","Native Instruments"],contact:{mail:"fk.contactme@gmail.com",bluesky:"https://bsky.app/profile/francoiskerforn.bsky.social",github:"https://github.com/ngc6720/",linkedin:"https://www.linkedin.com/in/fkerforn/"},tools:["Ableton Live","Maxmsp/M4L","HTML/CSS","Javascript","WebAudio","ThreeJS","JUCE"]},projectsList:{meta:{title:"Projects | François Kerforn",description:"Sound and design projects"}},links:[{name:"Granulizer",href:"https://ngc6720.github.io/rnbo-webaudio/",content:["rnbo-webaudio","Granular player","RNBO/JS"]},{name:"Waveterrain",href:"https://ngc6720.github.io/sente/",content:["sente-waveterrain","Audio synthesis","Webaudio"]},{name:"Parapluie",href:"https://parapluie.pages.dev/",content:["Parapluie","Weather app","Vuejs/Nuxt"]},{name:"Jardin d'automne",href:"https://jardin-automne.vercel.app/",content:["3d scene","3d scene of a garden","three.js journey"]}],projects:[{meta:{description:"A sound installation"},name:"Iris",href:"/iris",url:"https://vimeo.com/778580675",audio:[],idObject:{name:"Iris",date:"2022",type:"Music / Installation",role:"Composer"},p:["<span>Iris</span> is a music composition that offers fragmented soundscapes for the listener to wander in. It is imagined as a sound installation where layers of sounds spread in the space.","The composition is meant to take several forms, adapting to the diffusion context. It was first commissioned by 'A More Beautiful Journey' and the 'MU' collective as two sound installations.","The first is using Soundways – an application for spatialized sound diffusion regarding users geopositioning – and is located in Trinity Bellwoods Park, Toronto. The latter is using Sound Delta – a device for spatialized immersive composition on headphones with radiowave tracking – and was created in La Station Gare des Mines, Paris."]},{meta:{description:"A web application"},name:"Psyk",href:"/psyk",url:"https://www.ircam.fr/projects/pages/psy-son",audio:[],idObject:{name:"Psyk",date:"2021",type:"Web Application",role:"Designer / Developer"},p:["<span>Psyk</span> is the prototype of a web application made for music discovery and playlists creation in the context of psychiatric caretaking.","With a minimalistic interface it lets users browse music from different entry points to quickly compose playlists.","The application is part of a research project named Psyson and led by GHU Paris Psychiatrie & Neuroscience. The project includes the context for specific usage of the interface by caretakers and patients, as well as the listening environment.","The prototype offers several ways to find music and nudge the generated playlists using musical or emotional parameters."]},{meta:{description:"A digital musical instrument"},name:"Ksora",href:"/ksora",url:"https://ksora.onrender.com",audio:["/media/extraits/ksora.opus","/media/extraits/ksora.mp3"],idObject:{name:"Ksora",date:"2020",type:"Digital Instrument",role:"Composer / developer"},p:["<span>Ksora</span> is a digital musical instrument. It can welcome multiple users on an interface that let us play and mix several sounds together."]},{meta:{description:"A sound installation by Nadine Schütz"},name:"Boîte à Tubes #2",href:"/boite-a-tubes-2",url:"https://www.echora.ch/boite-a-tubes-2",audio:["/media/extraits/boite-a-tubes.opus","/media/extraits/boite-a-tubes.mp3"],idObject:{name:"Boîte à Tubes #2",date:"2021",type:"Sound installation",role:"Developer / musical programmer"},p:["<span>Boîte à tubes</span> is a sound installation by artist Nadine Schütz. It allows visitors to perform, record and send a digital musical postcard. Sound material from the past, present and future highlights the story of the place welcoming the installation – an ancient factory."]},{meta:{description:"A sound walk in the old center of Le Mans"},name:"Errance et Rois",href:"/errance-et-rois",url:"https://esad-talm.fr/fr/actualites/errance-et-rois",audio:["/media/extraits/errance-et-rois.opus","/media/extraits/errance-et-rois.mp3"],idObject:{name:"Errance et Rois",date:"2019",type:"Sound walk",role:"Sound designer"},p:["<span>Errance et Rois</span> is a sound walk that takes its participants to the old center of Le Mans, a French city that preserves the traces of the Plantagenêt dynasty and of a strong medieval history. The sound walk offers a journey through various scenes inspired by the brothers Richard The Lionhearted and John Lackland."]},{meta:{description:"A sound installation recreating a rainforest soundscape"},name:"Echotopie",href:"/echotopie",audio:["/media/extraits/echotopie.opus","/media/extraits/echotopie.mp3"],idObject:{name:"Echotopie",date:"2019",type:"Sound installation",role:"Musical programmer"},p:["<span>Echotopie</span> is a sound installation where attendants are immerged in a rainforest soundscape. The participants gestures can alter the composition and disrupt the soundscape, intentionally or unintentionally."]},{meta:{description:"A bruitist instrument along the canal of Bourgogne"},name:"Éclusophone",href:"/eclusophone",url:"https://www.lyonne.fr/tonnerre-89700/actualites/ce-drole-dinstrument-de-musique-a-douze-faces-est-installe-a-lecluse-darcot-entre-tonnerre-et-commissey_13951221/",audio:[],idObject:{name:"Éclusophone",date:"2021",type:"Mechanical instrument",role:"Designer"},p:["An <span>Éclusophone</span> can be found found during a promenade along the canal of Bourgogne. Rattles and clatters emanating from this metallic instrument thanks to several handles and crank arms will surprise and intringue passerbies."]}]});const Z=(i,e,t,...n)=>{const s=document.createElement(i);if(typeof e==="string"){s.textContent=e}else if(e instanceof HTMLElement){s.appendChild(e)}else if(e){Object.entries(e).map(([r,o])=>s[r]=o)}if(t instanceof HTMLElement){s.appendChild(t)}else if(typeof t==="string"){s.textContent=t}if(n)for(const r of n)s.appendChild(r);return s};const lo=(...i)=>Z("div",...i);const $h=(...i)=>Z("p",...i);const Kh=(...i)=>Z("article",...i);const xc=(i,e,t)=>{const n=document.createElementNS("http://www.w3.org/2000/svg","svg");if(!Array.isArray(e))e=[e];e.forEach(s=>{if(typeof s==="string"){const r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d",s);n.appendChild(r)}});Object.entries(t).forEach(([s,r])=>n.setAttribute(s,r));i.appendChild(n);return i};function yr(i){return getComputedStyle(document.documentElement).getPropertyValue(i)}function Zh(i,e){document.documentElement.style.setProperty(i,e)}function Jh(){const i=window.innerWidth-document.documentElement.clientWidth;Zh("--scrollBarW",i+"px")}const Sc=i=>{if(i.animationName.slice(0,6)==="vanish"){i.target.style.visibility="hidden"}};const Qh=i=>{if(i.animationName.slice(0,6)==="appear"){i.target.style.visibility="visible"}};document.body.addEventListener("animationstart",Qh);document.body.addEventListener("animationend",Sc);document.body.addEventListener("webkitAnimationEnd",Sc);const Mc=(i,{tMin:e=800,tMax:t=2e3,random:n=false}={})=>{const s=[];for(let r=0;r<i;r++){s.push(n?Math.random()*(t-e)+e:r*(t-e)/i+e)}return s};const co=(i,e,t)=>{const n=Array.isArray(i)?i:[i];const s=e;const r=Mc(n.length,t);const o=(t==null?void 0:t.timingFunctioAppear)??"cubic-bezier(0.165, 0.84, 0.44, 1)";const a=(t==null?void 0:t.timingFunctionVanish)??"cubic-bezier(0.4, 0.60, 0.8, 1)";const l=f=>{const m=document.createElement("span");m.classList.add("mask");m.style.display="flex";m.style.overflow="hidden";f.style.visibility="hidden";e.style.pointerEvents="none";m.appendChild(f);s.appendChild(m)};let c;const h=f=>{c&&clearTimeout(c);n.map((m,g)=>m.style.animation=`${f??"appearToTop"} ${r[g]}ms ${o}`);c=setTimeout(()=>s.style.pointerEvents="all",r[r.length-1]*.6)};const u=f=>{clearTimeout(c);n.map((m,g)=>{m.style.animation=`${f??"vanishToTop"} ${r[g]*.5}ms ${a}`;g===n.length-1&&(s.style.pointerEvents="none")})};n.map(f=>l(f));return{el:s,appear:h,vanish:u}};const eu=(i,e,t)=>{const n=i.map(u=>{const f=document.createElement("span");f.textContent=u;return f});const s=e;const r=()=>Mc(n.length,t);const o="cubic-bezier(0.1, 0.84, 0.44, 1)";const a="cubic-bezier(0.1, 0.2, 0.95, 1)";s.classList.add((Object.entries({3:"shortestLength",5:"shorterLength",6:"shortLength"}).find(([u,f])=>n.length<u)??[0,"normalLength"])[1]);const l=u=>{const f=document.createElement("span");f.classList.add("mask");u.style.visibility="hidden";f.style.display="flex";f.style.overflow="hidden";f.style.justifyContent="center";f.appendChild(u);s.appendChild(f)};const c=u=>n.map((f,m)=>f.style.animation=`${u??"appearToTop"} ${r()[m]}ms ${o}`);const h=u=>n.map((f,m)=>f.style.animation=`${u??"vanishToTop"} ${r()[m]*.5}ms ${a}`);n.map(u=>l(u));return{el:s,appear:c,vanish:h}};const tu=(...i)=>e=>i.reduce((t,n)=>n(t),e);function nu(i){const e=Array.isArray(i)?i:[i];e.forEach(t=>t.style.top=t.getBoundingClientRect().top+"px")}function Xt(i,e){const t=Array.isArray(i)?i:[i];if(e){t.forEach(n=>{n.classList.add("disabled");[...n.querySelectorAll("a"),...n.querySelectorAll("button"),...n.querySelectorAll("input")].forEach(s=>{s.setAttribute("tabindex",-1)})})}else{t.forEach(n=>{n.classList.remove("disabled");[...n.querySelectorAll("a"),...n.querySelectorAll("button"),...n.querySelectorAll("input")].forEach(s=>{s.setAttribute("tabindex",0)})})}}function iu(i){return i*2-1}function su(i){return(i+1)*.5}function xs(i,e,t,n,s){i=(i-e)*(s-n)/(t-e)+n;return i<n?n:i>s?s:i}function Gn(i,e=-1,t=1){return i<e?e:t<i?t:i}function Bo(i=-1,e=1){return t=>Gn(t,i,e)}function Ec(i=.5){return Gn(Math.tan(Gn(i,0,1)*Math.PI/2),1e-5,Infinity)}function ru(i,e=0,t=1){return((i-e)%(t-e)+(t-e))%(t-e)+e}function au(i,e){return ru(i*e)}function ta(i){return e=>au(e,i)}function yc(i,e=.5){return Gn(i<e?i/e:e<i?(1-i)/(1-e):i,0,1)}function ou(i){return xs(Math.cos(i*Math.PI),1,-1,0,1)}function lu(i,e=.5){const t=Ec(e);return Math.tanh(Gn(i,-1,1)*t)/Math.tanh(t)}function zo(i=.5){return e=>lu(e,i)}function us({phase:i=0,period:e=1}={}){return t=>Math.sin(Math.PI*2*t/e+i)}const cu=(()=>{const i=[(e,t)=>tu(ta(Math.floor(t.rand1*6)),iu,yc,su,ta(us({phase:0,period:2})(e.phz)),n=>ta(n*(t.rand1+.4))(n),us({phase:0,period:xs(t.index,0,t.qt,.2,4)}),us({phase:xs(t.index,0,t.qt,0,.5),period:t.rand2*4}),zo(.6),n=>n+Bo(-2,2)(us({phase:t.rand1*9,period:2})(e.mod1*.2)*8),n=>n+Bo(-4,4)(us({phase:t.rand1*9,period:3})(e.mod1*.5)*2),n=>n*1/t.qt*.8,n=>n+xs(t.index,0,t.qt,-.8,.8),n=>n*-1,zo(.4))(e.phz)];return i})();const hu=(i,e)=>t=>{Object.values(e).forEach(n=>n[2]=n[0]);for(let n=0,s=Object.entries(e);n<1.0001;n+=i,s.map(([r,o])=>o[2]+=o[1]*i))t(n,Object.assign({},...s.map(([r,o])=>({[r]:o[2]}))))};function Tc({width:i=512,height:e=200,vMargin:t=1,qt:n=8}={}){let s=Array(n);s.fill("");const r=a=>(l,c)=>{const h=cu[0](c,Object.assign(o,{index:a,qt:n}));const u=` ${l===0?"M":"L"}`;const f=` ${l*i}`.slice(0,6);const m=` ${(1-h)*(e/2-t)+t}`.slice(0,6);s[a]+=u+f+m};const o={rand1:Math.random(),rand2:Math.random()};for(let a=s.length;a--;){hu(.005,{phz:[0+a*.2,1],mod1:[0,8],mod2:[0,.7]})(r(a))}return s}const uu=[Z("meta",{name:"robots",content:"index, follow"}),Z("meta",{name:"title",content:be.fk.meta.title}),Z("meta",{name:"description",content:be.fk.meta.title})];uu.forEach(i=>document.head.appendChild(i));const ho=Z("header");const du=Z("h1","François Kerforn | Portfolio");ho.appendChild(du);document.body.appendChild(ho);const kr=document.querySelector("main");document.body.appendChild(kr);const Un=Z("nav",{classList:"hidden"});const Es=Z("a",{href:"/projects",alt:"Projects | François Kerforn"});const bc=Z("span","Projects");Es.setAttribute("data-text",bc.textContent);Es.appendChild(bc);const ys=Z("a",{href:"/fk",alt:"Home | François Kerforn"});const Ac=Z("span","Home");ys.setAttribute("data-text",Ac.textContent);ys.appendChild(Ac);const In=Z("button",{id:"audioSwitch",className:"hidden"});const uo=Z("span","Audio (is on)");uo.innerHTML="Audio [<span>on</span>]";const fu=Z("div");In.setAttribute("data-text",uo.textContent);In.appendChild(fu);In.appendChild(uo);Un.appendChild(ys);Un.appendChild(Es);Un.appendChild(In);ho.appendChild(Un);const Fn=Z("footer",{classList:"hidden"});const wc=Z("div",{className:"category"});const Cc=Z("div",{className:"content"});const pu=Z("a",{href:"/fk",alt:"Projects | François Kerforn"},"FK");const mu=Z("a",{href:"/projects",alt:"Home | François Kerforn"},"Projects");Cc.appendChild(Z("p",be.footer.bio));wc.appendChild(Cc);const Rc=Z("div",{className:"category",id:"contact"});const rs=Z("div",{className:"content"});rs.appendChild(Z("a",{href:`mailto:${be.footer.contact.mail}`,target:"_blank",alt:"Send e-mail"},"Mail"));rs.appendChild(Z("a",{href:be.footer.contact.bluesky,target:"_blank",alt:"Open Bluesky Profile"},"Bluesky"));rs.appendChild(Z("a",{href:be.footer.contact.github,target:"_blank",alt:"Open Github Profile"},"Github"));rs.appendChild(Z("a",{href:be.footer.contact.linkedin,target:"_blank",alt:"Open Linkedin Profile"},"Linkedin"));Rc.appendChild(rs);const Lc=Z("div",{className:"category"});const gu=Z("div","Favourite tools:");const Pc=Z("div",{className:"content"});be.footer.tools.forEach(i=>Pc.appendChild(Z("p",i)));Lc.appendChild(gu);Lc.appendChild(Pc);Fn.appendChild(wc);Fn.appendChild(Rc);Fn.appendChild(Z("p",`${new Date().getFullYear()} © fk.`));document.body.appendChild(Fn);const _u=document.querySelector("section.loading");const Go=document.getElementById("loadingButton");document.getElementById("loadingIcon");const Vr=Z("div",{id:"soundChoiceContainer"});const vu=Z("div",{id:"soundChoiceQuestion"},"Enable audio ?");const ei=Z("button",{id:"enableSoundButton",className:"active"},"yes");const Pi=Z("button",{id:"disableSoundButton"},"no");Vr.appendChild(vu);Vr.appendChild(ei);Vr.appendChild(Pi);_u.appendChild(Vr);const Ts=Z("section",{id:"fk",className:"fk"});kr.appendChild(Ts);const Dc=Z("div",{id:"hero"});const Ga=co([Z("span","f"),Z("span","k")],Z("span"));const Ha=co([Z("span","SOUND"),Z("span","DESIGN"),Z("span","DEV_")],Z("span"));const fo=Z("span");fo.appendChild(Ga.el);fo.appendChild(Ha.el);Dc.appendChild(fo);Ts.appendChild(Dc);be.fk.homeDescription.forEach(i=>Ts.appendChild(Kh(lo($h(i)))));const Tr=128;const br=128;const ka=be.projects.map(i=>{const e=Z("a",{href:i.href,className:"projectLink",target:"_blank",alt:`Open project : ${i.name}`});e.appendChild(xc(Z("div",{className:"waveIcon"}),Tc({width:Tr,height:br}),{width:"100%",height:"100%",viewBox:`0 0  ${Tr} ${br}`}));const t=Z("div",{className:"text"});const n=[Z("div",{className:"projectLinkTitle"},i.name),Z("span",""),Z("div",i.idObject.date),Z("div",i.idObject.type)];n.forEach(s=>{const r=Z("span",{className:"mask"});r.appendChild(s);t.appendChild(r)});t.querySelectorAll(".mask").forEach(s=>s.setAttribute("data-text",s.textContent));e.appendChild(t);return e});const Uc=be.links.map(i=>{const e=Z("a",{href:i.href,className:"hyperLink",target:"_blank",alt:`Visit project : ${i.name}`});e.appendChild(xc(Z("div",{className:"waveIcon"}),Tc({width:Tr,height:br}),{width:"100%",height:"100%",viewBox:`0 0  ${Tr} ${br}`}));const t=Z("div",{className:"text"});const n=[Z("div",i.name),Z("span",""),Z("div",i.content[1]),Z("div",i.content[2])];n.forEach(s=>{const r=Z("span",{className:"mask"});r.appendChild(s);t.appendChild(r)});t.querySelectorAll(".mask").forEach(s=>s.setAttribute("data-text",s.textContent));e.appendChild(t);return e});const po=Z("section",{id:"projects"});kr.appendChild(po);const xu=Z("h2","Projects");po.appendChild(xu);const Ic=lo({id:"projectLinks"});const xr=lo({id:"projectLinksList"},...ka,...Uc);Ic.appendChild(xr);po.appendChild(Ic);const na=(i,e)=>{const t=Z("p");const n=Z("span",i);const s=Z("span",e);t.appendChild(n);t.appendChild(s);return t};const Su=be.projects.map(i=>{const e=Z("div",{className:"projectInfo"});[na("Name:",i.idObject.name),na("Date:",i.idObject.date),na("Role:",i.idObject.role)].forEach(t=>e.appendChild(t));return e});const Sn=be.projects.map(i=>{const e=Z("article",{className:"projectArticle1"});const t=Z("p");t.innerHTML=i.p[0];e.appendChild(t);return{el:e,display:n=>{e.classList.toggle("display",n)}}});const Ui=be.projects.map(i=>{const e=Z("article",{className:"projectArticle2"});const t=i.p.map((n,s)=>s>0&&Z("p",n)).filter(n=>n);t.forEach(n=>e.appendChild(n));if(t.length>0)return{el:e,display:n=>{e.classList.toggle("display",n)}}});const Di=be.projects.map(i=>co([Z("div",Z("div",Z("span",{className:"btn-close-x"},"["),Z("span","x"),Z("span",{className:"btn-close-x"},"]"),Z("span","Close")))],Z("a",{href:"/projects",className:"backLink",alt:"Projects | François Kerforn"}),{tMin:650,tMax:900}));const vs=be.projects.map(i=>eu(i.name.split(""),Z("h2",{className:"projectName"},i.name),{tMin:900,tMax:1200,random:true}));be.projects.forEach((i,e)=>{var o;const t=Z("section",{id:i.href.slice(1),className:"project"});kr.appendChild(t);t.appendChild(Di[e].el);Sn[e].el.insertBefore(Su[e],Sn[e].el.childNodes[0]);Sn[e].el.insertBefore(vs[e].el,Sn[e].el.childNodes[0]);const n=Z("div",{className:"projectArticleGrid"});n.appendChild(Sn[e].el);((o=Ui[e])==null?void 0:o.el)&&n.appendChild(Ui[e].el);const s=Z("a",{href:i.url,className:"projectContentLinks",target:"_blank"});const r=Z("span","Learn More ↗ ");s.setAttribute("data-text",r.textContent);s.appendChild(r);if(i.url)n.lastChild.appendChild(s);t.appendChild(n)});const Ss=[Z("button",{id:"arrowLeft"},"← Prev"),Z("button",{id:"arrowRight"},"Next →")];const Va=Z("div",{id:"counter"});const Wa=(()=>{const i=Z("div",{id:"carousel"});i.appendChild(Ss[0]);i.appendChild(Va);i.appendChild(Ss[1]);return{el:i}})();document.body.insertBefore(Wa.el,Fn);const Nc=Z("div",{id:"progress"});const Ar=Z("div",{id:"progressContainer"});Ar.appendChild(Nc);document.body.appendChild(Ar);function Fc(i,e,t){return Math.max(i,Math.min(e,t))}class Mu{advance(e){var a;if(!this.isRunning)return;let t=false;if(this.lerp)this.value=(n=this.value,s=this.to,r=60*this.lerp,o=e,function(l,c,h){return(1-h)*l+h*c}(n,s,1-Math.exp(-r*o))),Math.round(this.value)===this.to&&(this.value=this.to,t=true);else{this.currentTime+=e;const l=Fc(0,this.currentTime/this.duration,1);t=l>=1;const c=t?1:this.easing(l);this.value=this.from+(this.to-this.from)*c}var n,s,r,o;(a=this.onUpdate)==null?void 0:a.call(this,this.value,t),t&&this.stop()}stop(){this.isRunning=false}fromTo(e,t,{lerp:n=.1,duration:s=1,easing:r=l=>l,onStart:o,onUpdate:a}){this.from=this.value=e,this.to=t,this.lerp=n,this.duration=s,this.easing=r,this.currentTime=0,this.isRunning=true,o==null?void 0:o(),this.onUpdate=a}}class Eu{constructor({wrapper:e,content:t,autoResize:n=true,debounce:s=250}={}){Bt(this,"resize",()=>{this.onWrapperResize(),this.onContentResize()});Bt(this,"onWrapperResize",()=>{this.wrapper===window?(this.width=window.innerWidth,this.height=window.innerHeight):(this.width=this.wrapper.clientWidth,this.height=this.wrapper.clientHeight)});Bt(this,"onContentResize",()=>{this.wrapper===window?(this.scrollHeight=this.content.scrollHeight,this.scrollWidth=this.content.scrollWidth):(this.scrollHeight=this.wrapper.scrollHeight,this.scrollWidth=this.wrapper.scrollWidth)});this.wrapper=e,this.content=t,n&&(this.debouncedResize=function(r,o){let a;return function(){let l=arguments,c=this;clearTimeout(a),a=setTimeout(function(){r.apply(c,l)},o)}}(this.resize,s),this.wrapper===window?window.addEventListener("resize",this.debouncedResize,false):(this.wrapperResizeObserver=new ResizeObserver(this.debouncedResize),this.wrapperResizeObserver.observe(this.wrapper)),this.contentResizeObserver=new ResizeObserver(this.debouncedResize),this.contentResizeObserver.observe(this.content)),this.resize()}destroy(){var e,t;(e=this.wrapperResizeObserver)==null?void 0:e.disconnect(),(t=this.contentResizeObserver)==null?void 0:t.disconnect(),window.removeEventListener("resize",this.debouncedResize,false)}get limit(){return{x:this.scrollWidth-this.width,y:this.scrollHeight-this.height}}}class Oc{constructor(){this.events={}}emit(e,...t){let n=this.events[e]||[];for(let s=0,r=n.length;s<r;s++)n[s](...t)}on(e,t){var n;return((n=this.events[e])==null?void 0:n.push(t))||(this.events[e]=[t]),()=>{var s;this.events[e]=(s=this.events[e])==null?void 0:s.filter(r=>t!==r)}}off(e,t){var n;this.events[e]=(n=this.events[e])==null?void 0:n.filter(s=>t!==s)}destroy(){this.events={}}}const Ho=100/6;class yu{constructor(e,{wheelMultiplier:t=1,touchMultiplier:n=1}){Bt(this,"onTouchStart",e=>{const{clientX:t,clientY:n}=e.targetTouches?e.targetTouches[0]:e;this.touchStart.x=t,this.touchStart.y=n,this.lastDelta={x:0,y:0},this.emitter.emit("scroll",{deltaX:0,deltaY:0,event:e})});Bt(this,"onTouchMove",e=>{const{clientX:t,clientY:n}=e.targetTouches?e.targetTouches[0]:e,s=-(t-this.touchStart.x)*this.touchMultiplier,r=-(n-this.touchStart.y)*this.touchMultiplier;this.touchStart.x=t,this.touchStart.y=n,this.lastDelta={x:s,y:r},this.emitter.emit("scroll",{deltaX:s,deltaY:r,event:e})});Bt(this,"onTouchEnd",e=>{this.emitter.emit("scroll",{deltaX:this.lastDelta.x,deltaY:this.lastDelta.y,event:e})});Bt(this,"onWheel",e=>{let{deltaX:t,deltaY:n,deltaMode:s}=e;t*=1===s?Ho:2===s?this.windowWidth:1,n*=1===s?Ho:2===s?this.windowHeight:1,t*=this.wheelMultiplier,n*=this.wheelMultiplier,this.emitter.emit("scroll",{deltaX:t,deltaY:n,event:e})});Bt(this,"onWindowResize",()=>{this.windowWidth=window.innerWidth,this.windowHeight=window.innerHeight});this.element=e,this.wheelMultiplier=t,this.touchMultiplier=n,this.touchStart={x:null,y:null},this.emitter=new Oc,window.addEventListener("resize",this.onWindowResize,false),this.onWindowResize(),this.element.addEventListener("wheel",this.onWheel,{passive:false}),this.element.addEventListener("touchstart",this.onTouchStart,{passive:false}),this.element.addEventListener("touchmove",this.onTouchMove,{passive:false}),this.element.addEventListener("touchend",this.onTouchEnd,{passive:false})}on(e,t){return this.emitter.on(e,t)}destroy(){this.emitter.destroy(),window.removeEventListener("resize",this.onWindowResize,false),this.element.removeEventListener("wheel",this.onWheel,{passive:false}),this.element.removeEventListener("touchstart",this.onTouchStart,{passive:false}),this.element.removeEventListener("touchmove",this.onTouchMove,{passive:false}),this.element.removeEventListener("touchend",this.onTouchEnd,{passive:false})}}class Tu{constructor({wrapper:e=window,content:t=document.documentElement,wheelEventsTarget:n=e,eventsTarget:s=n,smoothWheel:r=true,syncTouch:o=false,syncTouchLerp:a=.075,touchInertiaMultiplier:l=35,duration:c,easing:h=x=>Math.min(1,1.001-Math.pow(2,-10*x)),lerp:u=!c&&.1,infinite:f=false,orientation:m="vertical",gestureOrientation:g="vertical",touchMultiplier:S=1,wheelMultiplier:p=1,autoResize:d=true,__experimental__naiveDimensions:T=false}={}){this.__isSmooth=false,this.__isScrolling=false,this.__isStopped=false,this.__isLocked=false,this.onVirtualScroll=({deltaX:x,deltaY:y,event:L})=>{if(L.ctrlKey)return;const w=L.type.includes("touch"),A=L.type.includes("wheel");if(this.options.syncTouch&&w&&"touchstart"===L.type&&!this.isStopped&&!this.isLocked)return void this.reset();const B=0===x&&0===y,Q="vertical"===this.options.gestureOrientation&&0===y||"horizontal"===this.options.gestureOrientation&&0===x;if(B||Q)return;let v=L.composedPath();if(v=v.slice(0,v.indexOf(this.rootElement)),v.find(C=>{var V,H,q,k,X;return(null===(V=C.hasAttribute)||void 0===V?void 0:V.call(C,"data-lenis-prevent"))||w&&(null===(H=C.hasAttribute)||void 0===H?void 0:H.call(C,"data-lenis-prevent-touch"))||A&&(null===(q=C.hasAttribute)||void 0===q?void 0:q.call(C,"data-lenis-prevent-wheel"))||(null===(k=C.classList)||void 0===k?void 0:k.contains("lenis"))&&!(null===(X=C.classList)||void 0===X?void 0:X.contains("lenis-stopped"))}))return;if(this.isStopped||this.isLocked)return void L.preventDefault();if(this.isSmooth=this.options.syncTouch&&w||this.options.smoothWheel&&A,!this.isSmooth)return this.isScrolling=false,void this.animate.stop();L.preventDefault();let b=y;"both"===this.options.gestureOrientation?b=Math.abs(y)>Math.abs(x)?y:x:"horizontal"===this.options.gestureOrientation&&(b=x);const ee=w&&this.options.syncTouch,$=w&&"touchend"===L.type&&Math.abs(b)>5;$&&(b=this.velocity*this.options.touchInertiaMultiplier),this.scrollTo(this.targetScroll+b,Object.assign({programmatic:false},ee?{lerp:$?this.options.syncTouchLerp:1}:{lerp:this.options.lerp,duration:this.options.duration,easing:this.options.easing}))},this.onNativeScroll=()=>{if(!this.__preventNextScrollEvent&&!this.isScrolling){const x=this.animatedScroll;this.animatedScroll=this.targetScroll=this.actualScroll,this.velocity=0,this.direction=Math.sign(this.animatedScroll-x),this.emit()}},window.lenisVersion="1.0.42",e!==document.documentElement&&e!==document.body||(e=window),this.options={wrapper:e,content:t,wheelEventsTarget:n,eventsTarget:s,smoothWheel:r,syncTouch:o,syncTouchLerp:a,touchInertiaMultiplier:l,duration:c,easing:h,lerp:u,infinite:f,gestureOrientation:g,orientation:m,touchMultiplier:S,wheelMultiplier:p,autoResize:d,__experimental__naiveDimensions:T},this.animate=new Mu,this.emitter=new Oc,this.dimensions=new Eu({wrapper:e,content:t,autoResize:d}),this.toggleClassName("lenis",true),this.velocity=0,this.isLocked=false,this.isStopped=false,this.isSmooth=o||r,this.isScrolling=false,this.targetScroll=this.animatedScroll=this.actualScroll,this.options.wrapper.addEventListener("scroll",this.onNativeScroll,false),this.virtualScroll=new yu(s,{touchMultiplier:S,wheelMultiplier:p}),this.virtualScroll.on("scroll",this.onVirtualScroll)}destroy(){this.emitter.destroy(),this.options.wrapper.removeEventListener("scroll",this.onNativeScroll,false),this.virtualScroll.destroy(),this.dimensions.destroy(),this.toggleClassName("lenis",false),this.toggleClassName("lenis-smooth",false),this.toggleClassName("lenis-scrolling",false),this.toggleClassName("lenis-stopped",false),this.toggleClassName("lenis-locked",false)}on(e,t){return this.emitter.on(e,t)}off(e,t){return this.emitter.off(e,t)}setScroll(e){this.isHorizontal?this.rootElement.scrollLeft=e:this.rootElement.scrollTop=e}resize(){this.dimensions.resize()}emit(){this.emitter.emit("scroll",this)}reset(){this.isLocked=false,this.isScrolling=false,this.animatedScroll=this.targetScroll=this.actualScroll,this.velocity=0,this.animate.stop()}start(){this.isStopped&&(this.isStopped=false,this.reset())}stop(){this.isStopped||(this.isStopped=true,this.animate.stop(),this.reset())}raf(e){const t=e-(this.time||e);this.time=e,this.animate.advance(.001*t)}scrollTo(e,{offset:t=0,immediate:n=false,lock:s=false,duration:r=this.options.duration,easing:o=this.options.easing,lerp:a=!r&&this.options.lerp,onComplete:l,force:c=false,programmatic:h=true}={}){if(!this.isStopped&&!this.isLocked||c){if(["top","left","start"].includes(e))e=0;else if(["bottom","right","end"].includes(e))e=this.limit;else{let u;if("string"==typeof e?u=document.querySelector(e):(null==e?void 0:e.nodeType)&&(u=e),u){if(this.options.wrapper!==window){const m=this.options.wrapper.getBoundingClientRect();t-=this.isHorizontal?m.left:m.top}const f=u.getBoundingClientRect();e=(this.isHorizontal?f.left:f.top)+this.animatedScroll}}if("number"==typeof e){if(e+=t,e=Math.round(e),this.options.infinite?h&&(this.targetScroll=this.animatedScroll=this.scroll):e=Fc(0,e,this.limit),n)return this.animatedScroll=this.targetScroll=e,this.setScroll(this.scroll),this.reset(),void(null==l||l(this));if(!h){if(e===this.targetScroll)return;this.targetScroll=e}this.animate.fromTo(this.animatedScroll,e,{duration:r,easing:o,lerp:a,onStart:()=>{s&&(this.isLocked=true),this.isScrolling=true},onUpdate:(u,f)=>{this.isScrolling=true,this.velocity=u-this.animatedScroll,this.direction=Math.sign(this.velocity),this.animatedScroll=u,this.setScroll(this.scroll),h&&(this.targetScroll=u),f||this.emit(),f&&(this.reset(),this.emit(),null==l||l(this),this.__preventNextScrollEvent=true,requestAnimationFrame(()=>{delete this.__preventNextScrollEvent}))}})}}}get rootElement(){return this.options.wrapper===window?document.documentElement:this.options.wrapper}get limit(){return this.options.__experimental__naiveDimensions?this.isHorizontal?this.rootElement.scrollWidth-this.rootElement.clientWidth:this.rootElement.scrollHeight-this.rootElement.clientHeight:this.dimensions.limit[this.isHorizontal?"x":"y"]}get isHorizontal(){return"horizontal"===this.options.orientation}get actualScroll(){return this.isHorizontal?this.rootElement.scrollLeft:this.rootElement.scrollTop}get scroll(){return this.options.infinite?(e=this.animatedScroll,t=this.limit,(e%t+t)%t):this.animatedScroll;var e,t}get progress(){return 0===this.limit?1:this.scroll/this.limit}get isSmooth(){return this.__isSmooth}set isSmooth(e){this.__isSmooth!==e&&(this.__isSmooth=e,this.toggleClassName("lenis-smooth",e))}get isScrolling(){return this.__isScrolling}set isScrolling(e){this.__isScrolling!==e&&(this.__isScrolling=e,this.toggleClassName("lenis-scrolling",e))}get isStopped(){return this.__isStopped}set isStopped(e){this.__isStopped!==e&&(this.__isStopped=e,this.toggleClassName("lenis-stopped",e))}get isLocked(){return this.__isLocked}set isLocked(e){this.__isLocked!==e&&(this.__isLocked=e,this.toggleClassName("lenis-locked",e))}get className(){let e="lenis";return this.isStopped&&(e+=" lenis-stopped"),this.isLocked&&(e+=" lenis-locked"),this.isScrolling&&(e+=" lenis-scrolling"),this.isSmooth&&(e+=" lenis-smooth"),e}toggleClassName(e,t){this.rootElement.classList.toggle(e,t),this.emitter.emit("className change",this)}}/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const mo="162";const bu=0;const ko=1;const Au=2;const Bc=1;const wu=2;const fn=3;const Hn=0;const Rt=1;const $t=2;const yn=0;const Oi=1;const Xa=2;const Vo=3;const Wo=4;const Cu=5;const ii=100;const Ru=101;const Lu=102;const Xo=103;const qo=104;const Pu=200;const Du=201;const Uu=202;const Iu=203;const qa=204;const Ya=205;const Nu=206;const Fu=207;const Ou=208;const Bu=209;const zu=210;const Gu=211;const Hu=212;const ku=213;const Vu=214;const Wu=0;const Xu=1;const qu=2;const wr=3;const Yu=4;const ju=5;const $u=6;const Ku=7;const go=0;const Zu=1;const Ju=2;const On=0;const zc=1;const Gc=2;const Hc=3;const kc=4;const Qu=5;const Vc=6;const Wc=7;const Xc=300;const Qi=301;const es=302;const ja=303;const $a=304;const Wr=306;const Ka=1e3;const Kt=1001;const Za=1002;const yt=1003;const Yo=1004;const ds=1005;const wt=1006;const ia=1007;const ri=1008;const Bn=1009;const ed=1010;const td=1011;const _o=1012;const qc=1013;const Nn=1014;const Mn=1015;const kn=1016;const Yc=1017;const jc=1018;const ui=1020;const nd=1021;const Zt=1023;const id=1024;const sd=1025;const di=1026;const ts=1027;const rd=1028;const $c=1029;const ad=1030;const Kc=1031;const Zc=1033;const sa=33776;const ra=33777;const aa=33778;const oa=33779;const jo=35840;const $o=35841;const Ko=35842;const Zo=35843;const Jc=36196;const Jo=37492;const Qo=37496;const el=37808;const tl=37809;const nl=37810;const il=37811;const sl=37812;const rl=37813;const al=37814;const ol=37815;const ll=37816;const cl=37817;const hl=37818;const ul=37819;const dl=37820;const fl=37821;const la=36492;const pl=36494;const ml=36495;const od=36283;const gl=36284;const _l=36285;const vl=36286;const ld=3200;const cd=3201;const Qc=0;const hd=1;const Pn="";const Qt="srgb";const Vn="srgb-linear";const vo="display-p3";const Xr="display-p3-linear";const Cr="linear";const Je="srgb";const Rr="rec709";const Lr="p3";const mi=7680;const xl=519;const ud=512;const dd=513;const fd=514;const eh=515;const pd=516;const md=517;const gd=518;const _d=519;const Sl=35044;const Ml="300 es";const Ja=1035;const En=2e3;const Pr=2001;class as{addEventListener(e,t){if(this._listeners===void 0)this._listeners={};const n=this._listeners;if(n[e]===void 0){n[e]=[]}if(n[e].indexOf(t)===-1){n[e].push(t)}}hasEventListener(e,t){if(this._listeners===void 0)return false;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const n=this._listeners;const s=n[e];if(s!==void 0){const r=s.indexOf(t);if(r!==-1){s.splice(r,1)}}}dispatchEvent(e){if(this._listeners===void 0)return;const t=this._listeners;const n=t[e.type];if(n!==void 0){e.target=this;const s=n.slice(0);for(let r=0,o=s.length;r<o;r++){s[r].call(this,e)}e.target=null}}}const vt=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];const ca=Math.PI/180;const Qa=180/Math.PI;function zs(){const i=Math.random()*4294967295|0;const e=Math.random()*4294967295|0;const t=Math.random()*4294967295|0;const n=Math.random()*4294967295|0;const s=vt[i&255]+vt[i>>8&255]+vt[i>>16&255]+vt[i>>24&255]+"-"+vt[e&255]+vt[e>>8&255]+"-"+vt[e>>16&15|64]+vt[e>>24&255]+"-"+vt[t&63|128]+vt[t>>8&255]+"-"+vt[t>>16&255]+vt[t>>24&255]+vt[n&255]+vt[n>>8&255]+vt[n>>16&255]+vt[n>>24&255];return s.toLowerCase()}function St(i,e,t){return Math.max(e,Math.min(t,i))}function vd(i,e){return(i%e+e)%e}function ha(i,e,t){return(1-t)*i+t*e}function El(i){return(i&i-1)===0&&i!==0}function eo(i){return Math.pow(2,Math.floor(Math.log(i)/Math.LN2))}function fs(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return i/4294967295;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int32Array:return Math.max(i/2147483647,-1);case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function bt(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return Math.round(i*4294967295);case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int32Array:return Math.round(i*2147483647);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}class Be{constructor(e=0,t=0){Be.prototype.isVector2=true;this.x=e;this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){this.x=e;this.y=t;return this}setScalar(e){this.x=e;this.y=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){this.x=e.x;this.y=e.y;return this}add(e){this.x+=e.x;this.y+=e.y;return this}addScalar(e){this.x+=e;this.y+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;return this}sub(e){this.x-=e.x;this.y-=e.y;return this}subScalar(e){this.x-=e;this.y-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;return this}multiply(e){this.x*=e.x;this.y*=e.y;return this}multiplyScalar(e){this.x*=e;this.y*=e;return this}divide(e){this.x/=e.x;this.y/=e.y;return this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y;const s=e.elements;this.x=s[0]*t+s[3]*n+s[6];this.y=s[1]*t+s[4]*n+s[7];return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(St(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;return this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);return this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t);const r=this.x-e.x;const o=this.y-e.y;this.x=r*n-o*s+e.x;this.y=r*s+o*n+e.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y}}class Oe{constructor(e,t,n,s,r,o,a,l,c){Oe.prototype.isMatrix3=true;this.elements=[1,0,0,0,1,0,0,0,1];if(e!==void 0){this.set(e,t,n,s,r,o,a,l,c)}}set(e,t,n,s,r,o,a,l,c){const h=this.elements;h[0]=e;h[1]=s;h[2]=a;h[3]=t;h[4]=r;h[5]=l;h[6]=n;h[7]=o;h[8]=c;return this}identity(){this.set(1,0,0,0,1,0,0,0,1);return this}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];return this}extractBasis(e,t,n){e.setFromMatrix3Column(this,0);t.setFromMatrix3Column(this,1);n.setFromMatrix3Column(this,2);return this}setFromMatrix4(e){const t=e.elements;this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]);return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const s=t.elements;const r=this.elements;const o=n[0],a=n[3],l=n[6];const c=n[1],h=n[4],u=n[7];const f=n[2],m=n[5],g=n[8];const S=s[0],p=s[3],d=s[6];const T=s[1],x=s[4],y=s[7];const L=s[2],w=s[5],A=s[8];r[0]=o*S+a*T+l*L;r[3]=o*p+a*x+l*w;r[6]=o*d+a*y+l*A;r[1]=c*S+h*T+u*L;r[4]=c*p+h*x+u*w;r[7]=c*d+h*y+u*A;r[2]=f*S+m*T+g*L;r[5]=f*p+m*x+g*w;r[8]=f*d+m*y+g*A;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[3]*=e;t[6]*=e;t[1]*=e;t[4]*=e;t[7]*=e;t[2]*=e;t[5]*=e;t[8]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8];return t*o*h-t*a*c-n*r*h+n*a*l+s*r*c-s*o*l}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=h*o-a*c,f=a*l-h*r,m=c*r-o*l,g=t*u+n*f+s*m;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const S=1/g;e[0]=u*S;e[1]=(s*c-h*n)*S;e[2]=(a*n-s*o)*S;e[3]=f*S;e[4]=(h*t-s*l)*S;e[5]=(s*r-a*t)*S;e[6]=m*S;e[7]=(n*l-c*t)*S;e[8]=(o*t-n*r)*S;return this}transpose(){let e;const t=this.elements;e=t[1];t[1]=t[3];t[3]=e;e=t[2];t[2]=t[6];t[6]=e;e=t[5];t[5]=t[7];t[7]=e;return this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;e[0]=t[0];e[1]=t[3];e[2]=t[6];e[3]=t[1];e[4]=t[4];e[5]=t[7];e[6]=t[2];e[7]=t[5];e[8]=t[8];return this}setUvTransform(e,t,n,s,r,o,a){const l=Math.cos(r);const c=Math.sin(r);this.set(n*l,n*c,-n*(l*o+c*a)+o+e,-s*c,s*l,-s*(-c*o+l*a)+a+t,0,0,1);return this}scale(e,t){this.premultiply(ua.makeScale(e,t));return this}rotate(e){this.premultiply(ua.makeRotation(-e));return this}translate(e,t){this.premultiply(ua.makeTranslation(e,t));return this}makeTranslation(e,t){if(e.isVector2){this.set(1,0,e.x,0,1,e.y,0,0,1)}else{this.set(1,0,e,0,1,t,0,0,1)}return this}makeRotation(e){const t=Math.cos(e);const n=Math.sin(e);this.set(t,-n,0,n,t,0,0,0,1);return this}makeScale(e,t){this.set(e,0,0,0,t,0,0,0,1);return this}equals(e){const t=this.elements;const n=e.elements;for(let s=0;s<9;s++){if(t[s]!==n[s])return false}return true}fromArray(e,t=0){for(let n=0;n<9;n++){this.elements[n]=e[n+t]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];return e}clone(){return new this.constructor().fromArray(this.elements)}}const ua=new Oe;function th(i){for(let e=i.length-1;e>=0;--e){if(i[e]>=65535)return true}return false}function bs(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}function xd(){const i=bs("canvas");i.style.display="block";return i}const yl={};function Sd(i){if(i in yl)return;yl[i]=true;console.warn(i)}const Tl=new Oe().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199);const bl=new Oe().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735);const Ys={[Vn]:{transfer:Cr,primaries:Rr,toReference:i=>i,fromReference:i=>i},[Qt]:{transfer:Je,primaries:Rr,toReference:i=>i.convertSRGBToLinear(),fromReference:i=>i.convertLinearToSRGB()},[Xr]:{transfer:Cr,primaries:Lr,toReference:i=>i.applyMatrix3(bl),fromReference:i=>i.applyMatrix3(Tl)},[vo]:{transfer:Je,primaries:Lr,toReference:i=>i.convertSRGBToLinear().applyMatrix3(bl),fromReference:i=>i.applyMatrix3(Tl).convertLinearToSRGB()}};const Md=new Set([Vn,Xr]);const $e={enabled:true,_workingColorSpace:Vn,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(i){if(!Md.has(i)){throw new Error(`Unsupported working color space, "${i}".`)}this._workingColorSpace=i},convert:function(i,e,t){if(this.enabled===false||e===t||!e||!t){return i}const n=Ys[e].toReference;const s=Ys[t].fromReference;return s(n(i))},fromWorkingColorSpace:function(i,e){return this.convert(i,this._workingColorSpace,e)},toWorkingColorSpace:function(i,e){return this.convert(i,e,this._workingColorSpace)},getPrimaries:function(i){return Ys[i].primaries},getTransfer:function(i){if(i===Pn)return Cr;return Ys[i].transfer}};function Bi(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function da(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}let gi;class nh{static getDataURL(e){if(/^data:/i.test(e.src)){return e.src}if(typeof HTMLCanvasElement==="undefined"){return e.src}let t;if(e instanceof HTMLCanvasElement){t=e}else{if(gi===void 0)gi=bs("canvas");gi.width=e.width;gi.height=e.height;const n=gi.getContext("2d");if(e instanceof ImageData){n.putImageData(e,0,0)}else{n.drawImage(e,0,0,e.width,e.height)}t=gi}if(t.width>2048||t.height>2048){console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e);return t.toDataURL("image/jpeg",.6)}else{return t.toDataURL("image/png")}}static sRGBToLinear(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap){const t=bs("canvas");t.width=e.width;t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const s=n.getImageData(0,0,e.width,e.height);const r=s.data;for(let o=0;o<r.length;o++){r[o]=Bi(r[o]/255)*255}n.putImageData(s,0,0);return t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++){if(t instanceof Uint8Array||t instanceof Uint8ClampedArray){t[n]=Math.floor(Bi(t[n]/255)*255)}else{t[n]=Bi(t[n])}}return{data:t,width:e.width,height:e.height}}else{console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");return e}}}let Ed=0;let ih=class Uv{constructor(e=null){this.isSource=true;Object.defineProperty(this,"id",{value:Ed++});this.uuid=zs();this.data=e;this.dataReady=true;this.version=0}set needsUpdate(e){if(e===true)this.version++}toJSON(e){const t=e===void 0||typeof e==="string";if(!t&&e.images[this.uuid]!==void 0){return e.images[this.uuid]}const n={uuid:this.uuid,url:""};const s=this.data;if(s!==null){let r;if(Array.isArray(s)){r=[];for(let o=0,a=s.length;o<a;o++){if(s[o].isDataTexture){r.push(fa(s[o].image))}else{r.push(fa(s[o]))}}}else{r=fa(s)}n.url=r}if(!t){e.images[this.uuid]=n}return n}};function fa(i){if(typeof HTMLImageElement!=="undefined"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&i instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&i instanceof ImageBitmap){return nh.getDataURL(i)}else{if(i.data){return{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}}else{console.warn("THREE.Texture: Unable to serialize Texture.");return{}}}}let yd=0;class Tt extends as{constructor(e=Tt.DEFAULT_IMAGE,t=Tt.DEFAULT_MAPPING,n=Kt,s=Kt,r=wt,o=ri,a=Zt,l=Bn,c=Tt.DEFAULT_ANISOTROPY,h=Pn){super();this.isTexture=true;Object.defineProperty(this,"id",{value:yd++});this.uuid=zs();this.name="";this.source=new ih(e);this.mipmaps=[];this.mapping=t;this.channel=0;this.wrapS=n;this.wrapT=s;this.magFilter=r;this.minFilter=o;this.anisotropy=c;this.format=a;this.internalFormat=null;this.type=l;this.offset=new Be(0,0);this.repeat=new Be(1,1);this.center=new Be(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Oe;this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;this.colorSpace=h;this.userData={};this.version=0;this.onUpdate=null;this.isRenderTargetTexture=false;this.needsPMREMUpdate=false}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name;this.source=e.source;this.mipmaps=e.mipmaps.slice(0);this.mapping=e.mapping;this.channel=e.channel;this.wrapS=e.wrapS;this.wrapT=e.wrapT;this.magFilter=e.magFilter;this.minFilter=e.minFilter;this.anisotropy=e.anisotropy;this.format=e.format;this.internalFormat=e.internalFormat;this.type=e.type;this.offset.copy(e.offset);this.repeat.copy(e.repeat);this.center.copy(e.center);this.rotation=e.rotation;this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrix.copy(e.matrix);this.generateMipmaps=e.generateMipmaps;this.premultiplyAlpha=e.premultiplyAlpha;this.flipY=e.flipY;this.unpackAlignment=e.unpackAlignment;this.colorSpace=e.colorSpace;this.userData=JSON.parse(JSON.stringify(e.userData));this.needsUpdate=true;return this}toJSON(e){const t=e===void 0||typeof e==="string";if(!t&&e.textures[this.uuid]!==void 0){return e.textures[this.uuid]}const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(Object.keys(this.userData).length>0)n.userData=this.userData;if(!t){e.textures[this.uuid]=n}return n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==Xc)return e;e.applyMatrix3(this.matrix);if(e.x<0||e.x>1){switch(this.wrapS){case Ka:e.x=e.x-Math.floor(e.x);break;case Kt:e.x=e.x<0?0:1;break;case Za:if(Math.abs(Math.floor(e.x)%2)===1){e.x=Math.ceil(e.x)-e.x}else{e.x=e.x-Math.floor(e.x)}break}}if(e.y<0||e.y>1){switch(this.wrapT){case Ka:e.y=e.y-Math.floor(e.y);break;case Kt:e.y=e.y<0?0:1;break;case Za:if(Math.abs(Math.floor(e.y)%2)===1){e.y=Math.ceil(e.y)-e.y}else{e.y=e.y-Math.floor(e.y)}break}}if(this.flipY){e.y=1-e.y}return e}set needsUpdate(e){if(e===true){this.version++;this.source.needsUpdate=true}}}Tt.DEFAULT_IMAGE=null;Tt.DEFAULT_MAPPING=Xc;Tt.DEFAULT_ANISOTROPY=1;class gt{constructor(e=0,t=0,n=0,s=1){gt.prototype.isVector4=true;this.x=e;this.y=t;this.z=n;this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,s){this.x=e;this.y=t;this.z=n;this.w=s;return this}setScalar(e){this.x=e;this.y=e;this.z=e;this.w=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setW(e){this.w=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;this.w=e.w!==void 0?e.w:1;return this}add(e){this.x+=e.x;this.y+=e.y;this.z+=e.z;this.w+=e.w;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;this.w+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;this.w=e.w+t.w;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;this.w+=e.w*t;return this}sub(e){this.x-=e.x;this.y-=e.y;this.z-=e.z;this.w-=e.w;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;this.w-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;this.w=e.w-t.w;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;this.w*=e.w;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;this.w*=e;return this}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,r=this.w;const o=e.elements;this.x=o[0]*t+o[4]*n+o[8]*s+o[12]*r;this.y=o[1]*t+o[5]*n+o[9]*s+o[13]*r;this.z=o[2]*t+o[6]*n+o[10]*s+o[14]*r;this.w=o[3]*t+o[7]*n+o[11]*s+o[15]*r;return this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);if(t<1e-4){this.x=1;this.y=0;this.z=0}else{this.x=e.x/t;this.y=e.y/t;this.z=e.z/t}return this}setAxisAngleFromRotationMatrix(e){let t,n,s,r;const o=.01,a=.1,l=e.elements,c=l[0],h=l[4],u=l[8],f=l[1],m=l[5],g=l[9],S=l[2],p=l[6],d=l[10];if(Math.abs(h-f)<o&&Math.abs(u-S)<o&&Math.abs(g-p)<o){if(Math.abs(h+f)<a&&Math.abs(u+S)<a&&Math.abs(g+p)<a&&Math.abs(c+m+d-3)<a){this.set(1,0,0,0);return this}t=Math.PI;const x=(c+1)/2;const y=(m+1)/2;const L=(d+1)/2;const w=(h+f)/4;const A=(u+S)/4;const B=(g+p)/4;if(x>y&&x>L){if(x<o){n=0;s=.707106781;r=.707106781}else{n=Math.sqrt(x);s=w/n;r=A/n}}else if(y>L){if(y<o){n=.707106781;s=0;r=.707106781}else{s=Math.sqrt(y);n=w/s;r=B/s}}else{if(L<o){n=.707106781;s=.707106781;r=0}else{r=Math.sqrt(L);n=A/r;s=B/r}}this.set(n,s,r,t);return this}let T=Math.sqrt((p-g)*(p-g)+(u-S)*(u-S)+(f-h)*(f-h));if(Math.abs(T)<.001)T=1;this.x=(p-g)/T;this.y=(u-S)/T;this.z=(f-h)/T;this.w=Math.acos((c+m+d-1)/2);return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);this.w=Math.min(this.w,e.w);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);this.w=Math.max(this.w,e.w);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));this.w=Math.max(e.w,Math.min(t.w,this.w));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));this.w=Math.max(e,Math.min(t,this.w));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);this.w=Math.trunc(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;this.w+=(e.w-this.w)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;this.w=e.w+(t.w-e.w)*n;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];this.w=e[t+3];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;e[t+3]=this.w;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);this.w=e.getW(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;yield this.w}}class Td extends as{constructor(e=1,t=1,n={}){super();this.isRenderTarget=true;this.width=e;this.height=t;this.depth=1;this.scissor=new gt(0,0,e,t);this.scissorTest=false;this.viewport=new gt(0,0,e,t);const s={width:e,height:t,depth:1};n=Object.assign({generateMipmaps:false,internalFormat:null,minFilter:wt,depthBuffer:true,stencilBuffer:false,depthTexture:null,samples:0,count:1},n);const r=new Tt(s,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);r.flipY=false;r.generateMipmaps=n.generateMipmaps;r.internalFormat=n.internalFormat;this.textures=[];const o=n.count;for(let a=0;a<o;a++){this.textures[a]=r.clone();this.textures[a].isRenderTargetTexture=true}this.depthBuffer=n.depthBuffer;this.stencilBuffer=n.stencilBuffer;this.depthTexture=n.depthTexture;this.samples=n.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e;this.height=t;this.depth=n;for(let s=0,r=this.textures.length;s<r;s++){this.textures[s].image.width=e;this.textures[s].image.height=t;this.textures[s].image.depth=n}this.dispose()}this.viewport.set(0,0,e,t);this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width;this.height=e.height;this.depth=e.depth;this.scissor.copy(e.scissor);this.scissorTest=e.scissorTest;this.viewport.copy(e.viewport);this.textures.length=0;for(let n=0,s=e.textures.length;n<s;n++){this.textures[n]=e.textures[n].clone();this.textures[n].isRenderTargetTexture=true}const t=Object.assign({},e.texture.image);this.texture.source=new ih(t);this.depthBuffer=e.depthBuffer;this.stencilBuffer=e.stencilBuffer;if(e.depthTexture!==null)this.depthTexture=e.depthTexture.clone();this.samples=e.samples;return this}dispose(){this.dispatchEvent({type:"dispose"})}}class rn extends Td{constructor(e=1,t=1,n={}){super(e,t,n);this.isWebGLRenderTarget=true}}class sh extends Tt{constructor(e=null,t=1,n=1,s=1){super(null);this.isDataArrayTexture=true;this.image={data:e,width:t,height:n,depth:s};this.magFilter=yt;this.minFilter=yt;this.wrapR=Kt;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class bd extends Tt{constructor(e=null,t=1,n=1,s=1){super(null);this.isData3DTexture=true;this.image={data:e,width:t,height:n,depth:s};this.magFilter=yt;this.minFilter=yt;this.wrapR=Kt;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class Gs{constructor(e=0,t=0,n=0,s=1){this.isQuaternion=true;this._x=e;this._y=t;this._z=n;this._w=s}static slerpFlat(e,t,n,s,r,o,a){let l=n[s+0],c=n[s+1],h=n[s+2],u=n[s+3];const f=r[o+0],m=r[o+1],g=r[o+2],S=r[o+3];if(a===0){e[t+0]=l;e[t+1]=c;e[t+2]=h;e[t+3]=u;return}if(a===1){e[t+0]=f;e[t+1]=m;e[t+2]=g;e[t+3]=S;return}if(u!==S||l!==f||c!==m||h!==g){let p=1-a;const d=l*f+c*m+h*g+u*S,T=d>=0?1:-1,x=1-d*d;if(x>Number.EPSILON){const L=Math.sqrt(x),w=Math.atan2(L,d*T);p=Math.sin(p*w)/L;a=Math.sin(a*w)/L}const y=a*T;l=l*p+f*y;c=c*p+m*y;h=h*p+g*y;u=u*p+S*y;if(p===1-a){const L=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=L;c*=L;h*=L;u*=L}}e[t]=l;e[t+1]=c;e[t+2]=h;e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,s,r,o){const a=n[s];const l=n[s+1];const c=n[s+2];const h=n[s+3];const u=r[o];const f=r[o+1];const m=r[o+2];const g=r[o+3];e[t]=a*g+h*u+l*m-c*f;e[t+1]=l*g+h*f+c*u-a*m;e[t+2]=c*g+h*m+a*f-l*u;e[t+3]=h*g-a*u-l*f-c*m;return e}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e;this._onChangeCallback()}set(e,t,n,s){this._x=e;this._y=t;this._z=n;this._w=s;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){this._x=e.x;this._y=e.y;this._z=e.z;this._w=e.w;this._onChangeCallback();return this}setFromEuler(e,t=true){const n=e._x,s=e._y,r=e._z,o=e._order;const a=Math.cos;const l=Math.sin;const c=a(n/2);const h=a(s/2);const u=a(r/2);const f=l(n/2);const m=l(s/2);const g=l(r/2);switch(o){case"XYZ":this._x=f*h*u+c*m*g;this._y=c*m*u-f*h*g;this._z=c*h*g+f*m*u;this._w=c*h*u-f*m*g;break;case"YXZ":this._x=f*h*u+c*m*g;this._y=c*m*u-f*h*g;this._z=c*h*g-f*m*u;this._w=c*h*u+f*m*g;break;case"ZXY":this._x=f*h*u-c*m*g;this._y=c*m*u+f*h*g;this._z=c*h*g+f*m*u;this._w=c*h*u-f*m*g;break;case"ZYX":this._x=f*h*u-c*m*g;this._y=c*m*u+f*h*g;this._z=c*h*g-f*m*u;this._w=c*h*u+f*m*g;break;case"YZX":this._x=f*h*u+c*m*g;this._y=c*m*u+f*h*g;this._z=c*h*g-f*m*u;this._w=c*h*u-f*m*g;break;case"XZY":this._x=f*h*u-c*m*g;this._y=c*m*u-f*h*g;this._z=c*h*g+f*m*u;this._w=c*h*u+f*m*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}if(t===true)this._onChangeCallback();return this}setFromAxisAngle(e,t){const n=t/2,s=Math.sin(n);this._x=e.x*s;this._y=e.y*s;this._z=e.z*s;this._w=Math.cos(n);this._onChangeCallback();return this}setFromRotationMatrix(e){const t=e.elements,n=t[0],s=t[4],r=t[8],o=t[1],a=t[5],l=t[9],c=t[2],h=t[6],u=t[10],f=n+a+u;if(f>0){const m=.5/Math.sqrt(f+1);this._w=.25/m;this._x=(h-l)*m;this._y=(r-c)*m;this._z=(o-s)*m}else if(n>a&&n>u){const m=2*Math.sqrt(1+n-a-u);this._w=(h-l)/m;this._x=.25*m;this._y=(s+o)/m;this._z=(r+c)/m}else if(a>u){const m=2*Math.sqrt(1+a-n-u);this._w=(r-c)/m;this._x=(s+o)/m;this._y=.25*m;this._z=(l+h)/m}else{const m=2*Math.sqrt(1+u-n-a);this._w=(o-s)/m;this._x=(r+c)/m;this._y=(l+h)/m;this._z=.25*m}this._onChangeCallback();return this}setFromUnitVectors(e,t){let n=e.dot(t)+1;if(n<Number.EPSILON){n=0;if(Math.abs(e.x)>Math.abs(e.z)){this._x=-e.y;this._y=e.x;this._z=0;this._w=n}else{this._x=0;this._y=-e.z;this._z=e.y;this._w=n}}else{this._x=e.y*t.z-e.z*t.y;this._y=e.z*t.x-e.x*t.z;this._z=e.x*t.y-e.y*t.x;this._w=n}return this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(St(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const s=Math.min(1,t/n);this.slerp(e,s);return this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();if(e===0){this._x=0;this._y=0;this._z=0;this._w=1}else{e=1/e;this._x=this._x*e;this._y=this._y*e;this._z=this._z*e;this._w=this._w*e}this._onChangeCallback();return this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,s=e._y,r=e._z,o=e._w;const a=t._x,l=t._y,c=t._z,h=t._w;this._x=n*h+o*a+s*c-r*l;this._y=s*h+o*l+r*a-n*c;this._z=r*h+o*c+n*l-s*a;this._w=o*h-n*a-s*l-r*c;this._onChangeCallback();return this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,s=this._y,r=this._z,o=this._w;let a=o*e._w+n*e._x+s*e._y+r*e._z;if(a<0){this._w=-e._w;this._x=-e._x;this._y=-e._y;this._z=-e._z;a=-a}else{this.copy(e)}if(a>=1){this._w=o;this._x=n;this._y=s;this._z=r;return this}const l=1-a*a;if(l<=Number.EPSILON){const m=1-t;this._w=m*o+t*this._w;this._x=m*n+t*this._x;this._y=m*s+t*this._y;this._z=m*r+t*this._z;this.normalize();return this}const c=Math.sqrt(l);const h=Math.atan2(c,a);const u=Math.sin((1-t)*h)/c,f=Math.sin(t*h)/c;this._w=o*u+this._w*f;this._x=n*u+this._x*f;this._y=s*u+this._y*f;this._z=r*u+this._z*f;this._onChangeCallback();return this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random();const t=2*Math.PI*Math.random();const n=Math.random();const s=Math.sqrt(1-n);const r=Math.sqrt(n);return this.set(s*Math.sin(e),s*Math.cos(e),r*Math.sin(t),r*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){this._x=e[t];this._y=e[t+1];this._z=e[t+2];this._w=e[t+3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._w;return e}fromBufferAttribute(e,t){this._x=e.getX(t);this._y=e.getY(t);this._z=e.getZ(t);this._w=e.getW(t);this._onChangeCallback();return this}toJSON(){return this.toArray()}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._w}}class P{constructor(e=0,t=0,n=0){P.prototype.isVector3=true;this.x=e;this.y=t;this.z=n}set(e,t,n){if(n===void 0)n=this.z;this.x=e;this.y=t;this.z=n;return this}setScalar(e){this.x=e;this.y=e;this.z=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;return this}add(e){this.x+=e.x;this.y+=e.y;this.z+=e.z;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;return this}sub(e){this.x-=e.x;this.y-=e.y;this.z-=e.z;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;return this}multiplyVectors(e,t){this.x=e.x*t.x;this.y=e.y*t.y;this.z=e.z*t.z;return this}applyEuler(e){return this.applyQuaternion(Al.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Al.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,s=this.z;const r=e.elements;this.x=r[0]*t+r[3]*n+r[6]*s;this.y=r[1]*t+r[4]*n+r[7]*s;this.z=r[2]*t+r[5]*n+r[8]*s;return this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,s=this.z;const r=e.elements;const o=1/(r[3]*t+r[7]*n+r[11]*s+r[15]);this.x=(r[0]*t+r[4]*n+r[8]*s+r[12])*o;this.y=(r[1]*t+r[5]*n+r[9]*s+r[13])*o;this.z=(r[2]*t+r[6]*n+r[10]*s+r[14])*o;return this}applyQuaternion(e){const t=this.x,n=this.y,s=this.z;const r=e.x,o=e.y,a=e.z,l=e.w;const c=2*(o*s-a*n);const h=2*(a*t-r*s);const u=2*(r*n-o*t);this.x=t+l*c+o*u-a*h;this.y=n+l*h+a*c-r*u;this.z=s+l*u+r*h-o*c;return this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,s=this.z;const r=e.elements;this.x=r[0]*t+r[4]*n+r[8]*s;this.y=r[1]*t+r[5]*n+r[9]*s;this.z=r[2]*t+r[6]*n+r[10]*s;return this.normalize()}divide(e){this.x/=e.x;this.y/=e.y;this.z/=e.z;return this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;return this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,s=e.y,r=e.z;const o=t.x,a=t.y,l=t.z;this.x=s*l-r*a;this.y=r*o-n*l;this.z=n*a-s*o;return this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){pa.copy(this).projectOnVector(e);return this.sub(pa)}reflect(e){return this.sub(pa.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(St(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,s=this.z-e.z;return t*t+n*n+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const s=Math.sin(t)*e;this.x=s*Math.sin(n);this.y=Math.cos(t)*e;this.z=s*Math.cos(n);return this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){this.x=e*Math.sin(t);this.y=n;this.z=e*Math.cos(t);return this}setFromMatrixPosition(e){const t=e.elements;this.x=t[12];this.y=t[13];this.z=t[14];return this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length();const n=this.setFromMatrixColumn(e,1).length();const s=this.setFromMatrixColumn(e,2).length();this.x=t;this.y=n;this.z=s;return this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){this.x=e._x;this.y=e._y;this.z=e._z;return this}setFromColor(e){this.x=e.r;this.y=e.g;this.z=e.b;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}randomDirection(){const e=Math.random()*Math.PI*2;const t=Math.random()*2-1;const n=Math.sqrt(1-t*t);this.x=n*Math.cos(e);this.y=t;this.z=n*Math.sin(e);return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z}}const pa=new P;const Al=new Gs;class Hs{constructor(e=new P(Infinity,Infinity,Infinity),t=new P(-Infinity,-Infinity,-Infinity)){this.isBox3=true;this.min=e;this.max=t}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3){this.expandByPoint(qt.fromArray(e,t))}return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++){this.expandByPoint(qt.fromBufferAttribute(e,t))}return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++){this.expandByPoint(e[t])}return this}setFromCenterAndSize(e,t){const n=qt.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}setFromObject(e,t=false){this.makeEmpty();return this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}expandByObject(e,t=false){e.updateWorldMatrix(false,false);const n=e.geometry;if(n!==void 0){const r=n.getAttribute("position");if(t===true&&r!==void 0&&e.isInstancedMesh!==true){for(let o=0,a=r.count;o<a;o++){if(e.isMesh===true){e.getVertexPosition(o,qt)}else{qt.fromBufferAttribute(r,o)}qt.applyMatrix4(e.matrixWorld);this.expandByPoint(qt)}}else{if(e.boundingBox!==void 0){if(e.boundingBox===null){e.computeBoundingBox()}js.copy(e.boundingBox)}else{if(n.boundingBox===null){n.computeBoundingBox()}js.copy(n.boundingBox)}js.applyMatrix4(e.matrixWorld);this.union(js)}}const s=e.children;for(let r=0,o=s.length;r<o;r++){this.expandByObject(s[r],t)}return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z?false:true}intersectsSphere(e){this.clampPoint(e.center,qt);return qt.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;if(e.normal.x>0){t=e.normal.x*this.min.x;n=e.normal.x*this.max.x}else{t=e.normal.x*this.max.x;n=e.normal.x*this.min.x}if(e.normal.y>0){t+=e.normal.y*this.min.y;n+=e.normal.y*this.max.y}else{t+=e.normal.y*this.max.y;n+=e.normal.y*this.min.y}if(e.normal.z>0){t+=e.normal.z*this.min.z;n+=e.normal.z*this.max.z}else{t+=e.normal.z*this.max.z;n+=e.normal.z*this.min.z}return t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty()){return false}this.getCenter(ps);$s.subVectors(this.max,ps);_i.subVectors(e.a,ps);vi.subVectors(e.b,ps);xi.subVectors(e.c,ps);bn.subVectors(vi,_i);An.subVectors(xi,vi);Yn.subVectors(_i,xi);let t=[0,-bn.z,bn.y,0,-An.z,An.y,0,-Yn.z,Yn.y,bn.z,0,-bn.x,An.z,0,-An.x,Yn.z,0,-Yn.x,-bn.y,bn.x,0,-An.y,An.x,0,-Yn.y,Yn.x,0];if(!ma(t,_i,vi,xi,$s)){return false}t=[1,0,0,0,1,0,0,0,1];if(!ma(t,_i,vi,xi,$s)){return false}Ks.crossVectors(bn,An);t=[Ks.x,Ks.y,Ks.z];return ma(t,_i,vi,xi,$s)}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,qt).distanceTo(e)}getBoundingSphere(e){if(this.isEmpty()){e.makeEmpty()}else{this.getCenter(e.center);e.radius=this.getSize(qt).length()*.5}return e}intersect(e){this.min.max(e.min);this.max.min(e.max);if(this.isEmpty())this.makeEmpty();return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}applyMatrix4(e){if(this.isEmpty())return this;ln[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e);ln[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e);ln[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e);ln[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e);ln[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e);ln[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e);ln[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e);ln[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e);this.setFromPoints(ln);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const ln=[new P,new P,new P,new P,new P,new P,new P,new P];const qt=new P;const js=new Hs;const _i=new P;const vi=new P;const xi=new P;const bn=new P;const An=new P;const Yn=new P;const ps=new P;const $s=new P;const Ks=new P;const jn=new P;function ma(i,e,t,n,s){for(let r=0,o=i.length-3;r<=o;r+=3){jn.fromArray(i,r);const a=s.x*Math.abs(jn.x)+s.y*Math.abs(jn.y)+s.z*Math.abs(jn.z);const l=e.dot(jn);const c=t.dot(jn);const h=n.dot(jn);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a){return false}}return true}const Ad=new Hs;const ms=new P;const ga=new P;class qr{constructor(e=new P,t=-1){this.isSphere=true;this.center=e;this.radius=t}set(e,t){this.center.copy(e);this.radius=t;return this}setFromPoints(e,t){const n=this.center;if(t!==void 0){n.copy(t)}else{Ad.setFromPoints(e).getCenter(n)}let s=0;for(let r=0,o=e.length;r<o;r++){s=Math.max(s,n.distanceToSquared(e[r]))}this.radius=Math.sqrt(s);return this}copy(e){this.center.copy(e.center);this.radius=e.radius;return this}isEmpty(){return this.radius<0}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);t.copy(e);if(n>this.radius*this.radius){t.sub(this.center).normalize();t.multiplyScalar(this.radius).add(this.center)}return t}getBoundingBox(e){if(this.isEmpty()){e.makeEmpty();return e}e.set(this.center,this.center);e.expandByScalar(this.radius);return e}applyMatrix4(e){this.center.applyMatrix4(e);this.radius=this.radius*e.getMaxScaleOnAxis();return this}translate(e){this.center.add(e);return this}expandByPoint(e){if(this.isEmpty()){this.center.copy(e);this.radius=0;return this}ms.subVectors(e,this.center);const t=ms.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t);const s=(n-this.radius)*.5;this.center.addScaledVector(ms,s/n);this.radius+=s}return this}union(e){if(e.isEmpty()){return this}if(this.isEmpty()){this.copy(e);return this}if(this.center.equals(e.center)===true){this.radius=Math.max(this.radius,e.radius)}else{ga.subVectors(e.center,this.center).setLength(e.radius);this.expandByPoint(ms.copy(e.center).add(ga));this.expandByPoint(ms.copy(e.center).sub(ga))}return this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const cn=new P;const _a=new P;const Zs=new P;const wn=new P;const va=new P;const Js=new P;const xa=new P;class rh{constructor(e=new P,t=new P(0,0,-1)){this.origin=e;this.direction=t}set(e,t){this.origin.copy(e);this.direction.copy(t);return this}copy(e){this.origin.copy(e.origin);this.direction.copy(e.direction);return this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){this.direction.copy(e).sub(this.origin).normalize();return this}recast(e){this.origin.copy(this.at(e,cn));return this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);if(n<0){return t.copy(this.origin)}return t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=cn.subVectors(e,this.origin).dot(this.direction);if(t<0){return this.origin.distanceToSquared(e)}cn.copy(this.origin).addScaledVector(this.direction,t);return cn.distanceToSquared(e)}distanceSqToSegment(e,t,n,s){_a.copy(e).add(t).multiplyScalar(.5);Zs.copy(t).sub(e).normalize();wn.copy(this.origin).sub(_a);const r=e.distanceTo(t)*.5;const o=-this.direction.dot(Zs);const a=wn.dot(this.direction);const l=-wn.dot(Zs);const c=wn.lengthSq();const h=Math.abs(1-o*o);let u,f,m,g;if(h>0){u=o*l-a;f=o*a-l;g=r*h;if(u>=0){if(f>=-g){if(f<=g){const S=1/h;u*=S;f*=S;m=u*(u+o*f+2*a)+f*(o*u+f+2*l)+c}else{f=r;u=Math.max(0,-(o*f+a));m=-u*u+f*(f+2*l)+c}}else{f=-r;u=Math.max(0,-(o*f+a));m=-u*u+f*(f+2*l)+c}}else{if(f<=-g){u=Math.max(0,-(-o*r+a));f=u>0?-r:Math.min(Math.max(-r,-l),r);m=-u*u+f*(f+2*l)+c}else if(f<=g){u=0;f=Math.min(Math.max(-r,-l),r);m=f*(f+2*l)+c}else{u=Math.max(0,-(o*r+a));f=u>0?r:Math.min(Math.max(-r,-l),r);m=-u*u+f*(f+2*l)+c}}}else{f=o>0?-r:r;u=Math.max(0,-(o*f+a));m=-u*u+f*(f+2*l)+c}if(n){n.copy(this.origin).addScaledVector(this.direction,u)}if(s){s.copy(_a).addScaledVector(Zs,f)}return m}intersectSphere(e,t){cn.subVectors(e.center,this.origin);const n=cn.dot(this.direction);const s=cn.dot(cn)-n*n;const r=e.radius*e.radius;if(s>r)return null;const o=Math.sqrt(r-s);const a=n-o;const l=n+o;if(l<0)return null;if(a<0)return this.at(l,t);return this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0){if(e.distanceToPoint(this.origin)===0){return 0}return null}const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);if(n===null){return null}return this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0){return true}const n=e.normal.dot(this.direction);if(n*t<0){return true}return false}intersectBox(e,t){let n,s,r,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z;const f=this.origin;if(c>=0){n=(e.min.x-f.x)*c;s=(e.max.x-f.x)*c}else{n=(e.max.x-f.x)*c;s=(e.min.x-f.x)*c}if(h>=0){r=(e.min.y-f.y)*h;o=(e.max.y-f.y)*h}else{r=(e.max.y-f.y)*h;o=(e.min.y-f.y)*h}if(n>o||r>s)return null;if(r>n||isNaN(n))n=r;if(o<s||isNaN(s))s=o;if(u>=0){a=(e.min.z-f.z)*u;l=(e.max.z-f.z)*u}else{a=(e.max.z-f.z)*u;l=(e.min.z-f.z)*u}if(n>l||a>s)return null;if(a>n||n!==n)n=a;if(l<s||s!==s)s=l;if(s<0)return null;return this.at(n>=0?n:s,t)}intersectsBox(e){return this.intersectBox(e,cn)!==null}intersectTriangle(e,t,n,s,r){va.subVectors(t,e);Js.subVectors(n,e);xa.crossVectors(va,Js);let o=this.direction.dot(xa);let a;if(o>0){if(s)return null;a=1}else if(o<0){a=-1;o=-o}else{return null}wn.subVectors(this.origin,e);const l=a*this.direction.dot(Js.crossVectors(wn,Js));if(l<0){return null}const c=a*this.direction.dot(va.cross(wn));if(c<0){return null}if(l+c>o){return null}const h=-a*wn.dot(xa);if(h<0){return null}return this.at(h/o,r)}applyMatrix4(e){this.origin.applyMatrix4(e);this.direction.transformDirection(e);return this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class rt{constructor(e,t,n,s,r,o,a,l,c,h,u,f,m,g,S,p){rt.prototype.isMatrix4=true;this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(e!==void 0){this.set(e,t,n,s,r,o,a,l,c,h,u,f,m,g,S,p)}}set(e,t,n,s,r,o,a,l,c,h,u,f,m,g,S,p){const d=this.elements;d[0]=e;d[4]=t;d[8]=n;d[12]=s;d[1]=r;d[5]=o;d[9]=a;d[13]=l;d[2]=c;d[6]=h;d[10]=u;d[14]=f;d[3]=m;d[7]=g;d[11]=S;d[15]=p;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return new rt().fromArray(this.elements)}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];t[9]=n[9];t[10]=n[10];t[11]=n[11];t[12]=n[12];t[13]=n[13];t[14]=n[14];t[15]=n[15];return this}copyPosition(e){const t=this.elements,n=e.elements;t[12]=n[12];t[13]=n[13];t[14]=n[14];return this}setFromMatrix3(e){const t=e.elements;this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1);return this}extractBasis(e,t,n){e.setFromMatrixColumn(this,0);t.setFromMatrixColumn(this,1);n.setFromMatrixColumn(this,2);return this}makeBasis(e,t,n){this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1);return this}extractRotation(e){const t=this.elements;const n=e.elements;const s=1/Si.setFromMatrixColumn(e,0).length();const r=1/Si.setFromMatrixColumn(e,1).length();const o=1/Si.setFromMatrixColumn(e,2).length();t[0]=n[0]*s;t[1]=n[1]*s;t[2]=n[2]*s;t[3]=0;t[4]=n[4]*r;t[5]=n[5]*r;t[6]=n[6]*r;t[7]=0;t[8]=n[8]*o;t[9]=n[9]*o;t[10]=n[10]*o;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromEuler(e){const t=this.elements;const n=e.x,s=e.y,r=e.z;const o=Math.cos(n),a=Math.sin(n);const l=Math.cos(s),c=Math.sin(s);const h=Math.cos(r),u=Math.sin(r);if(e.order==="XYZ"){const f=o*h,m=o*u,g=a*h,S=a*u;t[0]=l*h;t[4]=-l*u;t[8]=c;t[1]=m+g*c;t[5]=f-S*c;t[9]=-a*l;t[2]=S-f*c;t[6]=g+m*c;t[10]=o*l}else if(e.order==="YXZ"){const f=l*h,m=l*u,g=c*h,S=c*u;t[0]=f+S*a;t[4]=g*a-m;t[8]=o*c;t[1]=o*u;t[5]=o*h;t[9]=-a;t[2]=m*a-g;t[6]=S+f*a;t[10]=o*l}else if(e.order==="ZXY"){const f=l*h,m=l*u,g=c*h,S=c*u;t[0]=f-S*a;t[4]=-o*u;t[8]=g+m*a;t[1]=m+g*a;t[5]=o*h;t[9]=S-f*a;t[2]=-o*c;t[6]=a;t[10]=o*l}else if(e.order==="ZYX"){const f=o*h,m=o*u,g=a*h,S=a*u;t[0]=l*h;t[4]=g*c-m;t[8]=f*c+S;t[1]=l*u;t[5]=S*c+f;t[9]=m*c-g;t[2]=-c;t[6]=a*l;t[10]=o*l}else if(e.order==="YZX"){const f=o*l,m=o*c,g=a*l,S=a*c;t[0]=l*h;t[4]=S-f*u;t[8]=g*u+m;t[1]=u;t[5]=o*h;t[9]=-a*h;t[2]=-c*h;t[6]=m*u+g;t[10]=f-S*u}else if(e.order==="XZY"){const f=o*l,m=o*c,g=a*l,S=a*c;t[0]=l*h;t[4]=-u;t[8]=c*h;t[1]=f*u+S;t[5]=o*h;t[9]=m*u-g;t[2]=g*u-m;t[6]=a*h;t[10]=S*u+f}t[3]=0;t[7]=0;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromQuaternion(e){return this.compose(wd,e,Cd)}lookAt(e,t,n){const s=this.elements;Ut.subVectors(e,t);if(Ut.lengthSq()===0){Ut.z=1}Ut.normalize();Cn.crossVectors(n,Ut);if(Cn.lengthSq()===0){if(Math.abs(n.z)===1){Ut.x+=1e-4}else{Ut.z+=1e-4}Ut.normalize();Cn.crossVectors(n,Ut)}Cn.normalize();Qs.crossVectors(Ut,Cn);s[0]=Cn.x;s[4]=Qs.x;s[8]=Ut.x;s[1]=Cn.y;s[5]=Qs.y;s[9]=Ut.y;s[2]=Cn.z;s[6]=Qs.z;s[10]=Ut.z;return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const s=t.elements;const r=this.elements;const o=n[0],a=n[4],l=n[8],c=n[12];const h=n[1],u=n[5],f=n[9],m=n[13];const g=n[2],S=n[6],p=n[10],d=n[14];const T=n[3],x=n[7],y=n[11],L=n[15];const w=s[0],A=s[4],B=s[8],Q=s[12];const v=s[1],b=s[5],ee=s[9],$=s[13];const C=s[2],V=s[6],H=s[10],q=s[14];const k=s[3],X=s[7],Y=s[11],re=s[15];r[0]=o*w+a*v+l*C+c*k;r[4]=o*A+a*b+l*V+c*X;r[8]=o*B+a*ee+l*H+c*Y;r[12]=o*Q+a*$+l*q+c*re;r[1]=h*w+u*v+f*C+m*k;r[5]=h*A+u*b+f*V+m*X;r[9]=h*B+u*ee+f*H+m*Y;r[13]=h*Q+u*$+f*q+m*re;r[2]=g*w+S*v+p*C+d*k;r[6]=g*A+S*b+p*V+d*X;r[10]=g*B+S*ee+p*H+d*Y;r[14]=g*Q+S*$+p*q+d*re;r[3]=T*w+x*v+y*C+L*k;r[7]=T*A+x*b+y*V+L*X;r[11]=T*B+x*ee+y*H+L*Y;r[15]=T*Q+x*$+y*q+L*re;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[4]*=e;t[8]*=e;t[12]*=e;t[1]*=e;t[5]*=e;t[9]*=e;t[13]*=e;t[2]*=e;t[6]*=e;t[10]*=e;t[14]*=e;t[3]*=e;t[7]*=e;t[11]*=e;t[15]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[4],s=e[8],r=e[12];const o=e[1],a=e[5],l=e[9],c=e[13];const h=e[2],u=e[6],f=e[10],m=e[14];const g=e[3],S=e[7],p=e[11],d=e[15];return g*(+r*l*u-s*c*u-r*a*f+n*c*f+s*a*m-n*l*m)+S*(+t*l*m-t*c*f+r*o*f-s*o*m+s*c*h-r*l*h)+p*(+t*c*u-t*a*m-r*o*u+n*o*m+r*a*h-n*c*h)+d*(-s*a*h-t*l*u+t*a*f+s*o*u-n*o*f+n*l*h)}transpose(){const e=this.elements;let t;t=e[1];e[1]=e[4];e[4]=t;t=e[2];e[2]=e[8];e[8]=t;t=e[6];e[6]=e[9];e[9]=t;t=e[3];e[3]=e[12];e[12]=t;t=e[7];e[7]=e[13];e[13]=t;t=e[11];e[11]=e[14];e[14]=t;return this}setPosition(e,t,n){const s=this.elements;if(e.isVector3){s[12]=e.x;s[13]=e.y;s[14]=e.z}else{s[12]=e;s[13]=t;s[14]=n}return this}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=e[9],f=e[10],m=e[11],g=e[12],S=e[13],p=e[14],d=e[15],T=u*p*c-S*f*c+S*l*m-a*p*m-u*l*d+a*f*d,x=g*f*c-h*p*c-g*l*m+o*p*m+h*l*d-o*f*d,y=h*S*c-g*u*c+g*a*m-o*S*m-h*a*d+o*u*d,L=g*u*l-h*S*l-g*a*f+o*S*f+h*a*p-o*u*p;const w=t*T+n*x+s*y+r*L;if(w===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const A=1/w;e[0]=T*A;e[1]=(S*f*r-u*p*r-S*s*m+n*p*m+u*s*d-n*f*d)*A;e[2]=(a*p*r-S*l*r+S*s*c-n*p*c-a*s*d+n*l*d)*A;e[3]=(u*l*r-a*f*r-u*s*c+n*f*c+a*s*m-n*l*m)*A;e[4]=x*A;e[5]=(h*p*r-g*f*r+g*s*m-t*p*m-h*s*d+t*f*d)*A;e[6]=(g*l*r-o*p*r-g*s*c+t*p*c+o*s*d-t*l*d)*A;e[7]=(o*f*r-h*l*r+h*s*c-t*f*c-o*s*m+t*l*m)*A;e[8]=y*A;e[9]=(g*u*r-h*S*r-g*n*m+t*S*m+h*n*d-t*u*d)*A;e[10]=(o*S*r-g*a*r+g*n*c-t*S*c-o*n*d+t*a*d)*A;e[11]=(h*a*r-o*u*r-h*n*c+t*u*c+o*n*m-t*a*m)*A;e[12]=L*A;e[13]=(h*S*s-g*u*s+g*n*f-t*S*f-h*n*p+t*u*p)*A;e[14]=(g*a*s-o*S*s-g*n*l+t*S*l+o*n*p-t*a*p)*A;e[15]=(o*u*s-h*a*s+h*n*l-t*u*l-o*n*f+t*a*f)*A;return this}scale(e){const t=this.elements;const n=e.x,s=e.y,r=e.z;t[0]*=n;t[4]*=s;t[8]*=r;t[1]*=n;t[5]*=s;t[9]*=r;t[2]*=n;t[6]*=s;t[10]*=r;t[3]*=n;t[7]*=s;t[11]*=r;return this}getMaxScaleOnAxis(){const e=this.elements;const t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];const n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6];const s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,s))}makeTranslation(e,t,n){if(e.isVector3){this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1)}else{this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1)}return this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1);return this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1);return this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(e,t){const n=Math.cos(t);const s=Math.sin(t);const r=1-n;const o=e.x,a=e.y,l=e.z;const c=r*o,h=r*a;this.set(c*o+n,c*a-s*l,c*l+s*a,0,c*a+s*l,h*a+n,h*l-s*o,0,c*l-s*a,h*l+s*o,r*l*l+n,0,0,0,0,1);return this}makeScale(e,t,n){this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1);return this}makeShear(e,t,n,s,r,o){this.set(1,n,r,0,e,1,o,0,t,s,1,0,0,0,0,1);return this}compose(e,t,n){const s=this.elements;const r=t._x,o=t._y,a=t._z,l=t._w;const c=r+r,h=o+o,u=a+a;const f=r*c,m=r*h,g=r*u;const S=o*h,p=o*u,d=a*u;const T=l*c,x=l*h,y=l*u;const L=n.x,w=n.y,A=n.z;s[0]=(1-(S+d))*L;s[1]=(m+y)*L;s[2]=(g-x)*L;s[3]=0;s[4]=(m-y)*w;s[5]=(1-(f+d))*w;s[6]=(p+T)*w;s[7]=0;s[8]=(g+x)*A;s[9]=(p-T)*A;s[10]=(1-(f+S))*A;s[11]=0;s[12]=e.x;s[13]=e.y;s[14]=e.z;s[15]=1;return this}decompose(e,t,n){const s=this.elements;let r=Si.set(s[0],s[1],s[2]).length();const o=Si.set(s[4],s[5],s[6]).length();const a=Si.set(s[8],s[9],s[10]).length();const l=this.determinant();if(l<0)r=-r;e.x=s[12];e.y=s[13];e.z=s[14];Yt.copy(this);const c=1/r;const h=1/o;const u=1/a;Yt.elements[0]*=c;Yt.elements[1]*=c;Yt.elements[2]*=c;Yt.elements[4]*=h;Yt.elements[5]*=h;Yt.elements[6]*=h;Yt.elements[8]*=u;Yt.elements[9]*=u;Yt.elements[10]*=u;t.setFromRotationMatrix(Yt);n.x=r;n.y=o;n.z=a;return this}makePerspective(e,t,n,s,r,o,a=En){const l=this.elements;const c=2*r/(t-e);const h=2*r/(n-s);const u=(t+e)/(t-e);const f=(n+s)/(n-s);let m,g;if(a===En){m=-(o+r)/(o-r);g=-2*o*r/(o-r)}else if(a===Pr){m=-o/(o-r);g=-o*r/(o-r)}else{throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a)}l[0]=c;l[4]=0;l[8]=u;l[12]=0;l[1]=0;l[5]=h;l[9]=f;l[13]=0;l[2]=0;l[6]=0;l[10]=m;l[14]=g;l[3]=0;l[7]=0;l[11]=-1;l[15]=0;return this}makeOrthographic(e,t,n,s,r,o,a=En){const l=this.elements;const c=1/(t-e);const h=1/(n-s);const u=1/(o-r);const f=(t+e)*c;const m=(n+s)*h;let g,S;if(a===En){g=(o+r)*u;S=-2*u}else if(a===Pr){g=r*u;S=-1*u}else{throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a)}l[0]=2*c;l[4]=0;l[8]=0;l[12]=-f;l[1]=0;l[5]=2*h;l[9]=0;l[13]=-m;l[2]=0;l[6]=0;l[10]=S;l[14]=-g;l[3]=0;l[7]=0;l[11]=0;l[15]=1;return this}equals(e){const t=this.elements;const n=e.elements;for(let s=0;s<16;s++){if(t[s]!==n[s])return false}return true}fromArray(e,t=0){for(let n=0;n<16;n++){this.elements[n]=e[n+t]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];e[t+9]=n[9];e[t+10]=n[10];e[t+11]=n[11];e[t+12]=n[12];e[t+13]=n[13];e[t+14]=n[14];e[t+15]=n[15];return e}}const Si=new P;const Yt=new rt;const wd=new P(0,0,0);const Cd=new P(1,1,1);const Cn=new P;const Qs=new P;const Ut=new P;const wl=new rt;const Cl=new Gs;class an{constructor(e=0,t=0,n=0,s=an.DEFAULT_ORDER){this.isEuler=true;this._x=e;this._y=t;this._z=n;this._order=s}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e;this._onChangeCallback()}set(e,t,n,s=this._order){this._x=e;this._y=t;this._z=n;this._order=s;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){this._x=e._x;this._y=e._y;this._z=e._z;this._order=e._order;this._onChangeCallback();return this}setFromRotationMatrix(e,t=this._order,n=true){const s=e.elements;const r=s[0],o=s[4],a=s[8];const l=s[1],c=s[5],h=s[9];const u=s[2],f=s[6],m=s[10];switch(t){case"XYZ":this._y=Math.asin(St(a,-1,1));if(Math.abs(a)<.9999999){this._x=Math.atan2(-h,m);this._z=Math.atan2(-o,r)}else{this._x=Math.atan2(f,c);this._z=0}break;case"YXZ":this._x=Math.asin(-St(h,-1,1));if(Math.abs(h)<.9999999){this._y=Math.atan2(a,m);this._z=Math.atan2(l,c)}else{this._y=Math.atan2(-u,r);this._z=0}break;case"ZXY":this._x=Math.asin(St(f,-1,1));if(Math.abs(f)<.9999999){this._y=Math.atan2(-u,m);this._z=Math.atan2(-o,c)}else{this._y=0;this._z=Math.atan2(l,r)}break;case"ZYX":this._y=Math.asin(-St(u,-1,1));if(Math.abs(u)<.9999999){this._x=Math.atan2(f,m);this._z=Math.atan2(l,r)}else{this._x=0;this._z=Math.atan2(-o,c)}break;case"YZX":this._z=Math.asin(St(l,-1,1));if(Math.abs(l)<.9999999){this._x=Math.atan2(-h,c);this._y=Math.atan2(-u,r)}else{this._x=0;this._y=Math.atan2(a,m)}break;case"XZY":this._z=Math.asin(-St(o,-1,1));if(Math.abs(o)<.9999999){this._x=Math.atan2(f,c);this._y=Math.atan2(a,r)}else{this._x=Math.atan2(-h,m);this._y=0}break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}this._order=t;if(n===true)this._onChangeCallback();return this}setFromQuaternion(e,t,n){wl.makeRotationFromQuaternion(e);return this.setFromRotationMatrix(wl,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){Cl.setFromEuler(this);return this.setFromQuaternion(Cl,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){this._x=e[0];this._y=e[1];this._z=e[2];if(e[3]!==void 0)this._order=e[3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._order;return e}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._order}}an.DEFAULT_ORDER="XYZ";class ah{constructor(){this.mask=1|0}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let Rd=0;const Rl=new P;const Mi=new Gs;const hn=new rt;const er=new P;const gs=new P;const Ld=new P;const Pd=new Gs;const Ll=new P(1,0,0);const Pl=new P(0,1,0);const Dl=new P(0,0,1);const Dd={type:"added"};const Ud={type:"removed"};const Sa={type:"childadded",child:null};const Ma={type:"childremoved",child:null};class Lt extends as{constructor(){super();this.isObject3D=true;Object.defineProperty(this,"id",{value:Rd++});this.uuid=zs();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=Lt.DEFAULT_UP.clone();const e=new P;const t=new an;const n=new Gs;const s=new P(1,1,1);function r(){n.setFromEuler(t,false)}function o(){t.setFromQuaternion(n,void 0,false)}t._onChange(r);n._onChange(o);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:e},rotation:{configurable:true,enumerable:true,value:t},quaternion:{configurable:true,enumerable:true,value:n},scale:{configurable:true,enumerable:true,value:s},modelViewMatrix:{value:new rt},normalMatrix:{value:new Oe}});this.matrix=new rt;this.matrixWorld=new rt;this.matrixAutoUpdate=Lt.DEFAULT_MATRIX_AUTO_UPDATE;this.matrixWorldAutoUpdate=Lt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;this.matrixWorldNeedsUpdate=false;this.layers=new ah;this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.animations=[];this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(e);this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){this.quaternion.premultiply(e);return this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,true)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){Mi.setFromAxisAngle(e,t);this.quaternion.multiply(Mi);return this}rotateOnWorldAxis(e,t){Mi.setFromAxisAngle(e,t);this.quaternion.premultiply(Mi);return this}rotateX(e){return this.rotateOnAxis(Ll,e)}rotateY(e){return this.rotateOnAxis(Pl,e)}rotateZ(e){return this.rotateOnAxis(Dl,e)}translateOnAxis(e,t){Rl.copy(e).applyQuaternion(this.quaternion);this.position.add(Rl.multiplyScalar(t));return this}translateX(e){return this.translateOnAxis(Ll,e)}translateY(e){return this.translateOnAxis(Pl,e)}translateZ(e){return this.translateOnAxis(Dl,e)}localToWorld(e){this.updateWorldMatrix(true,false);return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){this.updateWorldMatrix(true,false);return e.applyMatrix4(hn.copy(this.matrixWorld).invert())}lookAt(e,t,n){if(e.isVector3){er.copy(e)}else{er.set(e,t,n)}const s=this.parent;this.updateWorldMatrix(true,false);gs.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){hn.lookAt(gs,er,this.up)}else{hn.lookAt(er,gs,this.up)}this.quaternion.setFromRotationMatrix(hn);if(s){hn.extractRotation(s.matrixWorld);Mi.setFromRotationMatrix(hn);this.quaternion.premultiply(Mi.invert())}}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++){this.add(arguments[t])}return this}if(e===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",e);return this}if(e&&e.isObject3D){if(e.parent!==null){e.parent.remove(e)}e.parent=this;this.children.push(e);e.dispatchEvent(Dd);Sa.child=e;this.dispatchEvent(Sa);Sa.child=null}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e)}return this}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++){this.remove(arguments[n])}return this}const t=this.children.indexOf(e);if(t!==-1){e.parent=null;this.children.splice(t,1);e.dispatchEvent(Ud);Ma.child=e;this.dispatchEvent(Ma);Ma.child=null}return this}removeFromParent(){const e=this.parent;if(e!==null){e.remove(this)}return this}clear(){return this.remove(...this.children)}attach(e){this.updateWorldMatrix(true,false);hn.copy(this.matrixWorld).invert();if(e.parent!==null){e.parent.updateWorldMatrix(true,false);hn.multiply(e.parent.matrixWorld)}e.applyMatrix4(hn);this.add(e);e.updateWorldMatrix(false,true);return this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,s=this.children.length;n<s;n++){const r=this.children[n];const o=r.getObjectByProperty(e,t);if(o!==void 0){return o}}return void 0}getObjectsByProperty(e,t,n=[]){if(this[e]===t)n.push(this);const s=this.children;for(let r=0,o=s.length;r<o;r++){s[r].getObjectsByProperty(e,t,n)}return n}getWorldPosition(e){this.updateWorldMatrix(true,false);return e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(gs,e,Ld);return e}getWorldScale(e){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(gs,Pd,e);return e}getWorldDirection(e){this.updateWorldMatrix(true,false);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++){t[n].traverse(e)}}traverseVisible(e){if(this.visible===false)return;e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++){t[n].traverseVisible(e)}}traverseAncestors(e){const t=this.parent;if(t!==null){e(t);t.traverseAncestors(e)}}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true}updateMatrixWorld(e){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||e){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}this.matrixWorldNeedsUpdate=false;e=true}const t=this.children;for(let n=0,s=t.length;n<s;n++){const r=t[n];if(r.matrixWorldAutoUpdate===true||e===true){r.updateMatrixWorld(e)}}}updateWorldMatrix(e,t){const n=this.parent;if(e===true&&n!==null&&n.matrixWorldAutoUpdate===true){n.updateWorldMatrix(true,false)}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}if(t===true){const s=this.children;for(let r=0,o=s.length;r<o;r++){const a=s[r];if(a.matrixWorldAutoUpdate===true){a.updateWorldMatrix(false,true)}}}}toJSON(e){const t=e===void 0||typeof e==="string";const n={};if(t){e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}};n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"}}const s={};s.uuid=this.uuid;s.type=this.type;if(this.name!=="")s.name=this.name;if(this.castShadow===true)s.castShadow=true;if(this.receiveShadow===true)s.receiveShadow=true;if(this.visible===false)s.visible=false;if(this.frustumCulled===false)s.frustumCulled=false;if(this.renderOrder!==0)s.renderOrder=this.renderOrder;if(Object.keys(this.userData).length>0)s.userData=this.userData;s.layers=this.layers.mask;s.matrix=this.matrix.toArray();s.up=this.up.toArray();if(this.matrixAutoUpdate===false)s.matrixAutoUpdate=false;if(this.isInstancedMesh){s.type="InstancedMesh";s.count=this.count;s.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)s.instanceColor=this.instanceColor.toJSON()}if(this.isBatchedMesh){s.type="BatchedMesh";s.perObjectFrustumCulled=this.perObjectFrustumCulled;s.sortObjects=this.sortObjects;s.drawRanges=this._drawRanges;s.reservedRanges=this._reservedRanges;s.visibility=this._visibility;s.active=this._active;s.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()}));s.maxGeometryCount=this._maxGeometryCount;s.maxVertexCount=this._maxVertexCount;s.maxIndexCount=this._maxIndexCount;s.geometryInitialized=this._geometryInitialized;s.geometryCount=this._geometryCount;s.matricesTexture=this._matricesTexture.toJSON(e);if(this.boundingSphere!==null){s.boundingSphere={center:s.boundingSphere.center.toArray(),radius:s.boundingSphere.radius}}if(this.boundingBox!==null){s.boundingBox={min:s.boundingBox.min.toArray(),max:s.boundingBox.max.toArray()}}}function r(a,l){if(a[l.uuid]===void 0){a[l.uuid]=l.toJSON(e)}return l.uuid}if(this.isScene){if(this.background){if(this.background.isColor){s.background=this.background.toJSON()}else if(this.background.isTexture){s.background=this.background.toJSON(e).uuid}}if(this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==true){s.environment=this.environment.toJSON(e).uuid}}else if(this.isMesh||this.isLine||this.isPoints){s.geometry=r(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l)){for(let c=0,h=l.length;c<h;c++){const u=l[c];r(e.shapes,u)}}else{r(e.shapes,l)}}}if(this.isSkinnedMesh){s.bindMode=this.bindMode;s.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==void 0){r(e.skeletons,this.skeleton);s.skeleton=this.skeleton.uuid}}if(this.material!==void 0){if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++){a.push(r(e.materials,this.material[l]))}s.material=a}else{s.material=r(e.materials,this.material)}}if(this.children.length>0){s.children=[];for(let a=0;a<this.children.length;a++){s.children.push(this.children[a].toJSON(e).object)}}if(this.animations.length>0){s.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];s.animations.push(r(e.animations,l))}}if(t){const a=o(e.geometries);const l=o(e.materials);const c=o(e.textures);const h=o(e.images);const u=o(e.shapes);const f=o(e.skeletons);const m=o(e.animations);const g=o(e.nodes);if(a.length>0)n.geometries=a;if(l.length>0)n.materials=l;if(c.length>0)n.textures=c;if(h.length>0)n.images=h;if(u.length>0)n.shapes=u;if(f.length>0)n.skeletons=f;if(m.length>0)n.animations=m;if(g.length>0)n.nodes=g}n.object=s;return n;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata;l.push(h)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=true){this.name=e.name;this.up.copy(e.up);this.position.copy(e.position);this.rotation.order=e.rotation.order;this.quaternion.copy(e.quaternion);this.scale.copy(e.scale);this.matrix.copy(e.matrix);this.matrixWorld.copy(e.matrixWorld);this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate;this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate;this.layers.mask=e.layers.mask;this.visible=e.visible;this.castShadow=e.castShadow;this.receiveShadow=e.receiveShadow;this.frustumCulled=e.frustumCulled;this.renderOrder=e.renderOrder;this.animations=e.animations.slice();this.userData=JSON.parse(JSON.stringify(e.userData));if(t===true){for(let n=0;n<e.children.length;n++){const s=e.children[n];this.add(s.clone())}}return this}}Lt.DEFAULT_UP=new P(0,1,0);Lt.DEFAULT_MATRIX_AUTO_UPDATE=true;Lt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=true;const jt=new P;const un=new P;const Ea=new P;const dn=new P;const Ei=new P;const yi=new P;const Ul=new P;const ya=new P;const Ta=new P;const ba=new P;class nn{constructor(e=new P,t=new P,n=new P){this.a=e;this.b=t;this.c=n}static getNormal(e,t,n,s){s.subVectors(n,t);jt.subVectors(e,t);s.cross(jt);const r=s.lengthSq();if(r>0){return s.multiplyScalar(1/Math.sqrt(r))}return s.set(0,0,0)}static getBarycoord(e,t,n,s,r){jt.subVectors(s,t);un.subVectors(n,t);Ea.subVectors(e,t);const o=jt.dot(jt);const a=jt.dot(un);const l=jt.dot(Ea);const c=un.dot(un);const h=un.dot(Ea);const u=o*c-a*a;if(u===0){r.set(0,0,0);return null}const f=1/u;const m=(c*l-a*h)*f;const g=(o*h-a*l)*f;return r.set(1-m-g,g,m)}static containsPoint(e,t,n,s){if(this.getBarycoord(e,t,n,s,dn)===null){return false}return dn.x>=0&&dn.y>=0&&dn.x+dn.y<=1}static getInterpolation(e,t,n,s,r,o,a,l){if(this.getBarycoord(e,t,n,s,dn)===null){l.x=0;l.y=0;if("z"in l)l.z=0;if("w"in l)l.w=0;return null}l.setScalar(0);l.addScaledVector(r,dn.x);l.addScaledVector(o,dn.y);l.addScaledVector(a,dn.z);return l}static isFrontFacing(e,t,n,s){jt.subVectors(n,t);un.subVectors(e,t);return jt.cross(un).dot(s)<0?true:false}set(e,t,n){this.a.copy(e);this.b.copy(t);this.c.copy(n);return this}setFromPointsAndIndices(e,t,n,s){this.a.copy(e[t]);this.b.copy(e[n]);this.c.copy(e[s]);return this}setFromAttributeAndIndices(e,t,n,s){this.a.fromBufferAttribute(e,t);this.b.fromBufferAttribute(e,n);this.c.fromBufferAttribute(e,s);return this}clone(){return new this.constructor().copy(this)}copy(e){this.a.copy(e.a);this.b.copy(e.b);this.c.copy(e.c);return this}getArea(){jt.subVectors(this.c,this.b);un.subVectors(this.a,this.b);return jt.cross(un).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return nn.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return nn.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,s,r){return nn.getInterpolation(e,this.a,this.b,this.c,t,n,s,r)}containsPoint(e){return nn.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return nn.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,s=this.b,r=this.c;let o,a;Ei.subVectors(s,n);yi.subVectors(r,n);ya.subVectors(e,n);const l=Ei.dot(ya);const c=yi.dot(ya);if(l<=0&&c<=0){return t.copy(n)}Ta.subVectors(e,s);const h=Ei.dot(Ta);const u=yi.dot(Ta);if(h>=0&&u<=h){return t.copy(s)}const f=l*u-h*c;if(f<=0&&l>=0&&h<=0){o=l/(l-h);return t.copy(n).addScaledVector(Ei,o)}ba.subVectors(e,r);const m=Ei.dot(ba);const g=yi.dot(ba);if(g>=0&&m<=g){return t.copy(r)}const S=m*c-l*g;if(S<=0&&c>=0&&g<=0){a=c/(c-g);return t.copy(n).addScaledVector(yi,a)}const p=h*g-m*u;if(p<=0&&u-h>=0&&m-g>=0){Ul.subVectors(r,s);a=(u-h)/(u-h+(m-g));return t.copy(s).addScaledVector(Ul,a)}const d=1/(p+S+f);o=S*d;a=f*d;return t.copy(n).addScaledVector(Ei,o).addScaledVector(yi,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const oh={"aliceblue":15792383,"antiquewhite":16444375,"aqua":65535,"aquamarine":8388564,"azure":15794175,"beige":16119260,"bisque":16770244,"black":0,"blanchedalmond":16772045,"blue":255,"blueviolet":9055202,"brown":10824234,"burlywood":14596231,"cadetblue":6266528,"chartreuse":8388352,"chocolate":13789470,"coral":16744272,"cornflowerblue":6591981,"cornsilk":16775388,"crimson":14423100,"cyan":65535,"darkblue":139,"darkcyan":35723,"darkgoldenrod":12092939,"darkgray":11119017,"darkgreen":25600,"darkgrey":11119017,"darkkhaki":12433259,"darkmagenta":9109643,"darkolivegreen":5597999,"darkorange":16747520,"darkorchid":10040012,"darkred":9109504,"darksalmon":15308410,"darkseagreen":9419919,"darkslateblue":4734347,"darkslategray":3100495,"darkslategrey":3100495,"darkturquoise":52945,"darkviolet":9699539,"deeppink":16716947,"deepskyblue":49151,"dimgray":6908265,"dimgrey":6908265,"dodgerblue":2003199,"firebrick":11674146,"floralwhite":16775920,"forestgreen":2263842,"fuchsia":16711935,"gainsboro":14474460,"ghostwhite":16316671,"gold":16766720,"goldenrod":14329120,"gray":8421504,"green":32768,"greenyellow":11403055,"grey":8421504,"honeydew":15794160,"hotpink":16738740,"indianred":13458524,"indigo":4915330,"ivory":16777200,"khaki":15787660,"lavender":15132410,"lavenderblush":16773365,"lawngreen":8190976,"lemonchiffon":16775885,"lightblue":11393254,"lightcoral":15761536,"lightcyan":14745599,"lightgoldenrodyellow":16448210,"lightgray":13882323,"lightgreen":9498256,"lightgrey":13882323,"lightpink":16758465,"lightsalmon":16752762,"lightseagreen":2142890,"lightskyblue":8900346,"lightslategray":7833753,"lightslategrey":7833753,"lightsteelblue":11584734,"lightyellow":16777184,"lime":65280,"limegreen":3329330,"linen":16445670,"magenta":16711935,"maroon":8388608,"mediumaquamarine":6737322,"mediumblue":205,"mediumorchid":12211667,"mediumpurple":9662683,"mediumseagreen":3978097,"mediumslateblue":8087790,"mediumspringgreen":64154,"mediumturquoise":4772300,"mediumvioletred":13047173,"midnightblue":1644912,"mintcream":16121850,"mistyrose":16770273,"moccasin":16770229,"navajowhite":16768685,"navy":128,"oldlace":16643558,"olive":8421376,"olivedrab":7048739,"orange":16753920,"orangered":16729344,"orchid":14315734,"palegoldenrod":15657130,"palegreen":10025880,"paleturquoise":11529966,"palevioletred":14381203,"papayawhip":16773077,"peachpuff":16767673,"peru":13468991,"pink":16761035,"plum":14524637,"powderblue":11591910,"purple":8388736,"rebeccapurple":6697881,"red":16711680,"rosybrown":12357519,"royalblue":4286945,"saddlebrown":9127187,"salmon":16416882,"sandybrown":16032864,"seagreen":3050327,"seashell":16774638,"sienna":10506797,"silver":12632256,"skyblue":8900331,"slateblue":6970061,"slategray":7372944,"slategrey":7372944,"snow":16775930,"springgreen":65407,"steelblue":4620980,"tan":13808780,"teal":32896,"thistle":14204888,"tomato":16737095,"turquoise":4251856,"violet":15631086,"wheat":16113331,"white":16777215,"whitesmoke":16119285,"yellow":16776960,"yellowgreen":10145074};const Rn={h:0,s:0,l:0};const tr={h:0,s:0,l:0};function Aa(i,e,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return i+(e-i)*6*t;if(t<1/2)return e;if(t<2/3)return i+(e-i)*6*(2/3-t);return i}class We{constructor(e,t,n){this.isColor=true;this.r=1;this.g=1;this.b=1;return this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const s=e;if(s&&s.isColor){this.copy(s)}else if(typeof s==="number"){this.setHex(s)}else if(typeof s==="string"){this.setStyle(s)}}else{this.setRGB(e,t,n)}return this}setScalar(e){this.r=e;this.g=e;this.b=e;return this}setHex(e,t=Qt){e=Math.floor(e);this.r=(e>>16&255)/255;this.g=(e>>8&255)/255;this.b=(e&255)/255;$e.toWorkingColorSpace(this,t);return this}setRGB(e,t,n,s=$e.workingColorSpace){this.r=e;this.g=t;this.b=n;$e.toWorkingColorSpace(this,s);return this}setHSL(e,t,n,s=$e.workingColorSpace){e=vd(e,1);t=St(t,0,1);n=St(n,0,1);if(t===0){this.r=this.g=this.b=n}else{const r=n<=.5?n*(1+t):n+t-n*t;const o=2*n-r;this.r=Aa(o,r,e+1/3);this.g=Aa(o,r,e);this.b=Aa(o,r,e-1/3)}$e.toWorkingColorSpace(this,s);return this}setStyle(e,t=Qt){function n(r){if(r===void 0)return;if(parseFloat(r)<1){console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;const o=s[1];const a=s[2];switch(o){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(r[4]);return this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t)}if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(r[4]);return this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t)}break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(r[4]);return this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t)}break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(e)){const r=s[1];const o=r.length;if(o===3){return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,t)}else if(o===6){return this.setHex(parseInt(r,16),t)}else{console.warn("THREE.Color: Invalid hex color "+e)}}else if(e&&e.length>0){return this.setColorName(e,t)}return this}setColorName(e,t=Qt){const n=oh[e.toLowerCase()];if(n!==void 0){this.setHex(n,t)}else{console.warn("THREE.Color: Unknown color "+e)}return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){this.r=e.r;this.g=e.g;this.b=e.b;return this}copySRGBToLinear(e){this.r=Bi(e.r);this.g=Bi(e.g);this.b=Bi(e.b);return this}copyLinearToSRGB(e){this.r=da(e.r);this.g=da(e.g);this.b=da(e.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(e=Qt){$e.fromWorkingColorSpace(xt.copy(this),e);return Math.round(St(xt.r*255,0,255))*65536+Math.round(St(xt.g*255,0,255))*256+Math.round(St(xt.b*255,0,255))}getHexString(e=Qt){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=$e.workingColorSpace){$e.fromWorkingColorSpace(xt.copy(this),t);const n=xt.r,s=xt.g,r=xt.b;const o=Math.max(n,s,r);const a=Math.min(n,s,r);let l,c;const h=(a+o)/2;if(a===o){l=0;c=0}else{const u=o-a;c=h<=.5?u/(o+a):u/(2-o-a);switch(o){case n:l=(s-r)/u+(s<r?6:0);break;case s:l=(r-n)/u+2;break;case r:l=(n-s)/u+4;break}l/=6}e.h=l;e.s=c;e.l=h;return e}getRGB(e,t=$e.workingColorSpace){$e.fromWorkingColorSpace(xt.copy(this),t);e.r=xt.r;e.g=xt.g;e.b=xt.b;return e}getStyle(e=Qt){$e.fromWorkingColorSpace(xt.copy(this),e);const t=xt.r,n=xt.g,s=xt.b;if(e!==Qt){return`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})`}return`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(s*255)})`}offsetHSL(e,t,n){this.getHSL(Rn);return this.setHSL(Rn.h+e,Rn.s+t,Rn.l+n)}add(e){this.r+=e.r;this.g+=e.g;this.b+=e.b;return this}addColors(e,t){this.r=e.r+t.r;this.g=e.g+t.g;this.b=e.b+t.b;return this}addScalar(e){this.r+=e;this.g+=e;this.b+=e;return this}sub(e){this.r=Math.max(0,this.r-e.r);this.g=Math.max(0,this.g-e.g);this.b=Math.max(0,this.b-e.b);return this}multiply(e){this.r*=e.r;this.g*=e.g;this.b*=e.b;return this}multiplyScalar(e){this.r*=e;this.g*=e;this.b*=e;return this}lerp(e,t){this.r+=(e.r-this.r)*t;this.g+=(e.g-this.g)*t;this.b+=(e.b-this.b)*t;return this}lerpColors(e,t,n){this.r=e.r+(t.r-e.r)*n;this.g=e.g+(t.g-e.g)*n;this.b=e.b+(t.b-e.b)*n;return this}lerpHSL(e,t){this.getHSL(Rn);e.getHSL(tr);const n=ha(Rn.h,tr.h,t);const s=ha(Rn.s,tr.s,t);const r=ha(Rn.l,tr.l,t);this.setHSL(n,s,r);return this}setFromVector3(e){this.r=e.x;this.g=e.y;this.b=e.z;return this}applyMatrix3(e){const t=this.r,n=this.g,s=this.b;const r=e.elements;this.r=r[0]*t+r[3]*n+r[6]*s;this.g=r[1]*t+r[4]*n+r[7]*s;this.b=r[2]*t+r[5]*n+r[8]*s;return this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){this.r=e[t];this.g=e[t+1];this.b=e[t+2];return this}toArray(e=[],t=0){e[t]=this.r;e[t+1]=this.g;e[t+2]=this.b;return e}fromBufferAttribute(e,t){this.r=e.getX(t);this.g=e.getY(t);this.b=e.getZ(t);return this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r;yield this.g;yield this.b}}const xt=new We;We.NAMES=oh;let Id=0;class os extends as{constructor(){super();this.isMaterial=true;Object.defineProperty(this,"id",{value:Id++});this.uuid=zs();this.name="";this.type="Material";this.blending=Oi;this.side=Hn;this.vertexColors=false;this.opacity=1;this.transparent=false;this.alphaHash=false;this.blendSrc=qa;this.blendDst=Ya;this.blendEquation=ii;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.blendColor=new We(0,0,0);this.blendAlpha=0;this.depthFunc=wr;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=255;this.stencilFunc=xl;this.stencilRef=0;this.stencilFuncMask=255;this.stencilFail=mi;this.stencilZFail=mi;this.stencilZPass=mi;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaToCoverage=false;this.premultipliedAlpha=false;this.forceSinglePass=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){if(this._alphaTest>0!==e>0){this.version++}this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e===void 0)return;for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}if(s&&s.isColor){s.set(n)}else if(s&&s.isVector3&&(n&&n.isVector3)){s.copy(n)}else{this[t]=n}}}toJSON(e){const t=e===void 0||typeof e==="string";if(t){e={textures:{},images:{}}}const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(this.color&&this.color.isColor)n.color=this.color.getHex();if(this.roughness!==void 0)n.roughness=this.roughness;if(this.metalness!==void 0)n.metalness=this.metalness;if(this.sheen!==void 0)n.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)n.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==void 0)n.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)n.emissive=this.emissive.getHex();if(this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1)n.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)n.specular=this.specular.getHex();if(this.specularIntensity!==void 0)n.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)n.specularColor=this.specularColor.getHex();if(this.shininess!==void 0)n.shininess=this.shininess;if(this.clearcoat!==void 0)n.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==void 0)n.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid;n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()}if(this.iridescence!==void 0)n.iridescence=this.iridescence;if(this.iridescenceIOR!==void 0)n.iridescenceIOR=this.iridescenceIOR;if(this.iridescenceThicknessRange!==void 0)n.iridescenceThicknessRange=this.iridescenceThicknessRange;if(this.iridescenceMap&&this.iridescenceMap.isTexture){n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid}if(this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture){n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid}if(this.anisotropy!==void 0)n.anisotropy=this.anisotropy;if(this.anisotropyRotation!==void 0)n.anisotropyRotation=this.anisotropyRotation;if(this.anisotropyMap&&this.anisotropyMap.isTexture){n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid}if(this.map&&this.map.isTexture)n.map=this.map.toJSON(e).uuid;if(this.matcap&&this.matcap.isTexture)n.matcap=this.matcap.toJSON(e).uuid;if(this.alphaMap&&this.alphaMap.isTexture)n.alphaMap=this.alphaMap.toJSON(e).uuid;if(this.lightMap&&this.lightMap.isTexture){n.lightMap=this.lightMap.toJSON(e).uuid;n.lightMapIntensity=this.lightMapIntensity}if(this.aoMap&&this.aoMap.isTexture){n.aoMap=this.aoMap.toJSON(e).uuid;n.aoMapIntensity=this.aoMapIntensity}if(this.bumpMap&&this.bumpMap.isTexture){n.bumpMap=this.bumpMap.toJSON(e).uuid;n.bumpScale=this.bumpScale}if(this.normalMap&&this.normalMap.isTexture){n.normalMap=this.normalMap.toJSON(e).uuid;n.normalMapType=this.normalMapType;n.normalScale=this.normalScale.toArray()}if(this.displacementMap&&this.displacementMap.isTexture){n.displacementMap=this.displacementMap.toJSON(e).uuid;n.displacementScale=this.displacementScale;n.displacementBias=this.displacementBias}if(this.roughnessMap&&this.roughnessMap.isTexture)n.roughnessMap=this.roughnessMap.toJSON(e).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)n.metalnessMap=this.metalnessMap.toJSON(e).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)n.emissiveMap=this.emissiveMap.toJSON(e).uuid;if(this.specularMap&&this.specularMap.isTexture)n.specularMap=this.specularMap.toJSON(e).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)n.specularColorMap=this.specularColorMap.toJSON(e).uuid;if(this.envMap&&this.envMap.isTexture){n.envMap=this.envMap.toJSON(e).uuid;if(this.combine!==void 0)n.combine=this.combine}if(this.envMapRotation!==void 0)n.envMapRotation=this.envMapRotation.toArray();if(this.envMapIntensity!==void 0)n.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==void 0)n.reflectivity=this.reflectivity;if(this.refractionRatio!==void 0)n.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){n.gradientMap=this.gradientMap.toJSON(e).uuid}if(this.transmission!==void 0)n.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)n.transmissionMap=this.transmissionMap.toJSON(e).uuid;if(this.thickness!==void 0)n.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)n.thicknessMap=this.thicknessMap.toJSON(e).uuid;if(this.attenuationDistance!==void 0&&this.attenuationDistance!==Infinity)n.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==void 0)n.attenuationColor=this.attenuationColor.getHex();if(this.size!==void 0)n.size=this.size;if(this.shadowSide!==null)n.shadowSide=this.shadowSide;if(this.sizeAttenuation!==void 0)n.sizeAttenuation=this.sizeAttenuation;if(this.blending!==Oi)n.blending=this.blending;if(this.side!==Hn)n.side=this.side;if(this.vertexColors===true)n.vertexColors=true;if(this.opacity<1)n.opacity=this.opacity;if(this.transparent===true)n.transparent=true;if(this.blendSrc!==qa)n.blendSrc=this.blendSrc;if(this.blendDst!==Ya)n.blendDst=this.blendDst;if(this.blendEquation!==ii)n.blendEquation=this.blendEquation;if(this.blendSrcAlpha!==null)n.blendSrcAlpha=this.blendSrcAlpha;if(this.blendDstAlpha!==null)n.blendDstAlpha=this.blendDstAlpha;if(this.blendEquationAlpha!==null)n.blendEquationAlpha=this.blendEquationAlpha;if(this.blendColor&&this.blendColor.isColor)n.blendColor=this.blendColor.getHex();if(this.blendAlpha!==0)n.blendAlpha=this.blendAlpha;if(this.depthFunc!==wr)n.depthFunc=this.depthFunc;if(this.depthTest===false)n.depthTest=this.depthTest;if(this.depthWrite===false)n.depthWrite=this.depthWrite;if(this.colorWrite===false)n.colorWrite=this.colorWrite;if(this.stencilWriteMask!==255)n.stencilWriteMask=this.stencilWriteMask;if(this.stencilFunc!==xl)n.stencilFunc=this.stencilFunc;if(this.stencilRef!==0)n.stencilRef=this.stencilRef;if(this.stencilFuncMask!==255)n.stencilFuncMask=this.stencilFuncMask;if(this.stencilFail!==mi)n.stencilFail=this.stencilFail;if(this.stencilZFail!==mi)n.stencilZFail=this.stencilZFail;if(this.stencilZPass!==mi)n.stencilZPass=this.stencilZPass;if(this.stencilWrite===true)n.stencilWrite=this.stencilWrite;if(this.rotation!==void 0&&this.rotation!==0)n.rotation=this.rotation;if(this.polygonOffset===true)n.polygonOffset=true;if(this.polygonOffsetFactor!==0)n.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)n.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==void 0&&this.linewidth!==1)n.linewidth=this.linewidth;if(this.dashSize!==void 0)n.dashSize=this.dashSize;if(this.gapSize!==void 0)n.gapSize=this.gapSize;if(this.scale!==void 0)n.scale=this.scale;if(this.dithering===true)n.dithering=true;if(this.alphaTest>0)n.alphaTest=this.alphaTest;if(this.alphaHash===true)n.alphaHash=true;if(this.alphaToCoverage===true)n.alphaToCoverage=true;if(this.premultipliedAlpha===true)n.premultipliedAlpha=true;if(this.forceSinglePass===true)n.forceSinglePass=true;if(this.wireframe===true)n.wireframe=true;if(this.wireframeLinewidth>1)n.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")n.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")n.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)n.flatShading=true;if(this.visible===false)n.visible=false;if(this.toneMapped===false)n.toneMapped=false;if(this.fog===false)n.fog=false;if(Object.keys(this.userData).length>0)n.userData=this.userData;function s(r){const o=[];for(const a in r){const l=r[a];delete l.metadata;o.push(l)}return o}if(t){const r=s(e.textures);const o=s(e.images);if(r.length>0)n.textures=r;if(o.length>0)n.images=o}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name;this.blending=e.blending;this.side=e.side;this.vertexColors=e.vertexColors;this.opacity=e.opacity;this.transparent=e.transparent;this.blendSrc=e.blendSrc;this.blendDst=e.blendDst;this.blendEquation=e.blendEquation;this.blendSrcAlpha=e.blendSrcAlpha;this.blendDstAlpha=e.blendDstAlpha;this.blendEquationAlpha=e.blendEquationAlpha;this.blendColor.copy(e.blendColor);this.blendAlpha=e.blendAlpha;this.depthFunc=e.depthFunc;this.depthTest=e.depthTest;this.depthWrite=e.depthWrite;this.stencilWriteMask=e.stencilWriteMask;this.stencilFunc=e.stencilFunc;this.stencilRef=e.stencilRef;this.stencilFuncMask=e.stencilFuncMask;this.stencilFail=e.stencilFail;this.stencilZFail=e.stencilZFail;this.stencilZPass=e.stencilZPass;this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const s=t.length;n=new Array(s);for(let r=0;r!==s;++r){n[r]=t[r].clone()}}this.clippingPlanes=n;this.clipIntersection=e.clipIntersection;this.clipShadows=e.clipShadows;this.shadowSide=e.shadowSide;this.colorWrite=e.colorWrite;this.precision=e.precision;this.polygonOffset=e.polygonOffset;this.polygonOffsetFactor=e.polygonOffsetFactor;this.polygonOffsetUnits=e.polygonOffsetUnits;this.dithering=e.dithering;this.alphaTest=e.alphaTest;this.alphaHash=e.alphaHash;this.alphaToCoverage=e.alphaToCoverage;this.premultipliedAlpha=e.premultipliedAlpha;this.forceSinglePass=e.forceSinglePass;this.visible=e.visible;this.toneMapped=e.toneMapped;this.userData=JSON.parse(JSON.stringify(e.userData));return this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){if(e===true)this.version++}}class xo extends os{constructor(e){super();this.isMeshBasicMaterial=true;this.type="MeshBasicMaterial";this.color=new We(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new an;this.combine=go;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapRotation.copy(e.envMapRotation);this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.fog=e.fog;return this}}const ot=new P;const nr=new Be;class sn{constructor(e,t,n=false){if(Array.isArray(e)){throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")}this.isBufferAttribute=true;this.name="";this.array=e;this.itemSize=t;this.count=e!==void 0?e.length/t:0;this.normalized=n;this.usage=Sl;this._updateRange={offset:0,count:-1};this.updateRanges=[];this.gpuType=Mn;this.version=0}onUploadCallback(){}set needsUpdate(e){if(e===true)this.version++}get updateRange(){Sd("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");return this._updateRange}setUsage(e){this.usage=e;return this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){this.name=e.name;this.array=new e.array.constructor(e.array);this.itemSize=e.itemSize;this.count=e.count;this.normalized=e.normalized;this.usage=e.usage;this.gpuType=e.gpuType;return this}copyAt(e,t,n){e*=this.itemSize;n*=t.itemSize;for(let s=0,r=this.itemSize;s<r;s++){this.array[e+s]=t.array[n+s]}return this}copyArray(e){this.array.set(e);return this}applyMatrix3(e){if(this.itemSize===2){for(let t=0,n=this.count;t<n;t++){nr.fromBufferAttribute(this,t);nr.applyMatrix3(e);this.setXY(t,nr.x,nr.y)}}else if(this.itemSize===3){for(let t=0,n=this.count;t<n;t++){ot.fromBufferAttribute(this,t);ot.applyMatrix3(e);this.setXYZ(t,ot.x,ot.y,ot.z)}}return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++){ot.fromBufferAttribute(this,t);ot.applyMatrix4(e);this.setXYZ(t,ot.x,ot.y,ot.z)}return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++){ot.fromBufferAttribute(this,t);ot.applyNormalMatrix(e);this.setXYZ(t,ot.x,ot.y,ot.z)}return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++){ot.fromBufferAttribute(this,t);ot.transformDirection(e);this.setXYZ(t,ot.x,ot.y,ot.z)}return this}set(e,t=0){this.array.set(e,t);return this}getComponent(e,t){let n=this.array[e*this.itemSize+t];if(this.normalized)n=fs(n,this.array);return n}setComponent(e,t,n){if(this.normalized)n=bt(n,this.array);this.array[e*this.itemSize+t]=n;return this}getX(e){let t=this.array[e*this.itemSize];if(this.normalized)t=fs(t,this.array);return t}setX(e,t){if(this.normalized)t=bt(t,this.array);this.array[e*this.itemSize]=t;return this}getY(e){let t=this.array[e*this.itemSize+1];if(this.normalized)t=fs(t,this.array);return t}setY(e,t){if(this.normalized)t=bt(t,this.array);this.array[e*this.itemSize+1]=t;return this}getZ(e){let t=this.array[e*this.itemSize+2];if(this.normalized)t=fs(t,this.array);return t}setZ(e,t){if(this.normalized)t=bt(t,this.array);this.array[e*this.itemSize+2]=t;return this}getW(e){let t=this.array[e*this.itemSize+3];if(this.normalized)t=fs(t,this.array);return t}setW(e,t){if(this.normalized)t=bt(t,this.array);this.array[e*this.itemSize+3]=t;return this}setXY(e,t,n){e*=this.itemSize;if(this.normalized){t=bt(t,this.array);n=bt(n,this.array)}this.array[e+0]=t;this.array[e+1]=n;return this}setXYZ(e,t,n,s){e*=this.itemSize;if(this.normalized){t=bt(t,this.array);n=bt(n,this.array);s=bt(s,this.array)}this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=s;return this}setXYZW(e,t,n,s,r){e*=this.itemSize;if(this.normalized){t=bt(t,this.array);n=bt(n,this.array);s=bt(s,this.array);r=bt(r,this.array)}this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=s;this.array[e+3]=r;return this}onUpload(e){this.onUploadCallback=e;return this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};if(this.name!=="")e.name=this.name;if(this.usage!==Sl)e.usage=this.usage;return e}}class lh extends sn{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class ch extends sn{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class ft extends sn{constructor(e,t,n){super(new Float32Array(e),t,n)}}let Nd=0;const zt=new rt;const wa=new Lt;const Ti=new P;const It=new Hs;const _s=new Hs;const dt=new P;class Pt extends as{constructor(){super();this.isBufferGeometry=true;Object.defineProperty(this,"id",{value:Nd++});this.uuid=zs();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={}}getIndex(){return this.index}setIndex(e){if(Array.isArray(e)){this.index=new(th(e)?ch:lh)(e,1)}else{this.index=e}return this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){this.attributes[e]=t;return this}deleteAttribute(e){delete this.attributes[e];return this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e;this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;if(t!==void 0){t.applyMatrix4(e);t.needsUpdate=true}const n=this.attributes.normal;if(n!==void 0){const r=new Oe().getNormalMatrix(e);n.applyNormalMatrix(r);n.needsUpdate=true}const s=this.attributes.tangent;if(s!==void 0){s.transformDirection(e);s.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this}applyQuaternion(e){zt.makeRotationFromQuaternion(e);this.applyMatrix4(zt);return this}rotateX(e){zt.makeRotationX(e);this.applyMatrix4(zt);return this}rotateY(e){zt.makeRotationY(e);this.applyMatrix4(zt);return this}rotateZ(e){zt.makeRotationZ(e);this.applyMatrix4(zt);return this}translate(e,t,n){zt.makeTranslation(e,t,n);this.applyMatrix4(zt);return this}scale(e,t,n){zt.makeScale(e,t,n);this.applyMatrix4(zt);return this}lookAt(e){wa.lookAt(e);wa.updateMatrix();this.applyMatrix4(wa.matrix);return this}center(){this.computeBoundingBox();this.boundingBox.getCenter(Ti).negate();this.translate(Ti.x,Ti.y,Ti.z);return this}setFromPoints(e){const t=[];for(let n=0,s=e.length;n<s;n++){const r=e[n];t.push(r.x,r.y,r.z||0)}this.setAttribute("position",new ft(t,3));return this}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Hs}const e=this.attributes.position;const t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this);this.boundingBox.set(new P(-Infinity,-Infinity,-Infinity),new P(Infinity,Infinity,Infinity));return}if(e!==void 0){this.boundingBox.setFromBufferAttribute(e);if(t){for(let n=0,s=t.length;n<s;n++){const r=t[n];It.setFromBufferAttribute(r);if(this.morphTargetsRelative){dt.addVectors(this.boundingBox.min,It.min);this.boundingBox.expandByPoint(dt);dt.addVectors(this.boundingBox.max,It.max);this.boundingBox.expandByPoint(dt)}else{this.boundingBox.expandByPoint(It.min);this.boundingBox.expandByPoint(It.max)}}}}else{this.boundingBox.makeEmpty()}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new qr}const e=this.attributes.position;const t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this);this.boundingSphere.set(new P,Infinity);return}if(e){const n=this.boundingSphere.center;It.setFromBufferAttribute(e);if(t){for(let r=0,o=t.length;r<o;r++){const a=t[r];_s.setFromBufferAttribute(a);if(this.morphTargetsRelative){dt.addVectors(It.min,_s.min);It.expandByPoint(dt);dt.addVectors(It.max,_s.max);It.expandByPoint(dt)}else{It.expandByPoint(_s.min);It.expandByPoint(_s.max)}}}It.getCenter(n);let s=0;for(let r=0,o=e.count;r<o;r++){dt.fromBufferAttribute(e,r);s=Math.max(s,n.distanceToSquared(dt))}if(t){for(let r=0,o=t.length;r<o;r++){const a=t[r];const l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++){dt.fromBufferAttribute(a,c);if(l){Ti.fromBufferAttribute(e,c);dt.add(Ti)}s=Math.max(s,n.distanceToSquared(dt))}}}this.boundingSphere.radius=Math.sqrt(s);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}computeTangents(){const e=this.index;const t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position;const s=t.normal;const r=t.uv;if(this.hasAttribute("tangent")===false){this.setAttribute("tangent",new sn(new Float32Array(4*n.count),4))}const o=this.getAttribute("tangent");const a=[],l=[];for(let B=0;B<n.count;B++){a[B]=new P;l[B]=new P}const c=new P,h=new P,u=new P,f=new Be,m=new Be,g=new Be,S=new P,p=new P;function d(B,Q,v){c.fromBufferAttribute(n,B);h.fromBufferAttribute(n,Q);u.fromBufferAttribute(n,v);f.fromBufferAttribute(r,B);m.fromBufferAttribute(r,Q);g.fromBufferAttribute(r,v);h.sub(c);u.sub(c);m.sub(f);g.sub(f);const b=1/(m.x*g.y-g.x*m.y);if(!isFinite(b))return;S.copy(h).multiplyScalar(g.y).addScaledVector(u,-m.y).multiplyScalar(b);p.copy(u).multiplyScalar(m.x).addScaledVector(h,-g.x).multiplyScalar(b);a[B].add(S);a[Q].add(S);a[v].add(S);l[B].add(p);l[Q].add(p);l[v].add(p)}let T=this.groups;if(T.length===0){T=[{start:0,count:e.count}]}for(let B=0,Q=T.length;B<Q;++B){const v=T[B];const b=v.start;const ee=v.count;for(let $=b,C=b+ee;$<C;$+=3){d(e.getX($+0),e.getX($+1),e.getX($+2))}}const x=new P,y=new P;const L=new P,w=new P;function A(B){L.fromBufferAttribute(s,B);w.copy(L);const Q=a[B];x.copy(Q);x.sub(L.multiplyScalar(L.dot(Q))).normalize();y.crossVectors(w,Q);const v=y.dot(l[B]);const b=v<0?-1:1;o.setXYZW(B,x.x,x.y,x.z,b)}for(let B=0,Q=T.length;B<Q;++B){const v=T[B];const b=v.start;const ee=v.count;for(let $=b,C=b+ee;$<C;$+=3){A(e.getX($+0));A(e.getX($+1));A(e.getX($+2))}}}computeVertexNormals(){const e=this.index;const t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0){n=new sn(new Float32Array(t.count*3),3);this.setAttribute("normal",n)}else{for(let f=0,m=n.count;f<m;f++){n.setXYZ(f,0,0,0)}}const s=new P,r=new P,o=new P;const a=new P,l=new P,c=new P;const h=new P,u=new P;if(e){for(let f=0,m=e.count;f<m;f+=3){const g=e.getX(f+0);const S=e.getX(f+1);const p=e.getX(f+2);s.fromBufferAttribute(t,g);r.fromBufferAttribute(t,S);o.fromBufferAttribute(t,p);h.subVectors(o,r);u.subVectors(s,r);h.cross(u);a.fromBufferAttribute(n,g);l.fromBufferAttribute(n,S);c.fromBufferAttribute(n,p);a.add(h);l.add(h);c.add(h);n.setXYZ(g,a.x,a.y,a.z);n.setXYZ(S,l.x,l.y,l.z);n.setXYZ(p,c.x,c.y,c.z)}}else{for(let f=0,m=t.count;f<m;f+=3){s.fromBufferAttribute(t,f+0);r.fromBufferAttribute(t,f+1);o.fromBufferAttribute(t,f+2);h.subVectors(o,r);u.subVectors(s,r);h.cross(u);n.setXYZ(f+0,h.x,h.y,h.z);n.setXYZ(f+1,h.x,h.y,h.z);n.setXYZ(f+2,h.x,h.y,h.z)}}this.normalizeNormals();n.needsUpdate=true}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++){dt.fromBufferAttribute(e,t);dt.normalize();e.setXYZ(t,dt.x,dt.y,dt.z)}}toNonIndexed(){function e(a,l){const c=a.array;const h=a.itemSize;const u=a.normalized;const f=new c.constructor(l.length*h);let m=0,g=0;for(let S=0,p=l.length;S<p;S++){if(a.isInterleavedBufferAttribute){m=l[S]*a.data.stride+a.offset}else{m=l[S]*h}for(let d=0;d<h;d++){f[g++]=c[m++]}}return new sn(f,h,u)}if(this.index===null){console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");return this}const t=new Pt;const n=this.index.array;const s=this.attributes;for(const a in s){const l=s[a];const c=e(l,n);t.setAttribute(a,c)}const r=this.morphAttributes;for(const a in r){const l=[];const c=r[a];for(let h=0,u=c.length;h<u;h++){const f=c[h];const m=e(f,n);l.push(m)}t.morphAttributes[a]=l}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};e.uuid=this.uuid;e.type=this.type;if(this.name!=="")e.name=this.name;if(Object.keys(this.userData).length>0)e.userData=this.userData;if(this.parameters!==void 0){const l=this.parameters;for(const c in l){if(l[c]!==void 0)e[c]=l[c]}return e}e.data={attributes:{}};const t=this.index;if(t!==null){e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)}}const n=this.attributes;for(const l in n){const c=n[l];e.data.attributes[l]=c.toJSON(e.data)}const s={};let r=false;for(const l in this.morphAttributes){const c=this.morphAttributes[l];const h=[];for(let u=0,f=c.length;u<f;u++){const m=c[u];h.push(m.toJSON(e.data))}if(h.length>0){s[l]=h;r=true}}if(r){e.data.morphAttributes=s;e.data.morphTargetsRelative=this.morphTargetsRelative}const o=this.groups;if(o.length>0){e.data.groups=JSON.parse(JSON.stringify(o))}const a=this.boundingSphere;if(a!==null){e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}}return e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;if(n!==null){this.setIndex(n.clone(t))}const s=e.attributes;for(const c in s){const h=s[c];this.setAttribute(c,h.clone(t))}const r=e.morphAttributes;for(const c in r){const h=[];const u=r[c];for(let f=0,m=u.length;f<m;f++){h.push(u[f].clone(t))}this.morphAttributes[c]=h}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=e.boundingBox;if(a!==null){this.boundingBox=a.clone()}const l=e.boundingSphere;if(l!==null){this.boundingSphere=l.clone()}this.drawRange.start=e.drawRange.start;this.drawRange.count=e.drawRange.count;this.userData=e.userData;return this}dispose(){this.dispatchEvent({type:"dispose"})}}const Il=new rt;const $n=new rh;const ir=new qr;const Nl=new P;const bi=new P;const Ai=new P;const wi=new P;const Ca=new P;const sr=new P;const rr=new Be;const ar=new Be;const or=new Be;const Fl=new P;const Ol=new P;const Bl=new P;const lr=new P;const cr=new P;class Vt extends Lt{constructor(e=new Pt,t=new xo){super();this.isMesh=true;this.type="Mesh";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);if(e.morphTargetInfluences!==void 0){this.morphTargetInfluences=e.morphTargetInfluences.slice()}if(e.morphTargetDictionary!==void 0){this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)}this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let r=0,o=s.length;r<o;r++){const a=s[r].name||String(r);this.morphTargetInfluences.push(0);this.morphTargetDictionary[a]=r}}}}getVertexPosition(e,t){const n=this.geometry;const s=n.attributes.position;const r=n.morphAttributes.position;const o=n.morphTargetsRelative;t.fromBufferAttribute(s,e);const a=this.morphTargetInfluences;if(r&&a){sr.set(0,0,0);for(let l=0,c=r.length;l<c;l++){const h=a[l];const u=r[l];if(h===0)continue;Ca.fromBufferAttribute(u,e);if(o){sr.addScaledVector(Ca,h)}else{sr.addScaledVector(Ca.sub(t),h)}}t.add(sr)}return t}raycast(e,t){const n=this.geometry;const s=this.material;const r=this.matrixWorld;if(s===void 0)return;if(n.boundingSphere===null)n.computeBoundingSphere();ir.copy(n.boundingSphere);ir.applyMatrix4(r);$n.copy(e.ray).recast(e.near);if(ir.containsPoint($n.origin)===false){if($n.intersectSphere(ir,Nl)===null)return;if($n.origin.distanceToSquared(Nl)>(e.far-e.near)**2)return}Il.copy(r).invert();$n.copy(e.ray).applyMatrix4(Il);if(n.boundingBox!==null){if($n.intersectsBox(n.boundingBox)===false)return}this._computeIntersections(e,t,$n)}_computeIntersections(e,t,n){let s;const r=this.geometry;const o=this.material;const a=r.index;const l=r.attributes.position;const c=r.attributes.uv;const h=r.attributes.uv1;const u=r.attributes.normal;const f=r.groups;const m=r.drawRange;if(a!==null){if(Array.isArray(o)){for(let g=0,S=f.length;g<S;g++){const p=f[g];const d=o[p.materialIndex];const T=Math.max(p.start,m.start);const x=Math.min(a.count,Math.min(p.start+p.count,m.start+m.count));for(let y=T,L=x;y<L;y+=3){const w=a.getX(y);const A=a.getX(y+1);const B=a.getX(y+2);s=hr(this,d,e,n,c,h,u,w,A,B);if(s){s.faceIndex=Math.floor(y/3);s.face.materialIndex=p.materialIndex;t.push(s)}}}}else{const g=Math.max(0,m.start);const S=Math.min(a.count,m.start+m.count);for(let p=g,d=S;p<d;p+=3){const T=a.getX(p);const x=a.getX(p+1);const y=a.getX(p+2);s=hr(this,o,e,n,c,h,u,T,x,y);if(s){s.faceIndex=Math.floor(p/3);t.push(s)}}}}else if(l!==void 0){if(Array.isArray(o)){for(let g=0,S=f.length;g<S;g++){const p=f[g];const d=o[p.materialIndex];const T=Math.max(p.start,m.start);const x=Math.min(l.count,Math.min(p.start+p.count,m.start+m.count));for(let y=T,L=x;y<L;y+=3){const w=y;const A=y+1;const B=y+2;s=hr(this,d,e,n,c,h,u,w,A,B);if(s){s.faceIndex=Math.floor(y/3);s.face.materialIndex=p.materialIndex;t.push(s)}}}}else{const g=Math.max(0,m.start);const S=Math.min(l.count,m.start+m.count);for(let p=g,d=S;p<d;p+=3){const T=p;const x=p+1;const y=p+2;s=hr(this,o,e,n,c,h,u,T,x,y);if(s){s.faceIndex=Math.floor(p/3);t.push(s)}}}}}}function Fd(i,e,t,n,s,r,o,a){let l;if(e.side===Rt){l=n.intersectTriangle(o,r,s,true,a)}else{l=n.intersectTriangle(s,r,o,e.side===Hn,a)}if(l===null)return null;cr.copy(a);cr.applyMatrix4(i.matrixWorld);const c=t.ray.origin.distanceTo(cr);if(c<t.near||c>t.far)return null;return{distance:c,point:cr.clone(),object:i}}function hr(i,e,t,n,s,r,o,a,l,c){i.getVertexPosition(a,bi);i.getVertexPosition(l,Ai);i.getVertexPosition(c,wi);const h=Fd(i,e,t,n,bi,Ai,wi,lr);if(h){if(s){rr.fromBufferAttribute(s,a);ar.fromBufferAttribute(s,l);or.fromBufferAttribute(s,c);h.uv=nn.getInterpolation(lr,bi,Ai,wi,rr,ar,or,new Be)}if(r){rr.fromBufferAttribute(r,a);ar.fromBufferAttribute(r,l);or.fromBufferAttribute(r,c);h.uv1=nn.getInterpolation(lr,bi,Ai,wi,rr,ar,or,new Be)}if(o){Fl.fromBufferAttribute(o,a);Ol.fromBufferAttribute(o,l);Bl.fromBufferAttribute(o,c);h.normal=nn.getInterpolation(lr,bi,Ai,wi,Fl,Ol,Bl,new P);if(h.normal.dot(n.direction)>0){h.normal.multiplyScalar(-1)}}const u={a,b:l,c,normal:new P,materialIndex:0};nn.getNormal(bi,Ai,wi,u.normal);h.face=u}return h}class ks extends Pt{constructor(e=1,t=1,n=1,s=1,r=1,o=1){super();this.type="BoxGeometry";this.parameters={width:e,height:t,depth:n,widthSegments:s,heightSegments:r,depthSegments:o};const a=this;s=Math.floor(s);r=Math.floor(r);o=Math.floor(o);const l=[];const c=[];const h=[];const u=[];let f=0;let m=0;g("z","y","x",-1,-1,n,t,e,o,r,0);g("z","y","x",1,-1,n,t,-e,o,r,1);g("x","z","y",1,1,e,n,t,s,o,2);g("x","z","y",1,-1,e,n,-t,s,o,3);g("x","y","z",1,-1,e,t,n,s,r,4);g("x","y","z",-1,-1,e,t,-n,s,r,5);this.setIndex(l);this.setAttribute("position",new ft(c,3));this.setAttribute("normal",new ft(h,3));this.setAttribute("uv",new ft(u,2));function g(S,p,d,T,x,y,L,w,A,B,Q){const v=y/A;const b=L/B;const ee=y/2;const $=L/2;const C=w/2;const V=A+1;const H=B+1;let q=0;let k=0;const X=new P;for(let Y=0;Y<H;Y++){const re=Y*b-$;for(let de=0;de<V;de++){const Re=de*v-ee;X[S]=Re*T;X[p]=re*x;X[d]=C;c.push(X.x,X.y,X.z);X[S]=0;X[p]=0;X[d]=w>0?1:-1;h.push(X.x,X.y,X.z);u.push(de/A);u.push(1-Y/B);q+=1}}for(let Y=0;Y<B;Y++){for(let re=0;re<A;re++){const de=f+re+V*Y;const Re=f+re+V*(Y+1);const z=f+(re+1)+V*(Y+1);const K=f+(re+1)+V*Y;l.push(de,Re,K);l.push(Re,z,K);k+=6}}a.addGroup(m,k,Q);m+=k;f+=q}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new ks(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function ns(i){const e={};for(const t in i){e[t]={};for(const n in i[t]){const s=i[t][n];if(s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)){if(s.isRenderTargetTexture){console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");e[t][n]=null}else{e[t][n]=s.clone()}}else if(Array.isArray(s)){e[t][n]=s.slice()}else{e[t][n]=s}}}return e}function Et(i){const e={};for(let t=0;t<i.length;t++){const n=ns(i[t]);for(const s in n){e[s]=n[s]}}return e}function Od(i){const e=[];for(let t=0;t<i.length;t++){e.push(i[t].clone())}return e}function hh(i){if(i.getRenderTarget()===null){return i.outputColorSpace}return $e.workingColorSpace}const As={clone:ns,merge:Et};var Bd="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var zd="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";class Nt extends os{constructor(e){super();this.isShaderMaterial=true;this.type="ShaderMaterial";this.defines={};this.uniforms={};this.uniformsGroups=[];this.vertexShader=Bd;this.fragmentShader=zd;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.clipping=false;this.forceSinglePass=true;this.extensions={derivatives:false,fragDepth:false,drawBuffers:false,shaderTextureLOD:false,clipCullDistance:false,multiDraw:false};this.defaultAttributeValues={"color":[1,1,1],"uv":[0,0],"uv1":[0,0]};this.index0AttributeName=void 0;this.uniformsNeedUpdate=false;this.glslVersion=null;if(e!==void 0){this.setValues(e)}}copy(e){super.copy(e);this.fragmentShader=e.fragmentShader;this.vertexShader=e.vertexShader;this.uniforms=ns(e.uniforms);this.uniformsGroups=Od(e.uniformsGroups);this.defines=Object.assign({},e.defines);this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.fog=e.fog;this.lights=e.lights;this.clipping=e.clipping;this.extensions=Object.assign({},e.extensions);this.glslVersion=e.glslVersion;return this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion;t.uniforms={};for(const s in this.uniforms){const r=this.uniforms[s];const o=r.value;if(o&&o.isTexture){t.uniforms[s]={type:"t",value:o.toJSON(e).uuid}}else if(o&&o.isColor){t.uniforms[s]={type:"c",value:o.getHex()}}else if(o&&o.isVector2){t.uniforms[s]={type:"v2",value:o.toArray()}}else if(o&&o.isVector3){t.uniforms[s]={type:"v3",value:o.toArray()}}else if(o&&o.isVector4){t.uniforms[s]={type:"v4",value:o.toArray()}}else if(o&&o.isMatrix3){t.uniforms[s]={type:"m3",value:o.toArray()}}else if(o&&o.isMatrix4){t.uniforms[s]={type:"m4",value:o.toArray()}}else{t.uniforms[s]={value:o}}}if(Object.keys(this.defines).length>0)t.defines=this.defines;t.vertexShader=this.vertexShader;t.fragmentShader=this.fragmentShader;t.lights=this.lights;t.clipping=this.clipping;const n={};for(const s in this.extensions){if(this.extensions[s]===true)n[s]=true}if(Object.keys(n).length>0)t.extensions=n;return t}}class uh extends Lt{constructor(){super();this.isCamera=true;this.type="Camera";this.matrixWorldInverse=new rt;this.projectionMatrix=new rt;this.projectionMatrixInverse=new rt;this.coordinateSystem=En}copy(e,t){super.copy(e,t);this.matrixWorldInverse.copy(e.matrixWorldInverse);this.projectionMatrix.copy(e.projectionMatrix);this.projectionMatrixInverse.copy(e.projectionMatrixInverse);this.coordinateSystem=e.coordinateSystem;return this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e);this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t);this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const Ln=new P;const zl=new Be;const Gl=new Be;class kt extends uh{constructor(e=50,t=1,n=.1,s=2e3){super();this.isPerspectiveCamera=true;this.type="PerspectiveCamera";this.fov=e;this.zoom=1;this.near=n;this.far=s;this.focus=10;this.aspect=t;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.fov=e.fov;this.zoom=e.zoom;this.near=e.near;this.far=e.far;this.focus=e.focus;this.aspect=e.aspect;this.view=e.view===null?null:Object.assign({},e.view);this.filmGauge=e.filmGauge;this.filmOffset=e.filmOffset;return this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Qa*2*Math.atan(t);this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(ca*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Qa*2*Math.atan(Math.tan(ca*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){Ln.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse);t.set(Ln.x,Ln.y).multiplyScalar(-e/Ln.z);Ln.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse);n.set(Ln.x,Ln.y).multiplyScalar(-e/Ln.z)}getViewSize(e,t){this.getViewBounds(e,zl,Gl);return t.subVectors(Gl,zl)}setViewOffset(e,t,n,s,r,o){this.aspect=e/t;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=s;this.view.width=r;this.view.height=o;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(ca*.5*this.fov)/this.zoom;let n=2*t;let s=this.aspect*n;let r=-.5*s;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;r+=o.offsetX*s/l;t-=o.offsetY*n/c;s*=o.width/l;n*=o.height/c}const a=this.filmOffset;if(a!==0)r+=e*a/this.getFilmWidth();this.projectionMatrix.makePerspective(r,r+s,t,t-n,e,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);t.object.fov=this.fov;t.object.zoom=this.zoom;t.object.near=this.near;t.object.far=this.far;t.object.focus=this.focus;t.object.aspect=this.aspect;if(this.view!==null)t.object.view=Object.assign({},this.view);t.object.filmGauge=this.filmGauge;t.object.filmOffset=this.filmOffset;return t}}const Ci=-90;const Ri=1;class Gd extends Lt{constructor(e,t,n){super();this.type="CubeCamera";this.renderTarget=n;this.coordinateSystem=null;this.activeMipmapLevel=0;const s=new kt(Ci,Ri,e,t);s.layers=this.layers;this.add(s);const r=new kt(Ci,Ri,e,t);r.layers=this.layers;this.add(r);const o=new kt(Ci,Ri,e,t);o.layers=this.layers;this.add(o);const a=new kt(Ci,Ri,e,t);a.layers=this.layers;this.add(a);const l=new kt(Ci,Ri,e,t);l.layers=this.layers;this.add(l);const c=new kt(Ci,Ri,e,t);c.layers=this.layers;this.add(c)}updateCoordinateSystem(){const e=this.coordinateSystem;const t=this.children.concat();const[n,s,r,o,a,l]=t;for(const c of t)this.remove(c);if(e===En){n.up.set(0,1,0);n.lookAt(1,0,0);s.up.set(0,1,0);s.lookAt(-1,0,0);r.up.set(0,0,-1);r.lookAt(0,1,0);o.up.set(0,0,1);o.lookAt(0,-1,0);a.up.set(0,1,0);a.lookAt(0,0,1);l.up.set(0,1,0);l.lookAt(0,0,-1)}else if(e===Pr){n.up.set(0,-1,0);n.lookAt(-1,0,0);s.up.set(0,-1,0);s.lookAt(1,0,0);r.up.set(0,0,1);r.lookAt(0,1,0);o.up.set(0,0,-1);o.lookAt(0,-1,0);a.up.set(0,-1,0);a.lookAt(0,0,1);l.up.set(0,-1,0);l.lookAt(0,0,-1)}else{throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e)}for(const c of t){this.add(c);c.updateMatrixWorld()}}update(e,t){if(this.parent===null)this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:s}=this;if(this.coordinateSystem!==e.coordinateSystem){this.coordinateSystem=e.coordinateSystem;this.updateCoordinateSystem()}const[r,o,a,l,c,h]=this.children;const u=e.getRenderTarget();const f=e.getActiveCubeFace();const m=e.getActiveMipmapLevel();const g=e.xr.enabled;e.xr.enabled=false;const S=n.texture.generateMipmaps;n.texture.generateMipmaps=false;e.setRenderTarget(n,0,s);e.render(t,r);e.setRenderTarget(n,1,s);e.render(t,o);e.setRenderTarget(n,2,s);e.render(t,a);e.setRenderTarget(n,3,s);e.render(t,l);e.setRenderTarget(n,4,s);e.render(t,c);n.texture.generateMipmaps=S;e.setRenderTarget(n,5,s);e.render(t,h);e.setRenderTarget(u,f,m);e.xr.enabled=g;n.texture.needsPMREMUpdate=true}}class dh extends Tt{constructor(e,t,n,s,r,o,a,l,c,h){e=e!==void 0?e:[];t=t!==void 0?t:Qi;super(e,t,n,s,r,o,a,l,c,h);this.isCubeTexture=true;this.flipY=false}get images(){return this.image}set images(e){this.image=e}}class Hd extends rn{constructor(e=1,t={}){super(e,e,t);this.isWebGLCubeRenderTarget=true;const n={width:e,height:e,depth:1};const s=[n,n,n,n,n,n];this.texture=new dh(s,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace);this.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:false;this.texture.minFilter=t.minFilter!==void 0?t.minFilter:wt}fromEquirectangularTexture(e,t){this.texture.type=t.type;this.texture.colorSpace=t.colorSpace;this.texture.generateMipmaps=t.generateMipmaps;this.texture.minFilter=t.minFilter;this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`};const s=new ks(5,5,5);const r=new Nt({name:"CubemapFromEquirect",uniforms:ns(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Rt,blending:yn});r.uniforms.tEquirect.value=t;const o=new Vt(s,r);const a=t.minFilter;if(t.minFilter===ri)t.minFilter=wt;const l=new Gd(1,10,this);l.update(e,o);t.minFilter=a;o.geometry.dispose();o.material.dispose();return this}clear(e,t,n,s){const r=e.getRenderTarget();for(let o=0;o<6;o++){e.setRenderTarget(this,o);e.clear(t,n,s)}e.setRenderTarget(r)}}const Ra=new P;const kd=new P;const Vd=new Oe;class ti{constructor(e=new P(1,0,0),t=0){this.isPlane=true;this.normal=e;this.constant=t}set(e,t){this.normal.copy(e);this.constant=t;return this}setComponents(e,t,n,s){this.normal.set(e,t,n);this.constant=s;return this}setFromNormalAndCoplanarPoint(e,t){this.normal.copy(e);this.constant=-t.dot(this.normal);return this}setFromCoplanarPoints(e,t,n){const s=Ra.subVectors(n,t).cross(kd.subVectors(e,t)).normalize();this.setFromNormalAndCoplanarPoint(s,e);return this}copy(e){this.normal.copy(e.normal);this.constant=e.constant;return this}normalize(){const e=1/this.normal.length();this.normal.multiplyScalar(e);this.constant*=e;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(Ra);const s=this.normal.dot(n);if(s===0){if(this.distanceToPoint(e.start)===0){return t.copy(e.start)}return null}const r=-(e.start.dot(this.normal)+this.constant)/s;if(r<0||r>1){return null}return t.copy(e.start).addScaledVector(n,r)}intersectsLine(e){const t=this.distanceToPoint(e.start);const n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||Vd.getNormalMatrix(e);const s=this.coplanarPoint(Ra).applyMatrix4(e);const r=this.normal.applyMatrix3(n).normalize();this.constant=-s.dot(r);return this}translate(e){this.constant-=e.dot(this.normal);return this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Kn=new qr;const ur=new P;class fh{constructor(e=new ti,t=new ti,n=new ti,s=new ti,r=new ti,o=new ti){this.planes=[e,t,n,s,r,o]}set(e,t,n,s,r,o){const a=this.planes;a[0].copy(e);a[1].copy(t);a[2].copy(n);a[3].copy(s);a[4].copy(r);a[5].copy(o);return this}copy(e){const t=this.planes;for(let n=0;n<6;n++){t[n].copy(e.planes[n])}return this}setFromProjectionMatrix(e,t=En){const n=this.planes;const s=e.elements;const r=s[0],o=s[1],a=s[2],l=s[3];const c=s[4],h=s[5],u=s[6],f=s[7];const m=s[8],g=s[9],S=s[10],p=s[11];const d=s[12],T=s[13],x=s[14],y=s[15];n[0].setComponents(l-r,f-c,p-m,y-d).normalize();n[1].setComponents(l+r,f+c,p+m,y+d).normalize();n[2].setComponents(l+o,f+h,p+g,y+T).normalize();n[3].setComponents(l-o,f-h,p-g,y-T).normalize();n[4].setComponents(l-a,f-u,p-S,y-x).normalize();if(t===En){n[5].setComponents(l+a,f+u,p+S,y+x).normalize()}else if(t===Pr){n[5].setComponents(a,u,S,x).normalize()}else{throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t)}return this}intersectsObject(e){if(e.boundingSphere!==void 0){if(e.boundingSphere===null)e.computeBoundingSphere();Kn.copy(e.boundingSphere).applyMatrix4(e.matrixWorld)}else{const t=e.geometry;if(t.boundingSphere===null)t.computeBoundingSphere();Kn.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Kn)}intersectsSprite(e){Kn.center.set(0,0,0);Kn.radius=.7071067811865476;Kn.applyMatrix4(e.matrixWorld);return this.intersectsSphere(Kn)}intersectsSphere(e){const t=this.planes;const n=e.center;const s=-e.radius;for(let r=0;r<6;r++){const o=t[r].distanceToPoint(n);if(o<s){return false}}return true}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const s=t[n];ur.x=s.normal.x>0?e.max.x:e.min.x;ur.y=s.normal.y>0?e.max.y:e.min.y;ur.z=s.normal.z>0?e.max.z:e.min.z;if(s.distanceToPoint(ur)<0){return false}}return true}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++){if(t[n].distanceToPoint(e)<0){return false}}return true}clone(){return new this.constructor().copy(this)}}function ph(){let i=null;let e=false;let t=null;let n=null;function s(r,o){t(r,o);n=i.requestAnimationFrame(s)}return{start:function(){if(e===true)return;if(t===null)return;n=i.requestAnimationFrame(s);e=true},stop:function(){i.cancelAnimationFrame(n);e=false},setAnimationLoop:function(r){t=r},setContext:function(r){i=r}}}function Wd(i,e){const t=e.isWebGL2;const n=new WeakMap;function s(c,h){const u=c.array;const f=c.usage;const m=u.byteLength;const g=i.createBuffer();i.bindBuffer(h,g);i.bufferData(h,u,f);c.onUploadCallback();let S;if(u instanceof Float32Array){S=i.FLOAT}else if(u instanceof Uint16Array){if(c.isFloat16BufferAttribute){if(t){S=i.HALF_FLOAT}else{throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.")}}else{S=i.UNSIGNED_SHORT}}else if(u instanceof Int16Array){S=i.SHORT}else if(u instanceof Uint32Array){S=i.UNSIGNED_INT}else if(u instanceof Int32Array){S=i.INT}else if(u instanceof Int8Array){S=i.BYTE}else if(u instanceof Uint8Array){S=i.UNSIGNED_BYTE}else if(u instanceof Uint8ClampedArray){S=i.UNSIGNED_BYTE}else{throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+u)}return{buffer:g,type:S,bytesPerElement:u.BYTES_PER_ELEMENT,version:c.version,size:m}}function r(c,h,u){const f=h.array;const m=h._updateRange;const g=h.updateRanges;i.bindBuffer(u,c);if(m.count===-1&&g.length===0){i.bufferSubData(u,0,f)}if(g.length!==0){for(let S=0,p=g.length;S<p;S++){const d=g[S];if(t){i.bufferSubData(u,d.start*f.BYTES_PER_ELEMENT,f,d.start,d.count)}else{i.bufferSubData(u,d.start*f.BYTES_PER_ELEMENT,f.subarray(d.start,d.start+d.count))}}h.clearUpdateRanges()}if(m.count!==-1){if(t){i.bufferSubData(u,m.offset*f.BYTES_PER_ELEMENT,f,m.offset,m.count)}else{i.bufferSubData(u,m.offset*f.BYTES_PER_ELEMENT,f.subarray(m.offset,m.offset+m.count))}m.count=-1}h.onUploadCallback()}function o(c){if(c.isInterleavedBufferAttribute)c=c.data;return n.get(c)}function a(c){if(c.isInterleavedBufferAttribute)c=c.data;const h=n.get(c);if(h){i.deleteBuffer(h.buffer);n.delete(c)}}function l(c,h){if(c.isGLBufferAttribute){const f=n.get(c);if(!f||f.version<c.version){n.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version})}return}if(c.isInterleavedBufferAttribute)c=c.data;const u=n.get(c);if(u===void 0){n.set(c,s(c,h))}else if(u.version<c.version){if(u.size!==c.array.byteLength){throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.")}r(u.buffer,c,h);u.version=c.version}}return{get:o,remove:a,update:l}}class Vs extends Pt{constructor(e=1,t=1,n=1,s=1){super();this.type="PlaneGeometry";this.parameters={width:e,height:t,widthSegments:n,heightSegments:s};const r=e/2;const o=t/2;const a=Math.floor(n);const l=Math.floor(s);const c=a+1;const h=l+1;const u=e/a;const f=t/l;const m=[];const g=[];const S=[];const p=[];for(let d=0;d<h;d++){const T=d*f-o;for(let x=0;x<c;x++){const y=x*u-r;g.push(y,-T,0);S.push(0,0,1);p.push(x/a);p.push(1-d/l)}}for(let d=0;d<l;d++){for(let T=0;T<a;T++){const x=T+c*d;const y=T+c*(d+1);const L=T+1+c*(d+1);const w=T+1+c*d;m.push(x,y,w);m.push(y,L,w)}}this.setIndex(m);this.setAttribute("position",new ft(g,3));this.setAttribute("normal",new ft(S,3));this.setAttribute("uv",new ft(p,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new Vs(e.width,e.height,e.widthSegments,e.heightSegments)}}var Xd="#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";var qd="#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";var Yd="#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";var jd="#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";var $d="#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";var Kd="#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";var Zd="#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";var Jd="#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";var Qd="#ifdef USE_BATCHING\n	attribute float batchId;\n	uniform highp sampler2D batchingTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";var ef="#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif";var tf="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";var nf="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";var sf="float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";var rf="#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";var af="#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";var of="#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";var lf="#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var cf="#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";var hf="#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";var uf="#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";var df="#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";var ff="#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";var pf="#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";var mf="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";var gf="#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";var _f="vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";var vf="#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";var xf="#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";var Sf="#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var Mf="#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";var Ef="gl_FragColor = linearToOutputTexel( gl_FragColor );";var yf="\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n	vec3( 0.8224621, 0.177538, 0.0 ),\n	vec3( 0.0331941, 0.9668058, 0.0 ),\n	vec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n	vec3( 1.2249401, - 0.2249404, 0.0 ),\n	vec3( - 0.0420569, 1.0420571, 0.0 ),\n	vec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return sRGBTransferOETF( value );\n}";var Tf="#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";var bf="#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";var Af="#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";var wf="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";var Cf="#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";var Rf="#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";var Lf="#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";var Pf="#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var Df="#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";var Uf="#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";var If="#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";var Nf="#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";var Ff="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";var Of="varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";var Bf="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";var zf="#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";var Gf="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var Hf="varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";var kf="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var Vf="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";var Wf="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";var Xf="struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var qf="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var Yf="#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";var jf="#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";var $f="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var Kf="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";var Zf="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";var Jf="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";var Qf="#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";var ep="#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";var tp="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var np="#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";var ip="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";var sp="#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";var rp="#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[MORPHTARGETS_COUNT];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";var ap="#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";var op="#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";var lp="#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n	#endif\n	#ifdef MORPHTARGETS_TEXTURE\n		#ifndef USE_INSTANCING_MORPH\n			uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		#endif\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";var cp="#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";var hp="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";var up="#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var dp="#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";var fp="#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";var pp="#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";var mp="#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";var gp="#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";var _p="#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";var vp="#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";var xp="#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";var Sp="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var Mp="vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";var Ep="#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";var yp="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var Tp="#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var bp="#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";var Ap="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";var wp="#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";var Cp="#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";var Rp="#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";var Lp="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";var Pp="float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";var Dp="#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var Up="#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";var Ip="#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var Np="#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";var Fp="float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";var Op="#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";var Bp="#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var zp="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	float startCompression = 0.8 - 0.04;\n	float desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min(color.r, min(color.g, color.b));\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max(color.r, max(color.g, color.b));\n	if (peak < startCompression) return color;\n	float d = 1. - startCompression;\n	float newPeak = 1. - d * d / (peak + d - startCompression);\n	color *= newPeak / peak;\n	float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\n	return mix(color, vec3(1, 1, 1), g);\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var Gp="#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";var Hp="#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";var kp="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";var Vp="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";var Wp="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";var Xp="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";const qp="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const Yp="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const jp="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";const $p="#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const Kp="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";const Zp="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const Jp="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";const Qp="#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";const em="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";const tm="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";const nm="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";const im="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const sm="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";const rm="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";const am="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";const om="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const lm="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const cm="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const hm="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";const um="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const dm="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";const fm="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";const pm="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const mm="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const gm="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";const _m="#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const vm="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const xm="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const Sm="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";const Mm="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";const Em="#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const ym="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";const Tm="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";const bm="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";const Fe={alphahash_fragment:Xd,alphahash_pars_fragment:qd,alphamap_fragment:Yd,alphamap_pars_fragment:jd,alphatest_fragment:$d,alphatest_pars_fragment:Kd,aomap_fragment:Zd,aomap_pars_fragment:Jd,batching_pars_vertex:Qd,batching_vertex:ef,begin_vertex:tf,beginnormal_vertex:nf,bsdfs:sf,iridescence_fragment:rf,bumpmap_pars_fragment:af,clipping_planes_fragment:of,clipping_planes_pars_fragment:lf,clipping_planes_pars_vertex:cf,clipping_planes_vertex:hf,color_fragment:uf,color_pars_fragment:df,color_pars_vertex:ff,color_vertex:pf,common:mf,cube_uv_reflection_fragment:gf,defaultnormal_vertex:_f,displacementmap_pars_vertex:vf,displacementmap_vertex:xf,emissivemap_fragment:Sf,emissivemap_pars_fragment:Mf,colorspace_fragment:Ef,colorspace_pars_fragment:yf,envmap_fragment:Tf,envmap_common_pars_fragment:bf,envmap_pars_fragment:Af,envmap_pars_vertex:wf,envmap_physical_pars_fragment:zf,envmap_vertex:Cf,fog_vertex:Rf,fog_pars_vertex:Lf,fog_fragment:Pf,fog_pars_fragment:Df,gradientmap_pars_fragment:Uf,lightmap_fragment:If,lightmap_pars_fragment:Nf,lights_lambert_fragment:Ff,lights_lambert_pars_fragment:Of,lights_pars_begin:Bf,lights_toon_fragment:Gf,lights_toon_pars_fragment:Hf,lights_phong_fragment:kf,lights_phong_pars_fragment:Vf,lights_physical_fragment:Wf,lights_physical_pars_fragment:Xf,lights_fragment_begin:qf,lights_fragment_maps:Yf,lights_fragment_end:jf,logdepthbuf_fragment:$f,logdepthbuf_pars_fragment:Kf,logdepthbuf_pars_vertex:Zf,logdepthbuf_vertex:Jf,map_fragment:Qf,map_pars_fragment:ep,map_particle_fragment:tp,map_particle_pars_fragment:np,metalnessmap_fragment:ip,metalnessmap_pars_fragment:sp,morphinstance_vertex:rp,morphcolor_vertex:ap,morphnormal_vertex:op,morphtarget_pars_vertex:lp,morphtarget_vertex:cp,normal_fragment_begin:hp,normal_fragment_maps:up,normal_pars_fragment:dp,normal_pars_vertex:fp,normal_vertex:pp,normalmap_pars_fragment:mp,clearcoat_normal_fragment_begin:gp,clearcoat_normal_fragment_maps:_p,clearcoat_pars_fragment:vp,iridescence_pars_fragment:xp,opaque_fragment:Sp,packing:Mp,premultiplied_alpha_fragment:Ep,project_vertex:yp,dithering_fragment:Tp,dithering_pars_fragment:bp,roughnessmap_fragment:Ap,roughnessmap_pars_fragment:wp,shadowmap_pars_fragment:Cp,shadowmap_pars_vertex:Rp,shadowmap_vertex:Lp,shadowmask_pars_fragment:Pp,skinbase_vertex:Dp,skinning_pars_vertex:Up,skinning_vertex:Ip,skinnormal_vertex:Np,specularmap_fragment:Fp,specularmap_pars_fragment:Op,tonemapping_fragment:Bp,tonemapping_pars_fragment:zp,transmission_fragment:Gp,transmission_pars_fragment:Hp,uv_pars_fragment:kp,uv_pars_vertex:Vp,uv_vertex:Wp,worldpos_vertex:Xp,background_vert:qp,background_frag:Yp,backgroundCube_vert:jp,backgroundCube_frag:$p,cube_vert:Kp,cube_frag:Zp,depth_vert:Jp,depth_frag:Qp,distanceRGBA_vert:em,distanceRGBA_frag:tm,equirect_vert:nm,equirect_frag:im,linedashed_vert:sm,linedashed_frag:rm,meshbasic_vert:am,meshbasic_frag:om,meshlambert_vert:lm,meshlambert_frag:cm,meshmatcap_vert:hm,meshmatcap_frag:um,meshnormal_vert:dm,meshnormal_frag:fm,meshphong_vert:pm,meshphong_frag:mm,meshphysical_vert:gm,meshphysical_frag:_m,meshtoon_vert:vm,meshtoon_frag:xm,points_vert:Sm,points_frag:Mm,shadow_vert:Em,shadow_frag:ym,sprite_vert:Tm,sprite_frag:bm};const se={common:{diffuse:{value:new We(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Oe},alphaMap:{value:null},alphaMapTransform:{value:new Oe},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Oe}},envmap:{envMap:{value:null},envMapRotation:{value:new Oe},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Oe}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Oe}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Oe},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Oe},normalScale:{value:new Be(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Oe},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Oe}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Oe}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Oe}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new We(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new We(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Oe},alphaTest:{value:0},uvTransform:{value:new Oe}},sprite:{diffuse:{value:new We(16777215)},opacity:{value:1},center:{value:new Be(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Oe},alphaMap:{value:null},alphaMapTransform:{value:new Oe},alphaTest:{value:0}}};const tn={basic:{uniforms:Et([se.common,se.specularmap,se.envmap,se.aomap,se.lightmap,se.fog]),vertexShader:Fe.meshbasic_vert,fragmentShader:Fe.meshbasic_frag},lambert:{uniforms:Et([se.common,se.specularmap,se.envmap,se.aomap,se.lightmap,se.emissivemap,se.bumpmap,se.normalmap,se.displacementmap,se.fog,se.lights,{emissive:{value:new We(0)}}]),vertexShader:Fe.meshlambert_vert,fragmentShader:Fe.meshlambert_frag},phong:{uniforms:Et([se.common,se.specularmap,se.envmap,se.aomap,se.lightmap,se.emissivemap,se.bumpmap,se.normalmap,se.displacementmap,se.fog,se.lights,{emissive:{value:new We(0)},specular:{value:new We(1118481)},shininess:{value:30}}]),vertexShader:Fe.meshphong_vert,fragmentShader:Fe.meshphong_frag},standard:{uniforms:Et([se.common,se.envmap,se.aomap,se.lightmap,se.emissivemap,se.bumpmap,se.normalmap,se.displacementmap,se.roughnessmap,se.metalnessmap,se.fog,se.lights,{emissive:{value:new We(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Fe.meshphysical_vert,fragmentShader:Fe.meshphysical_frag},toon:{uniforms:Et([se.common,se.aomap,se.lightmap,se.emissivemap,se.bumpmap,se.normalmap,se.displacementmap,se.gradientmap,se.fog,se.lights,{emissive:{value:new We(0)}}]),vertexShader:Fe.meshtoon_vert,fragmentShader:Fe.meshtoon_frag},matcap:{uniforms:Et([se.common,se.bumpmap,se.normalmap,se.displacementmap,se.fog,{matcap:{value:null}}]),vertexShader:Fe.meshmatcap_vert,fragmentShader:Fe.meshmatcap_frag},points:{uniforms:Et([se.points,se.fog]),vertexShader:Fe.points_vert,fragmentShader:Fe.points_frag},dashed:{uniforms:Et([se.common,se.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Fe.linedashed_vert,fragmentShader:Fe.linedashed_frag},depth:{uniforms:Et([se.common,se.displacementmap]),vertexShader:Fe.depth_vert,fragmentShader:Fe.depth_frag},normal:{uniforms:Et([se.common,se.bumpmap,se.normalmap,se.displacementmap,{opacity:{value:1}}]),vertexShader:Fe.meshnormal_vert,fragmentShader:Fe.meshnormal_frag},sprite:{uniforms:Et([se.sprite,se.fog]),vertexShader:Fe.sprite_vert,fragmentShader:Fe.sprite_frag},background:{uniforms:{uvTransform:{value:new Oe},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Fe.background_vert,fragmentShader:Fe.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Oe}},vertexShader:Fe.backgroundCube_vert,fragmentShader:Fe.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Fe.cube_vert,fragmentShader:Fe.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Fe.equirect_vert,fragmentShader:Fe.equirect_frag},distanceRGBA:{uniforms:Et([se.common,se.displacementmap,{referencePosition:{value:new P},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Fe.distanceRGBA_vert,fragmentShader:Fe.distanceRGBA_frag},shadow:{uniforms:Et([se.lights,se.fog,{color:{value:new We(0)},opacity:{value:1}}]),vertexShader:Fe.shadow_vert,fragmentShader:Fe.shadow_frag}};tn.physical={uniforms:Et([tn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Oe},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Oe},clearcoatNormalScale:{value:new Be(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Oe},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Oe},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Oe},sheen:{value:0},sheenColor:{value:new We(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Oe},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Oe},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Oe},transmissionSamplerSize:{value:new Be},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Oe},attenuationDistance:{value:0},attenuationColor:{value:new We(0)},specularColor:{value:new We(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Oe},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Oe},anisotropyVector:{value:new Be},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Oe}}]),vertexShader:Fe.meshphysical_vert,fragmentShader:Fe.meshphysical_frag};const dr={r:0,b:0,g:0};const Zn=new an;const Am=new rt;function wm(i,e,t,n,s,r,o){const a=new We(0);let l=r===true?0:1;let c;let h;let u=null;let f=0;let m=null;function g(p,d){let T=false;let x=d.isScene===true?d.background:null;if(x&&x.isTexture){const L=d.backgroundBlurriness>0;x=(L?t:e).get(x)}if(x===null){S(a,l)}else if(x&&x.isColor){S(x,1);T=true}const y=i.xr.getEnvironmentBlendMode();if(y==="additive"){n.buffers.color.setClear(0,0,0,1,o)}else if(y==="alpha-blend"){n.buffers.color.setClear(0,0,0,0,o)}if(i.autoClear||T){i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil)}if(x&&(x.isCubeTexture||x.mapping===Wr)){if(h===void 0){h=new Vt(new ks(1,1,1),new Nt({name:"BackgroundCubeMaterial",uniforms:ns(tn.backgroundCube.uniforms),vertexShader:tn.backgroundCube.vertexShader,fragmentShader:tn.backgroundCube.fragmentShader,side:Rt,depthTest:false,depthWrite:false,fog:false}));h.geometry.deleteAttribute("normal");h.geometry.deleteAttribute("uv");h.onBeforeRender=function(L,w,A){this.matrixWorld.copyPosition(A.matrixWorld)};Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}});s.update(h)}Zn.copy(d.backgroundRotation);Zn.x*=-1;Zn.y*=-1;Zn.z*=-1;if(x.isCubeTexture&&x.isRenderTargetTexture===false){Zn.y*=-1;Zn.z*=-1}h.material.uniforms.envMap.value=x;h.material.uniforms.flipEnvMap.value=x.isCubeTexture&&x.isRenderTargetTexture===false?-1:1;h.material.uniforms.backgroundBlurriness.value=d.backgroundBlurriness;h.material.uniforms.backgroundIntensity.value=d.backgroundIntensity;h.material.uniforms.backgroundRotation.value.setFromMatrix4(Am.makeRotationFromEuler(Zn));h.material.toneMapped=$e.getTransfer(x.colorSpace)!==Je;if(u!==x||f!==x.version||m!==i.toneMapping){h.material.needsUpdate=true;u=x;f=x.version;m=i.toneMapping}h.layers.enableAll();p.unshift(h,h.geometry,h.material,0,0,null)}else if(x&&x.isTexture){if(c===void 0){c=new Vt(new Vs(2,2),new Nt({name:"BackgroundMaterial",uniforms:ns(tn.background.uniforms),vertexShader:tn.background.vertexShader,fragmentShader:tn.background.fragmentShader,side:Hn,depthTest:false,depthWrite:false,fog:false}));c.geometry.deleteAttribute("normal");Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}});s.update(c)}c.material.uniforms.t2D.value=x;c.material.uniforms.backgroundIntensity.value=d.backgroundIntensity;c.material.toneMapped=$e.getTransfer(x.colorSpace)!==Je;if(x.matrixAutoUpdate===true){x.updateMatrix()}c.material.uniforms.uvTransform.value.copy(x.matrix);if(u!==x||f!==x.version||m!==i.toneMapping){c.material.needsUpdate=true;u=x;f=x.version;m=i.toneMapping}c.layers.enableAll();p.unshift(c,c.geometry,c.material,0,0,null)}}function S(p,d){p.getRGB(dr,hh(i));n.buffers.color.setClear(dr.r,dr.g,dr.b,d,o)}return{getClearColor:function(){return a},setClearColor:function(p,d=1){a.set(p);l=d;S(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(p){l=p;S(a,l)},render:g}}function Cm(i,e,t,n){const s=i.getParameter(i.MAX_VERTEX_ATTRIBS);const r=n.isWebGL2?null:e.get("OES_vertex_array_object");const o=n.isWebGL2||r!==null;const a={};const l=p(null);let c=l;let h=false;function u(C,V,H,q,k){let X=false;if(o){const Y=S(q,H,V);if(c!==Y){c=Y;m(c.object)}X=d(C,q,H,k);if(X)T(C,q,H,k)}else{const Y=V.wireframe===true;if(c.geometry!==q.id||c.program!==H.id||c.wireframe!==Y){c.geometry=q.id;c.program=H.id;c.wireframe=Y;X=true}}if(k!==null){t.update(k,i.ELEMENT_ARRAY_BUFFER)}if(X||h){h=false;B(C,V,H,q);if(k!==null){i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.get(k).buffer)}}}function f(){if(n.isWebGL2)return i.createVertexArray();return r.createVertexArrayOES()}function m(C){if(n.isWebGL2)return i.bindVertexArray(C);return r.bindVertexArrayOES(C)}function g(C){if(n.isWebGL2)return i.deleteVertexArray(C);return r.deleteVertexArrayOES(C)}function S(C,V,H){const q=H.wireframe===true;let k=a[C.id];if(k===void 0){k={};a[C.id]=k}let X=k[V.id];if(X===void 0){X={};k[V.id]=X}let Y=X[q];if(Y===void 0){Y=p(f());X[q]=Y}return Y}function p(C){const V=[];const H=[];const q=[];for(let k=0;k<s;k++){V[k]=0;H[k]=0;q[k]=0}return{geometry:null,program:null,wireframe:false,newAttributes:V,enabledAttributes:H,attributeDivisors:q,object:C,attributes:{},index:null}}function d(C,V,H,q){const k=c.attributes;const X=V.attributes;let Y=0;const re=H.getAttributes();for(const de in re){const Re=re[de];if(Re.location>=0){const z=k[de];let K=X[de];if(K===void 0){if(de==="instanceMatrix"&&C.instanceMatrix)K=C.instanceMatrix;if(de==="instanceColor"&&C.instanceColor)K=C.instanceColor}if(z===void 0)return true;if(z.attribute!==K)return true;if(K&&z.data!==K.data)return true;Y++}}if(c.attributesNum!==Y)return true;if(c.index!==q)return true;return false}function T(C,V,H,q){const k={};const X=V.attributes;let Y=0;const re=H.getAttributes();for(const de in re){const Re=re[de];if(Re.location>=0){let z=X[de];if(z===void 0){if(de==="instanceMatrix"&&C.instanceMatrix)z=C.instanceMatrix;if(de==="instanceColor"&&C.instanceColor)z=C.instanceColor}const K={};K.attribute=z;if(z&&z.data){K.data=z.data}k[de]=K;Y++}}c.attributes=k;c.attributesNum=Y;c.index=q}function x(){const C=c.newAttributes;for(let V=0,H=C.length;V<H;V++){C[V]=0}}function y(C){L(C,0)}function L(C,V){const H=c.newAttributes;const q=c.enabledAttributes;const k=c.attributeDivisors;H[C]=1;if(q[C]===0){i.enableVertexAttribArray(C);q[C]=1}if(k[C]!==V){const X=n.isWebGL2?i:e.get("ANGLE_instanced_arrays");X[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](C,V);k[C]=V}}function w(){const C=c.newAttributes;const V=c.enabledAttributes;for(let H=0,q=V.length;H<q;H++){if(V[H]!==C[H]){i.disableVertexAttribArray(H);V[H]=0}}}function A(C,V,H,q,k,X,Y){if(Y===true){i.vertexAttribIPointer(C,V,H,k,X)}else{i.vertexAttribPointer(C,V,H,q,k,X)}}function B(C,V,H,q){if(n.isWebGL2===false&&(C.isInstancedMesh||q.isInstancedBufferGeometry)){if(e.get("ANGLE_instanced_arrays")===null)return}x();const k=q.attributes;const X=H.getAttributes();const Y=V.defaultAttributeValues;for(const re in X){const de=X[re];if(de.location>=0){let Re=k[re];if(Re===void 0){if(re==="instanceMatrix"&&C.instanceMatrix)Re=C.instanceMatrix;if(re==="instanceColor"&&C.instanceColor)Re=C.instanceColor}if(Re!==void 0){const z=Re.normalized;const K=Re.itemSize;const ue=t.get(Re);if(ue===void 0)continue;const Ae=ue.buffer;const _e=ue.type;const fe=ue.bytesPerElement;const je=n.isWebGL2===true&&(_e===i.INT||_e===i.UNSIGNED_INT||Re.gpuType===qc);if(Re.isInterleavedBufferAttribute){const we=Re.data;const U=we.stride;const pt=Re.offset;if(we.isInstancedInterleavedBuffer){for(let xe=0;xe<de.locationSize;xe++){L(de.location+xe,we.meshPerAttribute)}if(C.isInstancedMesh!==true&&q._maxInstanceCount===void 0){q._maxInstanceCount=we.meshPerAttribute*we.count}}else{for(let xe=0;xe<de.locationSize;xe++){y(de.location+xe)}}i.bindBuffer(i.ARRAY_BUFFER,Ae);for(let xe=0;xe<de.locationSize;xe++){A(de.location+xe,K/de.locationSize,_e,z,U*fe,(pt+K/de.locationSize*xe)*fe,je)}}else{if(Re.isInstancedBufferAttribute){for(let we=0;we<de.locationSize;we++){L(de.location+we,Re.meshPerAttribute)}if(C.isInstancedMesh!==true&&q._maxInstanceCount===void 0){q._maxInstanceCount=Re.meshPerAttribute*Re.count}}else{for(let we=0;we<de.locationSize;we++){y(de.location+we)}}i.bindBuffer(i.ARRAY_BUFFER,Ae);for(let we=0;we<de.locationSize;we++){A(de.location+we,K/de.locationSize,_e,z,K*fe,K/de.locationSize*we*fe,je)}}}else if(Y!==void 0){const z=Y[re];if(z!==void 0){switch(z.length){case 2:i.vertexAttrib2fv(de.location,z);break;case 3:i.vertexAttrib3fv(de.location,z);break;case 4:i.vertexAttrib4fv(de.location,z);break;default:i.vertexAttrib1fv(de.location,z)}}}}}w()}function Q(){ee();for(const C in a){const V=a[C];for(const H in V){const q=V[H];for(const k in q){g(q[k].object);delete q[k]}delete V[H]}delete a[C]}}function v(C){if(a[C.id]===void 0)return;const V=a[C.id];for(const H in V){const q=V[H];for(const k in q){g(q[k].object);delete q[k]}delete V[H]}delete a[C.id]}function b(C){for(const V in a){const H=a[V];if(H[C.id]===void 0)continue;const q=H[C.id];for(const k in q){g(q[k].object);delete q[k]}delete H[C.id]}}function ee(){$();h=true;if(c===l)return;c=l;m(c.object)}function $(){l.geometry=null;l.program=null;l.wireframe=false}return{setup:u,reset:ee,resetDefaultState:$,dispose:Q,releaseStatesOfGeometry:v,releaseStatesOfProgram:b,initAttributes:x,enableAttribute:y,disableUnusedAttributes:w}}function Rm(i,e,t,n){const s=n.isWebGL2;let r;function o(h){r=h}function a(h,u){i.drawArrays(r,h,u);t.update(u,r,1)}function l(h,u,f){if(f===0)return;let m,g;if(s){m=i;g="drawArraysInstanced"}else{m=e.get("ANGLE_instanced_arrays");g="drawArraysInstancedANGLE";if(m===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}m[g](r,h,u,f);t.update(u,r,f)}function c(h,u,f){if(f===0)return;const m=e.get("WEBGL_multi_draw");if(m===null){for(let g=0;g<f;g++){this.render(h[g],u[g])}}else{m.multiDrawArraysWEBGL(r,h,0,u,0,f);let g=0;for(let S=0;S<f;S++){g+=u[S]}t.update(g,r,1)}}this.setMode=o;this.render=a;this.renderInstances=l;this.renderMultiDraw=c}function Lm(i,e,t){let n;function s(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===true){const A=e.get("EXT_texture_filter_anisotropic");n=i.getParameter(A.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else{n=0}return n}function r(A){if(A==="highp"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.HIGH_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.HIGH_FLOAT).precision>0){return"highp"}A="mediump"}if(A==="mediump"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.MEDIUM_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.MEDIUM_FLOAT).precision>0){return"mediump"}}return"lowp"}const o=typeof WebGL2RenderingContext!=="undefined"&&i.constructor.name==="WebGL2RenderingContext";let a=t.precision!==void 0?t.precision:"highp";const l=r(a);if(l!==a){console.warn("THREE.WebGLRenderer:",a,"not supported, using",l,"instead.");a=l}const c=o||e.has("WEBGL_draw_buffers");const h=t.logarithmicDepthBuffer===true;const u=i.getParameter(i.MAX_TEXTURE_IMAGE_UNITS);const f=i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS);const m=i.getParameter(i.MAX_TEXTURE_SIZE);const g=i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE);const S=i.getParameter(i.MAX_VERTEX_ATTRIBS);const p=i.getParameter(i.MAX_VERTEX_UNIFORM_VECTORS);const d=i.getParameter(i.MAX_VARYING_VECTORS);const T=i.getParameter(i.MAX_FRAGMENT_UNIFORM_VECTORS);const x=f>0;const y=o||e.has("OES_texture_float");const L=x&&y;const w=o?i.getParameter(i.MAX_SAMPLES):0;return{isWebGL2:o,drawBuffers:c,getMaxAnisotropy:s,getMaxPrecision:r,precision:a,logarithmicDepthBuffer:h,maxTextures:u,maxVertexTextures:f,maxTextureSize:m,maxCubemapSize:g,maxAttributes:S,maxVertexUniforms:p,maxVaryings:d,maxFragmentUniforms:T,vertexTextures:x,floatFragmentTextures:y,floatVertexTextures:L,maxSamples:w}}function Pm(i){const e=this;let t=null,n=0,s=false,r=false;const o=new ti,a=new Oe,l={value:null,needsUpdate:false};this.uniform=l;this.numPlanes=0;this.numIntersection=0;this.init=function(u,f){const m=u.length!==0||f||n!==0||s;s=f;n=u.length;return m};this.beginShadows=function(){r=true;h(null)};this.endShadows=function(){r=false};this.setGlobalState=function(u,f){t=h(u,f,0)};this.setState=function(u,f,m){const g=u.clippingPlanes,S=u.clipIntersection,p=u.clipShadows;const d=i.get(u);if(!s||g===null||g.length===0||r&&!p){if(r){h(null)}else{c()}}else{const T=r?0:n,x=T*4;let y=d.clippingState||null;l.value=y;y=h(g,f,x,m);for(let L=0;L!==x;++L){y[L]=t[L]}d.clippingState=y;this.numIntersection=S?this.numPlanes:0;this.numPlanes+=T}};function c(){if(l.value!==t){l.value=t;l.needsUpdate=n>0}e.numPlanes=n;e.numIntersection=0}function h(u,f,m,g){const S=u!==null?u.length:0;let p=null;if(S!==0){p=l.value;if(g!==true||p===null){const d=m+S*4,T=f.matrixWorldInverse;a.getNormalMatrix(T);if(p===null||p.length<d){p=new Float32Array(d)}for(let x=0,y=m;x!==S;++x,y+=4){o.copy(u[x]).applyMatrix4(T,a);o.normal.toArray(p,y);p[y+3]=o.constant}}l.value=p;l.needsUpdate=true}e.numPlanes=S;e.numIntersection=0;return p}}function Dm(i){let e=new WeakMap;function t(o,a){if(a===ja){o.mapping=Qi}else if(a===$a){o.mapping=es}return o}function n(o){if(o&&o.isTexture){const a=o.mapping;if(a===ja||a===$a){if(e.has(o)){const l=e.get(o).texture;return t(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=new Hd(l.height);c.fromEquirectangularTexture(i,o);e.set(o,c);o.addEventListener("dispose",s);return t(c.texture,o.mapping)}else{return null}}}}return o}function s(o){const a=o.target;a.removeEventListener("dispose",s);const l=e.get(a);if(l!==void 0){e.delete(a);l.dispose()}}function r(){e=new WeakMap}return{get:n,dispose:r}}class mh extends uh{constructor(e=-1,t=1,n=1,s=-1,r=.1,o=2e3){super();this.isOrthographicCamera=true;this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=e;this.right=t;this.top=n;this.bottom=s;this.near=r;this.far=o;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.left=e.left;this.right=e.right;this.top=e.top;this.bottom=e.bottom;this.near=e.near;this.far=e.far;this.zoom=e.zoom;this.view=e.view===null?null:Object.assign({},e.view);return this}setViewOffset(e,t,n,s,r,o){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=s;this.view.width=r;this.view.height=o;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom);const t=(this.top-this.bottom)/(2*this.zoom);const n=(this.right+this.left)/2;const s=(this.top+this.bottom)/2;let r=n-e;let o=n+e;let a=s+t;let l=s-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom;const h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=c*this.view.offsetX;o=r+c*this.view.width;a-=h*this.view.offsetY;l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(r,o,a,l,this.near,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);t.object.zoom=this.zoom;t.object.left=this.left;t.object.right=this.right;t.object.top=this.top;t.object.bottom=this.bottom;t.object.near=this.near;t.object.far=this.far;if(this.view!==null)t.object.view=Object.assign({},this.view);return t}}const Ii=4;const Hl=[.125,.215,.35,.446,.526,.582];const si=20;const La=new mh;const kl=new We;let Pa=null;let Da=0;let Ua=0;const ni=(1+Math.sqrt(5))/2;const Li=1/ni;const Vl=[new P(1,1,1),new P(-1,1,1),new P(1,1,-1),new P(-1,1,-1),new P(0,ni,Li),new P(0,ni,-Li),new P(Li,0,ni),new P(-Li,0,ni),new P(ni,Li,0),new P(-ni,Li,0)];class Wl{constructor(e){this._renderer=e;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,s=100){Pa=this._renderer.getRenderTarget();Da=this._renderer.getActiveCubeFace();Ua=this._renderer.getActiveMipmapLevel();this._setSize(256);const r=this._allocateTargets();r.depthBuffer=true;this._sceneToCubeUV(e,n,s,r);if(t>0){this._blur(r,0,0,t)}this._applyPMREM(r);this._cleanup(r);return r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=Yl();this._compileMaterial(this._cubemapMaterial)}}compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=ql();this._compileMaterial(this._equirectMaterial)}}dispose(){this._dispose();if(this._cubemapMaterial!==null)this._cubemapMaterial.dispose();if(this._equirectMaterial!==null)this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){if(this._blurMaterial!==null)this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++){this._lodPlanes[e].dispose()}}_cleanup(e){this._renderer.setRenderTarget(Pa,Da,Ua);e.scissorTest=false;fr(e,0,0,e.width,e.height)}_fromTexture(e,t){if(e.mapping===Qi||e.mapping===es){this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width)}else{this._setSize(e.image.width/4)}Pa=this._renderer.getRenderTarget();Da=this._renderer.getActiveCubeFace();Ua=this._renderer.getActiveMipmapLevel();const n=t||this._allocateTargets();this._textureToCubeUV(e,n);this._applyPMREM(n);this._cleanup(n);return n}_allocateTargets(){const e=3*Math.max(this._cubeSize,16*7);const t=4*this._cubeSize;const n={magFilter:wt,minFilter:wt,generateMipmaps:false,type:kn,format:Zt,colorSpace:Vn,depthBuffer:false};const s=Xl(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){if(this._pingPongRenderTarget!==null){this._dispose()}this._pingPongRenderTarget=Xl(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Um(r));this._blurMaterial=Im(r,e,t)}return s}_compileMaterial(e){const t=new Vt(this._lodPlanes[0],e);this._renderer.compile(t,La)}_sceneToCubeUV(e,t,n,s){const r=90;const o=1;const a=new kt(r,o,t,n);const l=[1,-1,1,1,1,1];const c=[1,1,1,-1,-1,-1];const h=this._renderer;const u=h.autoClear;const f=h.toneMapping;h.getClearColor(kl);h.toneMapping=On;h.autoClear=false;const m=new xo({name:"PMREM.Background",side:Rt,depthWrite:false,depthTest:false});const g=new Vt(new ks,m);let S=false;const p=e.background;if(p){if(p.isColor){m.color.copy(p);e.background=null;S=true}}else{m.color.copy(kl);S=true}for(let d=0;d<6;d++){const T=d%3;if(T===0){a.up.set(0,l[d],0);a.lookAt(c[d],0,0)}else if(T===1){a.up.set(0,0,l[d]);a.lookAt(0,c[d],0)}else{a.up.set(0,l[d],0);a.lookAt(0,0,c[d])}const x=this._cubeSize;fr(s,T*x,d>2?x:0,x,x);h.setRenderTarget(s);if(S){h.render(g,a)}h.render(e,a)}g.geometry.dispose();g.material.dispose();h.toneMapping=f;h.autoClear=u;e.background=p}_textureToCubeUV(e,t){const n=this._renderer;const s=e.mapping===Qi||e.mapping===es;if(s){if(this._cubemapMaterial===null){this._cubemapMaterial=Yl()}this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===false?-1:1}else{if(this._equirectMaterial===null){this._equirectMaterial=ql()}}const r=s?this._cubemapMaterial:this._equirectMaterial;const o=new Vt(this._lodPlanes[0],r);const a=r.uniforms;a["envMap"].value=e;const l=this._cubeSize;fr(t,0,0,3*l,2*l);n.setRenderTarget(t);n.render(o,La)}_applyPMREM(e){const t=this._renderer;const n=t.autoClear;t.autoClear=false;for(let s=1;s<this._lodPlanes.length;s++){const r=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]);const o=Vl[(s-1)%Vl.length];this._blur(e,s-1,s,r,o)}t.autoClear=n}_blur(e,t,n,s,r){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,s,"latitudinal",r);this._halfBlur(o,e,n,n,s,"longitudinal",r)}_halfBlur(e,t,n,s,r,o,a){const l=this._renderer;const c=this._blurMaterial;if(o!=="latitudinal"&&o!=="longitudinal"){console.error("blur direction must be either latitudinal or longitudinal!")}const h=3;const u=new Vt(this._lodPlanes[s],c);const f=c.uniforms;const m=this._sizeLods[n]-1;const g=isFinite(r)?Math.PI/(2*m):2*Math.PI/(2*si-1);const S=r/g;const p=isFinite(r)?1+Math.floor(h*S):si;if(p>si){console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${p} samples when the maximum is set to ${si}`)}const d=[];let T=0;for(let A=0;A<si;++A){const B=A/S;const Q=Math.exp(-B*B/2);d.push(Q);if(A===0){T+=Q}else if(A<p){T+=2*Q}}for(let A=0;A<d.length;A++){d[A]=d[A]/T}f["envMap"].value=e.texture;f["samples"].value=p;f["weights"].value=d;f["latitudinal"].value=o==="latitudinal";if(a){f["poleAxis"].value=a}const{_lodMax:x}=this;f["dTheta"].value=g;f["mipInt"].value=x-n;const y=this._sizeLods[s];const L=3*y*(s>x-Ii?s-x+Ii:0);const w=4*(this._cubeSize-y);fr(t,L,w,3*y,2*y);l.setRenderTarget(t);l.render(u,La)}}function Um(i){const e=[];const t=[];const n=[];let s=i;const r=i-Ii+1+Hl.length;for(let o=0;o<r;o++){const a=Math.pow(2,s);t.push(a);let l=1/a;if(o>i-Ii){l=Hl[o-i+Ii-1]}else if(o===0){l=0}n.push(l);const c=1/(a-2);const h=-c;const u=1+c;const f=[h,h,u,h,u,u,h,h,u,u,h,u];const m=6;const g=6;const S=3;const p=2;const d=1;const T=new Float32Array(S*g*m);const x=new Float32Array(p*g*m);const y=new Float32Array(d*g*m);for(let w=0;w<m;w++){const A=w%3*2/3-1;const B=w>2?0:-1;const Q=[A,B,0,A+2/3,B,0,A+2/3,B+1,0,A,B,0,A+2/3,B+1,0,A,B+1,0];T.set(Q,S*g*w);x.set(f,p*g*w);const v=[w,w,w,w,w,w];y.set(v,d*g*w)}const L=new Pt;L.setAttribute("position",new sn(T,S));L.setAttribute("uv",new sn(x,p));L.setAttribute("faceIndex",new sn(y,d));e.push(L);if(s>Ii){s--}}return{lodPlanes:e,sizeLods:t,sigmas:n}}function Xl(i,e,t){const n=new rn(i,e,t);n.texture.mapping=Wr;n.texture.name="PMREM.cubeUv";n.scissorTest=true;return n}function fr(i,e,t,n,s){i.viewport.set(e,t,n,s);i.scissor.set(e,t,n,s)}function Im(i,e,t){const n=new Float32Array(si);const s=new P(0,1,0);const r=new Nt({name:"SphericalGaussianBlur",defines:{"n":si,"CUBEUV_TEXEL_WIDTH":1/e,"CUBEUV_TEXEL_HEIGHT":1/t,"CUBEUV_MAX_MIP":`${i}.0`},uniforms:{"envMap":{value:null},"samples":{value:1},"weights":{value:n},"latitudinal":{value:false},"dTheta":{value:0},"mipInt":{value:0},"poleAxis":{value:s}},vertexShader:So(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:yn,depthTest:false,depthWrite:false});return r}function ql(){return new Nt({name:"EquirectangularToCubeUV",uniforms:{"envMap":{value:null}},vertexShader:So(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:yn,depthTest:false,depthWrite:false})}function Yl(){return new Nt({name:"CubemapToCubeUV",uniforms:{"envMap":{value:null},"flipEnvMap":{value:-1}},vertexShader:So(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:yn,depthTest:false,depthWrite:false})}function So(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Nm(i){let e=new WeakMap;let t=null;function n(a){if(a&&a.isTexture){const l=a.mapping;const c=l===ja||l===$a;const h=l===Qi||l===es;if(c||h){if(a.isRenderTargetTexture&&a.needsPMREMUpdate===true){a.needsPMREMUpdate=false;let u=e.get(a);if(t===null)t=new Wl(i);u=c?t.fromEquirectangular(a,u):t.fromCubemap(a,u);e.set(a,u);return u.texture}else{if(e.has(a)){return e.get(a).texture}else{const u=a.image;if(c&&u&&u.height>0||h&&u&&s(u)){if(t===null)t=new Wl(i);const f=c?t.fromEquirectangular(a):t.fromCubemap(a);e.set(a,f);a.addEventListener("dispose",r);return f.texture}else{return null}}}}}return a}function s(a){let l=0;const c=6;for(let h=0;h<c;h++){if(a[h]!==void 0)l++}return l===c}function r(a){const l=a.target;l.removeEventListener("dispose",r);const c=e.get(l);if(c!==void 0){e.delete(l);c.dispose()}}function o(){e=new WeakMap;if(t!==null){t.dispose();t=null}}return{get:n,dispose:o}}function Fm(i){const e={};function t(n){if(e[n]!==void 0){return e[n]}let s;switch(n){case"WEBGL_depth_texture":s=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=i.getExtension(n)}e[n]=s;return s}return{has:function(n){return t(n)!==null},init:function(n){if(n.isWebGL2){t("EXT_color_buffer_float");t("WEBGL_clip_cull_distance")}else{t("WEBGL_depth_texture");t("OES_texture_float");t("OES_texture_half_float");t("OES_texture_half_float_linear");t("OES_standard_derivatives");t("OES_element_index_uint");t("OES_vertex_array_object");t("ANGLE_instanced_arrays")}t("OES_texture_float_linear");t("EXT_color_buffer_half_float");t("WEBGL_multisampled_render_to_texture")},get:function(n){const s=t(n);if(s===null){console.warn("THREE.WebGLRenderer: "+n+" extension not supported.")}return s}}}function Om(i,e,t,n){const s={};const r=new WeakMap;function o(u){const f=u.target;if(f.index!==null){e.remove(f.index)}for(const g in f.attributes){e.remove(f.attributes[g])}for(const g in f.morphAttributes){const S=f.morphAttributes[g];for(let p=0,d=S.length;p<d;p++){e.remove(S[p])}}f.removeEventListener("dispose",o);delete s[f.id];const m=r.get(f);if(m){e.remove(m);r.delete(f)}n.releaseStatesOfGeometry(f);if(f.isInstancedBufferGeometry===true){delete f._maxInstanceCount}t.memory.geometries--}function a(u,f){if(s[f.id]===true)return f;f.addEventListener("dispose",o);s[f.id]=true;t.memory.geometries++;return f}function l(u){const f=u.attributes;for(const g in f){e.update(f[g],i.ARRAY_BUFFER)}const m=u.morphAttributes;for(const g in m){const S=m[g];for(let p=0,d=S.length;p<d;p++){e.update(S[p],i.ARRAY_BUFFER)}}}function c(u){const f=[];const m=u.index;const g=u.attributes.position;let S=0;if(m!==null){const T=m.array;S=m.version;for(let x=0,y=T.length;x<y;x+=3){const L=T[x+0];const w=T[x+1];const A=T[x+2];f.push(L,w,w,A,A,L)}}else if(g!==void 0){const T=g.array;S=g.version;for(let x=0,y=T.length/3-1;x<y;x+=3){const L=x+0;const w=x+1;const A=x+2;f.push(L,w,w,A,A,L)}}else{return}const p=new(th(f)?ch:lh)(f,1);p.version=S;const d=r.get(u);if(d)e.remove(d);r.set(u,p)}function h(u){const f=r.get(u);if(f){const m=u.index;if(m!==null){if(f.version<m.version){c(u)}}}else{c(u)}return r.get(u)}return{get:a,update:l,getWireframeAttribute:h}}function Bm(i,e,t,n){const s=n.isWebGL2;let r;function o(m){r=m}let a,l;function c(m){a=m.type;l=m.bytesPerElement}function h(m,g){i.drawElements(r,g,a,m*l);t.update(g,r,1)}function u(m,g,S){if(S===0)return;let p,d;if(s){p=i;d="drawElementsInstanced"}else{p=e.get("ANGLE_instanced_arrays");d="drawElementsInstancedANGLE";if(p===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}p[d](r,g,a,m*l,S);t.update(g,r,S)}function f(m,g,S){if(S===0)return;const p=e.get("WEBGL_multi_draw");if(p===null){for(let d=0;d<S;d++){this.render(m[d]/l,g[d])}}else{p.multiDrawElementsWEBGL(r,g,0,a,m,0,S);let d=0;for(let T=0;T<S;T++){d+=g[T]}t.update(d,r,1)}}this.setMode=o;this.setIndex=c;this.render=h;this.renderInstances=u;this.renderMultiDraw=f}function zm(i){const e={geometries:0,textures:0};const t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,o,a){t.calls++;switch(o){case i.TRIANGLES:t.triangles+=a*(r/3);break;case i.LINES:t.lines+=a*(r/2);break;case i.LINE_STRIP:t.lines+=a*(r-1);break;case i.LINE_LOOP:t.lines+=a*r;break;case i.POINTS:t.points+=a*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function s(){t.calls=0;t.triangles=0;t.points=0;t.lines=0}return{memory:e,render:t,programs:null,autoReset:true,reset:s,update:n}}function Gm(i,e){return i[0]-e[0]}function Hm(i,e){return Math.abs(e[1])-Math.abs(i[1])}function km(i,e,t){const n={};const s=new Float32Array(8);const r=new WeakMap;const o=new gt;const a=[];for(let c=0;c<8;c++){a[c]=[c,0]}function l(c,h,u){const f=c.morphTargetInfluences;if(e.isWebGL2===true){const g=h.morphAttributes.position||h.morphAttributes.normal||h.morphAttributes.color;const S=g!==void 0?g.length:0;let p=r.get(h);if(p===void 0||p.count!==S){let $=function(){b.dispose();r.delete(h);h.removeEventListener("dispose",$)};var m=$;if(p!==void 0)p.texture.dispose();const d=h.morphAttributes.position!==void 0;const T=h.morphAttributes.normal!==void 0;const x=h.morphAttributes.color!==void 0;const y=h.morphAttributes.position||[];const L=h.morphAttributes.normal||[];const w=h.morphAttributes.color||[];let A=0;if(d===true)A=1;if(T===true)A=2;if(x===true)A=3;let B=h.attributes.position.count*A;let Q=1;if(B>e.maxTextureSize){Q=Math.ceil(B/e.maxTextureSize);B=e.maxTextureSize}const v=new Float32Array(B*Q*4*S);const b=new sh(v,B,Q,S);b.type=Mn;b.needsUpdate=true;const ee=A*4;for(let C=0;C<S;C++){const V=y[C];const H=L[C];const q=w[C];const k=B*Q*4*C;for(let X=0;X<V.count;X++){const Y=X*ee;if(d===true){o.fromBufferAttribute(V,X);v[k+Y+0]=o.x;v[k+Y+1]=o.y;v[k+Y+2]=o.z;v[k+Y+3]=0}if(T===true){o.fromBufferAttribute(H,X);v[k+Y+4]=o.x;v[k+Y+5]=o.y;v[k+Y+6]=o.z;v[k+Y+7]=0}if(x===true){o.fromBufferAttribute(q,X);v[k+Y+8]=o.x;v[k+Y+9]=o.y;v[k+Y+10]=o.z;v[k+Y+11]=q.itemSize===4?o.w:1}}}p={count:S,texture:b,size:new Be(B,Q)};r.set(h,p);h.addEventListener("dispose",$)}if(c.isInstancedMesh===true&&c.morphTexture!==null){u.getUniforms().setValue(i,"morphTexture",c.morphTexture,t)}else{let d=0;for(let x=0;x<f.length;x++){d+=f[x]}const T=h.morphTargetsRelative?1:1-d;u.getUniforms().setValue(i,"morphTargetBaseInfluence",T);u.getUniforms().setValue(i,"morphTargetInfluences",f)}u.getUniforms().setValue(i,"morphTargetsTexture",p.texture,t);u.getUniforms().setValue(i,"morphTargetsTextureSize",p.size)}else{const g=f===void 0?0:f.length;let S=n[h.id];if(S===void 0||S.length!==g){S=[];for(let y=0;y<g;y++){S[y]=[y,0]}n[h.id]=S}for(let y=0;y<g;y++){const L=S[y];L[0]=y;L[1]=f[y]}S.sort(Hm);for(let y=0;y<8;y++){if(y<g&&S[y][1]){a[y][0]=S[y][0];a[y][1]=S[y][1]}else{a[y][0]=Number.MAX_SAFE_INTEGER;a[y][1]=0}}a.sort(Gm);const p=h.morphAttributes.position;const d=h.morphAttributes.normal;let T=0;for(let y=0;y<8;y++){const L=a[y];const w=L[0];const A=L[1];if(w!==Number.MAX_SAFE_INTEGER&&A){if(p&&h.getAttribute("morphTarget"+y)!==p[w]){h.setAttribute("morphTarget"+y,p[w])}if(d&&h.getAttribute("morphNormal"+y)!==d[w]){h.setAttribute("morphNormal"+y,d[w])}s[y]=A;T+=A}else{if(p&&h.hasAttribute("morphTarget"+y)===true){h.deleteAttribute("morphTarget"+y)}if(d&&h.hasAttribute("morphNormal"+y)===true){h.deleteAttribute("morphNormal"+y)}s[y]=0}}const x=h.morphTargetsRelative?1:1-T;u.getUniforms().setValue(i,"morphTargetBaseInfluence",x);u.getUniforms().setValue(i,"morphTargetInfluences",s)}}return{update:l}}function Vm(i,e,t,n){let s=new WeakMap;function r(l){const c=n.render.frame;const h=l.geometry;const u=e.get(l,h);if(s.get(u)!==c){e.update(u);s.set(u,c)}if(l.isInstancedMesh){if(l.hasEventListener("dispose",a)===false){l.addEventListener("dispose",a)}if(s.get(l)!==c){t.update(l.instanceMatrix,i.ARRAY_BUFFER);if(l.instanceColor!==null){t.update(l.instanceColor,i.ARRAY_BUFFER)}s.set(l,c)}}if(l.isSkinnedMesh){const f=l.skeleton;if(s.get(f)!==c){f.update();s.set(f,c)}}return u}function o(){s=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a);t.remove(c.instanceMatrix);if(c.instanceColor!==null)t.remove(c.instanceColor)}return{update:r,dispose:o}}class gh extends Tt{constructor(e,t,n,s,r,o,a,l,c,h){h=h!==void 0?h:di;if(h!==di&&h!==ts){throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")}if(n===void 0&&h===di)n=Nn;if(n===void 0&&h===ts)n=ui;super(null,s,r,o,a,l,h,n,c);this.isDepthTexture=true;this.image={width:e,height:t};this.magFilter=a!==void 0?a:yt;this.minFilter=l!==void 0?l:yt;this.flipY=false;this.generateMipmaps=false;this.compareFunction=null}copy(e){super.copy(e);this.compareFunction=e.compareFunction;return this}toJSON(e){const t=super.toJSON(e);if(this.compareFunction!==null)t.compareFunction=this.compareFunction;return t}}const _h=new Tt;const vh=new gh(1,1);vh.compareFunction=eh;const xh=new sh;const Sh=new bd;const Mh=new dh;const jl=[];const $l=[];const Kl=new Float32Array(16);const Zl=new Float32Array(9);const Jl=new Float32Array(4);function ls(i,e,t){const n=i[0];if(n<=0||n>0)return i;const s=e*t;let r=jl[s];if(r===void 0){r=new Float32Array(s);jl[s]=r}if(e!==0){n.toArray(r,0);for(let o=1,a=0;o!==e;++o){a+=t;i[o].toArray(r,a)}}return r}function ct(i,e){if(i.length!==e.length)return false;for(let t=0,n=i.length;t<n;t++){if(i[t]!==e[t])return false}return true}function ht(i,e){for(let t=0,n=e.length;t<n;t++){i[t]=e[t]}}function Yr(i,e){let t=$l[e];if(t===void 0){t=new Int32Array(e);$l[e]=t}for(let n=0;n!==e;++n){t[n]=i.allocateTextureUnit()}return t}function Wm(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1f(this.addr,e);t[0]=e}function Xm(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2f(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(ct(t,e))return;i.uniform2fv(this.addr,e);ht(t,e)}}function qm(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3f(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else if(e.r!==void 0){if(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b){i.uniform3f(this.addr,e.r,e.g,e.b);t[0]=e.r;t[1]=e.g;t[2]=e.b}}else{if(ct(t,e))return;i.uniform3fv(this.addr,e);ht(t,e)}}function Ym(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4f(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(ct(t,e))return;i.uniform4fv(this.addr,e);ht(t,e)}}function jm(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(ct(t,e))return;i.uniformMatrix2fv(this.addr,false,e);ht(t,e)}else{if(ct(t,n))return;Jl.set(n);i.uniformMatrix2fv(this.addr,false,Jl);ht(t,n)}}function $m(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(ct(t,e))return;i.uniformMatrix3fv(this.addr,false,e);ht(t,e)}else{if(ct(t,n))return;Zl.set(n);i.uniformMatrix3fv(this.addr,false,Zl);ht(t,n)}}function Km(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(ct(t,e))return;i.uniformMatrix4fv(this.addr,false,e);ht(t,e)}else{if(ct(t,n))return;Kl.set(n);i.uniformMatrix4fv(this.addr,false,Kl);ht(t,n)}}function Zm(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1i(this.addr,e);t[0]=e}function Jm(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2i(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(ct(t,e))return;i.uniform2iv(this.addr,e);ht(t,e)}}function Qm(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3i(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else{if(ct(t,e))return;i.uniform3iv(this.addr,e);ht(t,e)}}function eg(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4i(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(ct(t,e))return;i.uniform4iv(this.addr,e);ht(t,e)}}function tg(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1ui(this.addr,e);t[0]=e}function ng(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2ui(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(ct(t,e))return;i.uniform2uiv(this.addr,e);ht(t,e)}}function ig(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3ui(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else{if(ct(t,e))return;i.uniform3uiv(this.addr,e);ht(t,e)}}function sg(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4ui(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(ct(t,e))return;i.uniform4uiv(this.addr,e);ht(t,e)}}function rg(i,e,t){const n=this.cache;const s=t.allocateTextureUnit();if(n[0]!==s){i.uniform1i(this.addr,s);n[0]=s}const r=this.type===i.SAMPLER_2D_SHADOW?vh:_h;t.setTexture2D(e||r,s)}function ag(i,e,t){const n=this.cache;const s=t.allocateTextureUnit();if(n[0]!==s){i.uniform1i(this.addr,s);n[0]=s}t.setTexture3D(e||Sh,s)}function og(i,e,t){const n=this.cache;const s=t.allocateTextureUnit();if(n[0]!==s){i.uniform1i(this.addr,s);n[0]=s}t.setTextureCube(e||Mh,s)}function lg(i,e,t){const n=this.cache;const s=t.allocateTextureUnit();if(n[0]!==s){i.uniform1i(this.addr,s);n[0]=s}t.setTexture2DArray(e||xh,s)}function cg(i){switch(i){case 5126:return Wm;case 35664:return Xm;case 35665:return qm;case 35666:return Ym;case 35674:return jm;case 35675:return $m;case 35676:return Km;case 5124:case 35670:return Zm;case 35667:case 35671:return Jm;case 35668:case 35672:return Qm;case 35669:case 35673:return eg;case 5125:return tg;case 36294:return ng;case 36295:return ig;case 36296:return sg;case 35678:case 36198:case 36298:case 36306:case 35682:return rg;case 35679:case 36299:case 36307:return ag;case 35680:case 36300:case 36308:case 36293:return og;case 36289:case 36303:case 36311:case 36292:return lg}}function hg(i,e){i.uniform1fv(this.addr,e)}function ug(i,e){const t=ls(e,this.size,2);i.uniform2fv(this.addr,t)}function dg(i,e){const t=ls(e,this.size,3);i.uniform3fv(this.addr,t)}function fg(i,e){const t=ls(e,this.size,4);i.uniform4fv(this.addr,t)}function pg(i,e){const t=ls(e,this.size,4);i.uniformMatrix2fv(this.addr,false,t)}function mg(i,e){const t=ls(e,this.size,9);i.uniformMatrix3fv(this.addr,false,t)}function gg(i,e){const t=ls(e,this.size,16);i.uniformMatrix4fv(this.addr,false,t)}function _g(i,e){i.uniform1iv(this.addr,e)}function vg(i,e){i.uniform2iv(this.addr,e)}function xg(i,e){i.uniform3iv(this.addr,e)}function Sg(i,e){i.uniform4iv(this.addr,e)}function Mg(i,e){i.uniform1uiv(this.addr,e)}function Eg(i,e){i.uniform2uiv(this.addr,e)}function yg(i,e){i.uniform3uiv(this.addr,e)}function Tg(i,e){i.uniform4uiv(this.addr,e)}function bg(i,e,t){const n=this.cache;const s=e.length;const r=Yr(t,s);if(!ct(n,r)){i.uniform1iv(this.addr,r);ht(n,r)}for(let o=0;o!==s;++o){t.setTexture2D(e[o]||_h,r[o])}}function Ag(i,e,t){const n=this.cache;const s=e.length;const r=Yr(t,s);if(!ct(n,r)){i.uniform1iv(this.addr,r);ht(n,r)}for(let o=0;o!==s;++o){t.setTexture3D(e[o]||Sh,r[o])}}function wg(i,e,t){const n=this.cache;const s=e.length;const r=Yr(t,s);if(!ct(n,r)){i.uniform1iv(this.addr,r);ht(n,r)}for(let o=0;o!==s;++o){t.setTextureCube(e[o]||Mh,r[o])}}function Cg(i,e,t){const n=this.cache;const s=e.length;const r=Yr(t,s);if(!ct(n,r)){i.uniform1iv(this.addr,r);ht(n,r)}for(let o=0;o!==s;++o){t.setTexture2DArray(e[o]||xh,r[o])}}function Rg(i){switch(i){case 5126:return hg;case 35664:return ug;case 35665:return dg;case 35666:return fg;case 35674:return pg;case 35675:return mg;case 35676:return gg;case 5124:case 35670:return _g;case 35667:case 35671:return vg;case 35668:case 35672:return xg;case 35669:case 35673:return Sg;case 5125:return Mg;case 36294:return Eg;case 36295:return yg;case 36296:return Tg;case 35678:case 36198:case 36298:case 36306:case 35682:return bg;case 35679:case 36299:case 36307:return Ag;case 35680:case 36300:case 36308:case 36293:return wg;case 36289:case 36303:case 36311:case 36292:return Cg}}class Lg{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.setValue=cg(t.type)}}class Pg{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.size=t.size;this.setValue=Rg(t.type)}}class Dg{constructor(e){this.id=e;this.seq=[];this.map={}}setValue(e,t,n){const s=this.seq;for(let r=0,o=s.length;r!==o;++r){const a=s[r];a.setValue(e,t[a.id],n)}}}const Ia=/(\w+)(\])?(\[|\.)?/g;function Ql(i,e){i.seq.push(e);i.map[e.id]=e}function Ug(i,e,t){const n=i.name,s=n.length;Ia.lastIndex=0;while(true){const r=Ia.exec(n),o=Ia.lastIndex;let a=r[1];const l=r[2]==="]",c=r[3];if(l)a=a|0;if(c===void 0||c==="["&&o+2===s){Ql(t,c===void 0?new Lg(a,i,e):new Pg(a,i,e));break}else{const h=t.map;let u=h[a];if(u===void 0){u=new Dg(a);Ql(t,u)}t=u}}}class Sr{constructor(e,t){this.seq=[];this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<n;++s){const r=e.getActiveUniform(t,s),o=e.getUniformLocation(t,r.name);Ug(r,o,this)}}setValue(e,t,n,s){const r=this.map[t];if(r!==void 0)r.setValue(e,n,s)}setOptional(e,t,n){const s=t[n];if(s!==void 0)this.setValue(e,n,s)}static upload(e,t,n,s){for(let r=0,o=t.length;r!==o;++r){const a=t[r],l=n[a.id];if(l.needsUpdate!==false){a.setValue(e,l.value,s)}}}static seqWithValue(e,t){const n=[];for(let s=0,r=e.length;s!==r;++s){const o=e[s];if(o.id in t)n.push(o)}return n}}function ec(i,e,t){const n=i.createShader(e);i.shaderSource(n,t);i.compileShader(n);return n}const Ig=37297;let Ng=0;function Fg(i,e){const t=i.split("\n");const n=[];const s=Math.max(e-6,0);const r=Math.min(e+6,t.length);for(let o=s;o<r;o++){const a=o+1;n.push(`${a===e?">":" "} ${a}: ${t[o]}`)}return n.join("\n")}function Og(i){const e=$e.getPrimaries($e.workingColorSpace);const t=$e.getPrimaries(i);let n;if(e===t){n=""}else if(e===Lr&&t===Rr){n="LinearDisplayP3ToLinearSRGB"}else if(e===Rr&&t===Lr){n="LinearSRGBToLinearDisplayP3"}switch(i){case Vn:case Xr:return[n,"LinearTransferOETF"];case Qt:case vo:return[n,"sRGBTransferOETF"];default:console.warn("THREE.WebGLProgram: Unsupported color space:",i);return[n,"LinearTransferOETF"]}}function tc(i,e,t){const n=i.getShaderParameter(e,i.COMPILE_STATUS);const s=i.getShaderInfoLog(e).trim();if(n&&s==="")return"";const r=/ERROR: 0:(\d+)/.exec(s);if(r){const o=parseInt(r[1]);return t.toUpperCase()+"\n\n"+s+"\n\n"+Fg(i.getShaderSource(e),o)}else{return s}}function Bg(i,e){const t=Og(e);return`vec4 ${i}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`}function zg(i,e){let t;switch(e){case zc:t="Linear";break;case Gc:t="Reinhard";break;case Hc:t="OptimizedCineon";break;case kc:t="ACESFilmic";break;case Vc:t="AgX";break;case Wc:t="Neutral";break;case Qu:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e);t="Linear"}return"vec3 "+i+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function Gg(i){const e=[i.extensionDerivatives||!!i.envMapCubeUVHeight||i.bumpMap||i.normalMapTangentSpace||i.clearcoatNormalMap||i.flatShading||i.alphaToCoverage||i.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(i.extensionFragDepth||i.logarithmicDepthBuffer)&&i.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",i.extensionDrawBuffers&&i.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(i.extensionShaderTextureLOD||i.envMap||i.transmission)&&i.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return e.filter(Ni).join("\n")}function Hg(i){const e=[i.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",i.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""];return e.filter(Ni).join("\n")}function kg(i){const e=[];for(const t in i){const n=i[t];if(n===false)continue;e.push("#define "+t+" "+n)}return e.join("\n")}function Vg(i,e){const t={};const n=i.getProgramParameter(e,i.ACTIVE_ATTRIBUTES);for(let s=0;s<n;s++){const r=i.getActiveAttrib(e,s);const o=r.name;let a=1;if(r.type===i.FLOAT_MAT2)a=2;if(r.type===i.FLOAT_MAT3)a=3;if(r.type===i.FLOAT_MAT4)a=4;t[o]={type:r.type,location:i.getAttribLocation(e,o),locationSize:a}}return t}function Ni(i){return i!==""}function nc(i,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function ic(i,e){return i.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Wg=/^[ \t]*#include +<([\w\d./]+)>/gm;function to(i){return i.replace(Wg,qg)}const Xg=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function qg(i,e){let t=Fe[e];if(t===void 0){const n=Xg.get(e);if(n!==void 0){t=Fe[n];console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n)}else{throw new Error("Can not resolve #include <"+e+">")}}return to(t)}const Yg=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function sc(i){return i.replace(Yg,jg)}function jg(i,e,t,n){let s="";for(let r=parseInt(e);r<parseInt(t);r++){s+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r)}return s}function rc(i){let e=`precision ${i.precision} float;
	precision ${i.precision} int;
	precision ${i.precision} sampler2D;
	precision ${i.precision} samplerCube;
	`;if(i.isWebGL2){e+=`precision ${i.precision} sampler3D;
		precision ${i.precision} sampler2DArray;
		precision ${i.precision} sampler2DShadow;
		precision ${i.precision} samplerCubeShadow;
		precision ${i.precision} sampler2DArrayShadow;
		precision ${i.precision} isampler2D;
		precision ${i.precision} isampler3D;
		precision ${i.precision} isamplerCube;
		precision ${i.precision} isampler2DArray;
		precision ${i.precision} usampler2D;
		precision ${i.precision} usampler3D;
		precision ${i.precision} usamplerCube;
		precision ${i.precision} usampler2DArray;
		`}if(i.precision==="highp"){e+="\n#define HIGH_PRECISION"}else if(i.precision==="mediump"){e+="\n#define MEDIUM_PRECISION"}else if(i.precision==="lowp"){e+="\n#define LOW_PRECISION"}return e}function $g(i){let e="SHADOWMAP_TYPE_BASIC";if(i.shadowMapType===Bc){e="SHADOWMAP_TYPE_PCF"}else if(i.shadowMapType===wu){e="SHADOWMAP_TYPE_PCF_SOFT"}else if(i.shadowMapType===fn){e="SHADOWMAP_TYPE_VSM"}return e}function Kg(i){let e="ENVMAP_TYPE_CUBE";if(i.envMap){switch(i.envMapMode){case Qi:case es:e="ENVMAP_TYPE_CUBE";break;case Wr:e="ENVMAP_TYPE_CUBE_UV";break}}return e}function Zg(i){let e="ENVMAP_MODE_REFLECTION";if(i.envMap){switch(i.envMapMode){case es:e="ENVMAP_MODE_REFRACTION";break}}return e}function Jg(i){let e="ENVMAP_BLENDING_NONE";if(i.envMap){switch(i.combine){case go:e="ENVMAP_BLENDING_MULTIPLY";break;case Zu:e="ENVMAP_BLENDING_MIX";break;case Ju:e="ENVMAP_BLENDING_ADD";break}}return e}function Qg(i){const e=i.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2;const n=1/e;const s=1/(3*Math.max(Math.pow(2,t),7*16));return{texelWidth:s,texelHeight:n,maxMip:t}}function e_(i,e,t,n){const s=i.getContext();const r=t.defines;let o=t.vertexShader;let a=t.fragmentShader;const l=$g(t);const c=Kg(t);const h=Zg(t);const u=Jg(t);const f=Qg(t);const m=t.isWebGL2?"":Gg(t);const g=Hg(t);const S=kg(r);const p=s.createProgram();let d,T;let x=t.glslVersion?"#version "+t.glslVersion+"\n":"";if(t.isRawShaderMaterial){d=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,S].filter(Ni).join("\n");if(d.length>0){d+="\n"}T=[m,"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,S].filter(Ni).join("\n");if(T.length>0){T+="\n"}}else{d=[rc(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,S,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+h:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===false?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===false?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(Ni).join("\n");T=[m,rc(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,S,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+h:"",t.envMap?"#define "+u:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===false?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==On?"#define TONE_MAPPING":"",t.toneMapping!==On?Fe["tonemapping_pars_fragment"]:"",t.toneMapping!==On?zg("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Fe["colorspace_pars_fragment"],Bg("linearToOutputTexel",t.outputColorSpace),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"","\n"].filter(Ni).join("\n")}o=to(o);o=nc(o,t);o=ic(o,t);a=to(a);a=nc(a,t);a=ic(a,t);o=sc(o);a=sc(a);if(t.isWebGL2&&t.isRawShaderMaterial!==true){x="#version 300 es\n";d=[g,"precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+d;T=["precision mediump sampler2DArray;","#define varying in",t.glslVersion===Ml?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Ml?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+T}const y=x+d+o;const L=x+T+a;const w=ec(s,s.VERTEX_SHADER,y);const A=ec(s,s.FRAGMENT_SHADER,L);s.attachShader(p,w);s.attachShader(p,A);if(t.index0AttributeName!==void 0){s.bindAttribLocation(p,0,t.index0AttributeName)}else if(t.morphTargets===true){s.bindAttribLocation(p,0,"position")}s.linkProgram(p);function B(ee){if(i.debug.checkShaderErrors){const $=s.getProgramInfoLog(p).trim();const C=s.getShaderInfoLog(w).trim();const V=s.getShaderInfoLog(A).trim();let H=true;let q=true;if(s.getProgramParameter(p,s.LINK_STATUS)===false){H=false;if(typeof i.debug.onShaderError==="function"){i.debug.onShaderError(s,p,w,A)}else{const k=tc(s,w,"vertex");const X=tc(s,A,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(p,s.VALIDATE_STATUS)+"\n\nMaterial Name: "+ee.name+"\nMaterial Type: "+ee.type+"\n\nProgram Info Log: "+$+"\n"+k+"\n"+X)}}else if($!==""){console.warn("THREE.WebGLProgram: Program Info Log:",$)}else if(C===""||V===""){q=false}if(q){ee.diagnostics={runnable:H,programLog:$,vertexShader:{log:C,prefix:d},fragmentShader:{log:V,prefix:T}}}}s.deleteShader(w);s.deleteShader(A);Q=new Sr(s,p);v=Vg(s,p)}let Q;this.getUniforms=function(){if(Q===void 0){B(this)}return Q};let v;this.getAttributes=function(){if(v===void 0){B(this)}return v};let b=t.rendererExtensionParallelShaderCompile===false;this.isReady=function(){if(b===false){b=s.getProgramParameter(p,Ig)}return b};this.destroy=function(){n.releaseStatesOfProgram(this);s.deleteProgram(p);this.program=void 0};this.type=t.shaderType;this.name=t.shaderName;this.id=Ng++;this.cacheKey=e;this.usedTimes=1;this.program=p;this.vertexShader=w;this.fragmentShader=A;return this}let t_=0;class n_{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(e){const t=e.vertexShader;const n=e.fragmentShader;const s=this._getShaderStage(t);const r=this._getShaderStage(n);const o=this._getShaderCacheForMaterial(e);if(o.has(s)===false){o.add(s);s.usedTimes++}if(o.has(r)===false){o.add(r);r.usedTimes++}return this}remove(e){const t=this.materialCache.get(e);for(const n of t){n.usedTimes--;if(n.usedTimes===0)this.shaderCache.delete(n.code)}this.materialCache.delete(e);return this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear();this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);if(n===void 0){n=new Set;t.set(e,n)}return n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);if(n===void 0){n=new i_(e);t.set(e,n)}return n}}class i_{constructor(e){this.id=t_++;this.code=e;this.usedTimes=0}}function s_(i,e,t,n,s,r,o){const a=new ah;const l=new n_;const c=new Set;const h=[];const u=s.isWebGL2;const f=s.logarithmicDepthBuffer;const m=s.vertexTextures;let g=s.precision;const S={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function p(v){c.add(v);if(v===0)return"uv";return`uv${v}`}function d(v,b,ee,$,C){const V=$.fog;const H=C.geometry;const q=v.isMeshStandardMaterial?$.environment:null;const k=(v.isMeshStandardMaterial?t:e).get(v.envMap||q);const X=!!k&&k.mapping===Wr?k.image.height:null;const Y=S[v.type];if(v.precision!==null){g=s.getMaxPrecision(v.precision);if(g!==v.precision){console.warn("THREE.WebGLProgram.getParameters:",v.precision,"not supported, using",g,"instead.")}}const re=H.morphAttributes.position||H.morphAttributes.normal||H.morphAttributes.color;const de=re!==void 0?re.length:0;let Re=0;if(H.morphAttributes.position!==void 0)Re=1;if(H.morphAttributes.normal!==void 0)Re=2;if(H.morphAttributes.color!==void 0)Re=3;let z,K;let ue,Ae;if(Y){const Ke=tn[Y];z=Ke.vertexShader;K=Ke.fragmentShader}else{z=v.vertexShader;K=v.fragmentShader;l.update(v);ue=l.getVertexShaderID(v);Ae=l.getFragmentShaderID(v)}const _e=i.getRenderTarget();const fe=C.isInstancedMesh===true;const je=C.isBatchedMesh===true;const we=!!v.map;const U=!!v.matcap;const pt=!!k;const xe=!!v.aoMap;const He=!!v.lightMap;const Me=!!v.bumpMap;const qe=!!v.normalMap;const ze=!!v.displacementMap;const ke=!!v.emissiveMap;const it=!!v.metalnessMap;const E=!!v.roughnessMap;const _=v.anisotropy>0;const G=v.clearcoat>0;const W=v.iridescence>0;const J=v.sheen>0;const j=v.transmission>0;const Ie=_&&!!v.anisotropyMap;const Ee=G&&!!v.clearcoatMap;const ae=G&&!!v.clearcoatNormalMap;const oe=G&&!!v.clearcoatRoughnessMap;const Pe=W&&!!v.iridescenceMap;const te=W&&!!v.iridescenceThicknessMap;const at=J&&!!v.sheenColorMap;const Ve=J&&!!v.sheenRoughnessMap;const ve=!!v.specularMap;const pe=!!v.specularColorMap;const me=!!v.specularIntensityMap;const Ye=j&&!!v.transmissionMap;const De=j&&!!v.thicknessMap;const Qe=!!v.gradientMap;const R=!!v.alphaMap;const le=v.alphaTest>0;const N=!!v.alphaHash;const ne=!!v.extensions;let ce=On;if(v.toneMapped){if(_e===null||_e.isXRRenderTarget===true){ce=i.toneMapping}}const Xe={isWebGL2:u,shaderID:Y,shaderType:v.type,shaderName:v.name,vertexShader:z,fragmentShader:K,defines:v.defines,customVertexShaderID:ue,customFragmentShaderID:Ae,isRawShaderMaterial:v.isRawShaderMaterial===true,glslVersion:v.glslVersion,precision:g,batching:je,instancing:fe,instancingColor:fe&&C.instanceColor!==null,instancingMorph:fe&&C.morphTexture!==null,supportsVertexTextures:m,outputColorSpace:_e===null?i.outputColorSpace:_e.isXRRenderTarget===true?_e.texture.colorSpace:Vn,alphaToCoverage:!!v.alphaToCoverage,map:we,matcap:U,envMap:pt,envMapMode:pt&&k.mapping,envMapCubeUVHeight:X,aoMap:xe,lightMap:He,bumpMap:Me,normalMap:qe,displacementMap:m&&ze,emissiveMap:ke,normalMapObjectSpace:qe&&v.normalMapType===hd,normalMapTangentSpace:qe&&v.normalMapType===Qc,metalnessMap:it,roughnessMap:E,anisotropy:_,anisotropyMap:Ie,clearcoat:G,clearcoatMap:Ee,clearcoatNormalMap:ae,clearcoatRoughnessMap:oe,iridescence:W,iridescenceMap:Pe,iridescenceThicknessMap:te,sheen:J,sheenColorMap:at,sheenRoughnessMap:Ve,specularMap:ve,specularColorMap:pe,specularIntensityMap:me,transmission:j,transmissionMap:Ye,thicknessMap:De,gradientMap:Qe,opaque:v.transparent===false&&v.blending===Oi&&v.alphaToCoverage===false,alphaMap:R,alphaTest:le,alphaHash:N,combine:v.combine,mapUv:we&&p(v.map.channel),aoMapUv:xe&&p(v.aoMap.channel),lightMapUv:He&&p(v.lightMap.channel),bumpMapUv:Me&&p(v.bumpMap.channel),normalMapUv:qe&&p(v.normalMap.channel),displacementMapUv:ze&&p(v.displacementMap.channel),emissiveMapUv:ke&&p(v.emissiveMap.channel),metalnessMapUv:it&&p(v.metalnessMap.channel),roughnessMapUv:E&&p(v.roughnessMap.channel),anisotropyMapUv:Ie&&p(v.anisotropyMap.channel),clearcoatMapUv:Ee&&p(v.clearcoatMap.channel),clearcoatNormalMapUv:ae&&p(v.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:oe&&p(v.clearcoatRoughnessMap.channel),iridescenceMapUv:Pe&&p(v.iridescenceMap.channel),iridescenceThicknessMapUv:te&&p(v.iridescenceThicknessMap.channel),sheenColorMapUv:at&&p(v.sheenColorMap.channel),sheenRoughnessMapUv:Ve&&p(v.sheenRoughnessMap.channel),specularMapUv:ve&&p(v.specularMap.channel),specularColorMapUv:pe&&p(v.specularColorMap.channel),specularIntensityMapUv:me&&p(v.specularIntensityMap.channel),transmissionMapUv:Ye&&p(v.transmissionMap.channel),thicknessMapUv:De&&p(v.thicknessMap.channel),alphaMapUv:R&&p(v.alphaMap.channel),vertexTangents:!!H.attributes.tangent&&(qe||_),vertexColors:v.vertexColors,vertexAlphas:v.vertexColors===true&&!!H.attributes.color&&H.attributes.color.itemSize===4,pointsUvs:C.isPoints===true&&!!H.attributes.uv&&(we||R),fog:!!V,useFog:v.fog===true,fogExp2:!!V&&V.isFogExp2,flatShading:v.flatShading===true,sizeAttenuation:v.sizeAttenuation===true,logarithmicDepthBuffer:f,skinning:C.isSkinnedMesh===true,morphTargets:H.morphAttributes.position!==void 0,morphNormals:H.morphAttributes.normal!==void 0,morphColors:H.morphAttributes.color!==void 0,morphTargetsCount:de,morphTextureStride:Re,numDirLights:b.directional.length,numPointLights:b.point.length,numSpotLights:b.spot.length,numSpotLightMaps:b.spotLightMap.length,numRectAreaLights:b.rectArea.length,numHemiLights:b.hemi.length,numDirLightShadows:b.directionalShadowMap.length,numPointLightShadows:b.pointShadowMap.length,numSpotLightShadows:b.spotShadowMap.length,numSpotLightShadowsWithMaps:b.numSpotLightShadowsWithMaps,numLightProbes:b.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:v.dithering,shadowMapEnabled:i.shadowMap.enabled&&ee.length>0,shadowMapType:i.shadowMap.type,toneMapping:ce,useLegacyLights:i._useLegacyLights,decodeVideoTexture:we&&v.map.isVideoTexture===true&&$e.getTransfer(v.map.colorSpace)===Je,premultipliedAlpha:v.premultipliedAlpha,doubleSided:v.side===$t,flipSided:v.side===Rt,useDepthPacking:v.depthPacking>=0,depthPacking:v.depthPacking||0,index0AttributeName:v.index0AttributeName,extensionDerivatives:ne&&v.extensions.derivatives===true,extensionFragDepth:ne&&v.extensions.fragDepth===true,extensionDrawBuffers:ne&&v.extensions.drawBuffers===true,extensionShaderTextureLOD:ne&&v.extensions.shaderTextureLOD===true,extensionClipCullDistance:ne&&v.extensions.clipCullDistance===true&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:ne&&v.extensions.multiDraw===true&&n.has("WEBGL_multi_draw"),rendererExtensionFragDepth:u||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||n.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:v.customProgramCacheKey()};Xe.vertexUv1s=c.has(1);Xe.vertexUv2s=c.has(2);Xe.vertexUv3s=c.has(3);c.clear();return Xe}function T(v){const b=[];if(v.shaderID){b.push(v.shaderID)}else{b.push(v.customVertexShaderID);b.push(v.customFragmentShaderID)}if(v.defines!==void 0){for(const ee in v.defines){b.push(ee);b.push(v.defines[ee])}}if(v.isRawShaderMaterial===false){x(b,v);y(b,v);b.push(i.outputColorSpace)}b.push(v.customProgramCacheKey);return b.join()}function x(v,b){v.push(b.precision);v.push(b.outputColorSpace);v.push(b.envMapMode);v.push(b.envMapCubeUVHeight);v.push(b.mapUv);v.push(b.alphaMapUv);v.push(b.lightMapUv);v.push(b.aoMapUv);v.push(b.bumpMapUv);v.push(b.normalMapUv);v.push(b.displacementMapUv);v.push(b.emissiveMapUv);v.push(b.metalnessMapUv);v.push(b.roughnessMapUv);v.push(b.anisotropyMapUv);v.push(b.clearcoatMapUv);v.push(b.clearcoatNormalMapUv);v.push(b.clearcoatRoughnessMapUv);v.push(b.iridescenceMapUv);v.push(b.iridescenceThicknessMapUv);v.push(b.sheenColorMapUv);v.push(b.sheenRoughnessMapUv);v.push(b.specularMapUv);v.push(b.specularColorMapUv);v.push(b.specularIntensityMapUv);v.push(b.transmissionMapUv);v.push(b.thicknessMapUv);v.push(b.combine);v.push(b.fogExp2);v.push(b.sizeAttenuation);v.push(b.morphTargetsCount);v.push(b.morphAttributeCount);v.push(b.numDirLights);v.push(b.numPointLights);v.push(b.numSpotLights);v.push(b.numSpotLightMaps);v.push(b.numHemiLights);v.push(b.numRectAreaLights);v.push(b.numDirLightShadows);v.push(b.numPointLightShadows);v.push(b.numSpotLightShadows);v.push(b.numSpotLightShadowsWithMaps);v.push(b.numLightProbes);v.push(b.shadowMapType);v.push(b.toneMapping);v.push(b.numClippingPlanes);v.push(b.numClipIntersection);v.push(b.depthPacking)}function y(v,b){a.disableAll();if(b.isWebGL2)a.enable(0);if(b.supportsVertexTextures)a.enable(1);if(b.instancing)a.enable(2);if(b.instancingColor)a.enable(3);if(b.instancingMorph)a.enable(4);if(b.matcap)a.enable(5);if(b.envMap)a.enable(6);if(b.normalMapObjectSpace)a.enable(7);if(b.normalMapTangentSpace)a.enable(8);if(b.clearcoat)a.enable(9);if(b.iridescence)a.enable(10);if(b.alphaTest)a.enable(11);if(b.vertexColors)a.enable(12);if(b.vertexAlphas)a.enable(13);if(b.vertexUv1s)a.enable(14);if(b.vertexUv2s)a.enable(15);if(b.vertexUv3s)a.enable(16);if(b.vertexTangents)a.enable(17);if(b.anisotropy)a.enable(18);if(b.alphaHash)a.enable(19);if(b.batching)a.enable(20);v.push(a.mask);a.disableAll();if(b.fog)a.enable(0);if(b.useFog)a.enable(1);if(b.flatShading)a.enable(2);if(b.logarithmicDepthBuffer)a.enable(3);if(b.skinning)a.enable(4);if(b.morphTargets)a.enable(5);if(b.morphNormals)a.enable(6);if(b.morphColors)a.enable(7);if(b.premultipliedAlpha)a.enable(8);if(b.shadowMapEnabled)a.enable(9);if(b.useLegacyLights)a.enable(10);if(b.doubleSided)a.enable(11);if(b.flipSided)a.enable(12);if(b.useDepthPacking)a.enable(13);if(b.dithering)a.enable(14);if(b.transmission)a.enable(15);if(b.sheen)a.enable(16);if(b.opaque)a.enable(17);if(b.pointsUvs)a.enable(18);if(b.decodeVideoTexture)a.enable(19);if(b.alphaToCoverage)a.enable(20);v.push(a.mask)}function L(v){const b=S[v.type];let ee;if(b){const $=tn[b];ee=As.clone($.uniforms)}else{ee=v.uniforms}return ee}function w(v,b){let ee;for(let $=0,C=h.length;$<C;$++){const V=h[$];if(V.cacheKey===b){ee=V;++ee.usedTimes;break}}if(ee===void 0){ee=new e_(i,b,v,r);h.push(ee)}return ee}function A(v){if(--v.usedTimes===0){const b=h.indexOf(v);h[b]=h[h.length-1];h.pop();v.destroy()}}function B(v){l.remove(v)}function Q(){l.dispose()}return{getParameters:d,getProgramCacheKey:T,getUniforms:L,acquireProgram:w,releaseProgram:A,releaseShaderCache:B,programs:h,dispose:Q}}function r_(){let i=new WeakMap;function e(r){let o=i.get(r);if(o===void 0){o={};i.set(r,o)}return o}function t(r){i.delete(r)}function n(r,o,a){i.get(r)[o]=a}function s(){i=new WeakMap}return{get:e,remove:t,update:n,dispose:s}}function a_(i,e){if(i.groupOrder!==e.groupOrder){return i.groupOrder-e.groupOrder}else if(i.renderOrder!==e.renderOrder){return i.renderOrder-e.renderOrder}else if(i.material.id!==e.material.id){return i.material.id-e.material.id}else if(i.z!==e.z){return i.z-e.z}else{return i.id-e.id}}function ac(i,e){if(i.groupOrder!==e.groupOrder){return i.groupOrder-e.groupOrder}else if(i.renderOrder!==e.renderOrder){return i.renderOrder-e.renderOrder}else if(i.z!==e.z){return e.z-i.z}else{return i.id-e.id}}function oc(){const i=[];let e=0;const t=[];const n=[];const s=[];function r(){e=0;t.length=0;n.length=0;s.length=0}function o(u,f,m,g,S,p){let d=i[e];if(d===void 0){d={id:u.id,object:u,geometry:f,material:m,groupOrder:g,renderOrder:u.renderOrder,z:S,group:p};i[e]=d}else{d.id=u.id;d.object=u;d.geometry=f;d.material=m;d.groupOrder=g;d.renderOrder=u.renderOrder;d.z=S;d.group=p}e++;return d}function a(u,f,m,g,S,p){const d=o(u,f,m,g,S,p);if(m.transmission>0){n.push(d)}else if(m.transparent===true){s.push(d)}else{t.push(d)}}function l(u,f,m,g,S,p){const d=o(u,f,m,g,S,p);if(m.transmission>0){n.unshift(d)}else if(m.transparent===true){s.unshift(d)}else{t.unshift(d)}}function c(u,f){if(t.length>1)t.sort(u||a_);if(n.length>1)n.sort(f||ac);if(s.length>1)s.sort(f||ac)}function h(){for(let u=e,f=i.length;u<f;u++){const m=i[u];if(m.id===null)break;m.id=null;m.object=null;m.geometry=null;m.material=null;m.group=null}}return{opaque:t,transmissive:n,transparent:s,init:r,push:a,unshift:l,finish:h,sort:c}}function o_(){let i=new WeakMap;function e(n,s){const r=i.get(n);let o;if(r===void 0){o=new oc;i.set(n,[o])}else{if(s>=r.length){o=new oc;r.push(o)}else{o=r[s]}}return o}function t(){i=new WeakMap}return{get:e,dispose:t}}function l_(){const i={};return{get:function(e){if(i[e.id]!==void 0){return i[e.id]}let t;switch(e.type){case"DirectionalLight":t={direction:new P,color:new We};break;case"SpotLight":t={position:new P,direction:new P,color:new We,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new P,color:new We,distance:0,decay:0};break;case"HemisphereLight":t={direction:new P,skyColor:new We,groundColor:new We};break;case"RectAreaLight":t={color:new We,position:new P,halfWidth:new P,halfHeight:new P};break}i[e.id]=t;return t}}}function c_(){const i={};return{get:function(e){if(i[e.id]!==void 0){return i[e.id]}let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Be};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Be};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Be,shadowCameraNear:1,shadowCameraFar:1e3};break}i[e.id]=t;return t}}}let h_=0;function u_(i,e){return(e.castShadow?2:0)-(i.castShadow?2:0)+(e.map?1:0)-(i.map?1:0)}function d_(i,e){const t=new l_;const n=c_();const s={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let h=0;h<9;h++)s.probe.push(new P);const r=new P;const o=new rt;const a=new rt;function l(h,u){let f=0,m=0,g=0;for(let ee=0;ee<9;ee++)s.probe[ee].set(0,0,0);let S=0;let p=0;let d=0;let T=0;let x=0;let y=0;let L=0;let w=0;let A=0;let B=0;let Q=0;h.sort(u_);const v=u===true?Math.PI:1;for(let ee=0,$=h.length;ee<$;ee++){const C=h[ee];const V=C.color;const H=C.intensity;const q=C.distance;const k=C.shadow&&C.shadow.map?C.shadow.map.texture:null;if(C.isAmbientLight){f+=V.r*H*v;m+=V.g*H*v;g+=V.b*H*v}else if(C.isLightProbe){for(let X=0;X<9;X++){s.probe[X].addScaledVector(C.sh.coefficients[X],H)}Q++}else if(C.isDirectionalLight){const X=t.get(C);X.color.copy(C.color).multiplyScalar(C.intensity*v);if(C.castShadow){const Y=C.shadow;const re=n.get(C);re.shadowBias=Y.bias;re.shadowNormalBias=Y.normalBias;re.shadowRadius=Y.radius;re.shadowMapSize=Y.mapSize;s.directionalShadow[S]=re;s.directionalShadowMap[S]=k;s.directionalShadowMatrix[S]=C.shadow.matrix;y++}s.directional[S]=X;S++}else if(C.isSpotLight){const X=t.get(C);X.position.setFromMatrixPosition(C.matrixWorld);X.color.copy(V).multiplyScalar(H*v);X.distance=q;X.coneCos=Math.cos(C.angle);X.penumbraCos=Math.cos(C.angle*(1-C.penumbra));X.decay=C.decay;s.spot[d]=X;const Y=C.shadow;if(C.map){s.spotLightMap[A]=C.map;A++;Y.updateMatrices(C);if(C.castShadow)B++}s.spotLightMatrix[d]=Y.matrix;if(C.castShadow){const re=n.get(C);re.shadowBias=Y.bias;re.shadowNormalBias=Y.normalBias;re.shadowRadius=Y.radius;re.shadowMapSize=Y.mapSize;s.spotShadow[d]=re;s.spotShadowMap[d]=k;w++}d++}else if(C.isRectAreaLight){const X=t.get(C);X.color.copy(V).multiplyScalar(H);X.halfWidth.set(C.width*.5,0,0);X.halfHeight.set(0,C.height*.5,0);s.rectArea[T]=X;T++}else if(C.isPointLight){const X=t.get(C);X.color.copy(C.color).multiplyScalar(C.intensity*v);X.distance=C.distance;X.decay=C.decay;if(C.castShadow){const Y=C.shadow;const re=n.get(C);re.shadowBias=Y.bias;re.shadowNormalBias=Y.normalBias;re.shadowRadius=Y.radius;re.shadowMapSize=Y.mapSize;re.shadowCameraNear=Y.camera.near;re.shadowCameraFar=Y.camera.far;s.pointShadow[p]=re;s.pointShadowMap[p]=k;s.pointShadowMatrix[p]=C.shadow.matrix;L++}s.point[p]=X;p++}else if(C.isHemisphereLight){const X=t.get(C);X.skyColor.copy(C.color).multiplyScalar(H*v);X.groundColor.copy(C.groundColor).multiplyScalar(H*v);s.hemi[x]=X;x++}}if(T>0){if(e.isWebGL2){if(i.has("OES_texture_float_linear")===true){s.rectAreaLTC1=se.LTC_FLOAT_1;s.rectAreaLTC2=se.LTC_FLOAT_2}else{s.rectAreaLTC1=se.LTC_HALF_1;s.rectAreaLTC2=se.LTC_HALF_2}}else{if(i.has("OES_texture_float_linear")===true){s.rectAreaLTC1=se.LTC_FLOAT_1;s.rectAreaLTC2=se.LTC_FLOAT_2}else if(i.has("OES_texture_half_float_linear")===true){s.rectAreaLTC1=se.LTC_HALF_1;s.rectAreaLTC2=se.LTC_HALF_2}else{console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")}}}s.ambient[0]=f;s.ambient[1]=m;s.ambient[2]=g;const b=s.hash;if(b.directionalLength!==S||b.pointLength!==p||b.spotLength!==d||b.rectAreaLength!==T||b.hemiLength!==x||b.numDirectionalShadows!==y||b.numPointShadows!==L||b.numSpotShadows!==w||b.numSpotMaps!==A||b.numLightProbes!==Q){s.directional.length=S;s.spot.length=d;s.rectArea.length=T;s.point.length=p;s.hemi.length=x;s.directionalShadow.length=y;s.directionalShadowMap.length=y;s.pointShadow.length=L;s.pointShadowMap.length=L;s.spotShadow.length=w;s.spotShadowMap.length=w;s.directionalShadowMatrix.length=y;s.pointShadowMatrix.length=L;s.spotLightMatrix.length=w+A-B;s.spotLightMap.length=A;s.numSpotLightShadowsWithMaps=B;s.numLightProbes=Q;b.directionalLength=S;b.pointLength=p;b.spotLength=d;b.rectAreaLength=T;b.hemiLength=x;b.numDirectionalShadows=y;b.numPointShadows=L;b.numSpotShadows=w;b.numSpotMaps=A;b.numLightProbes=Q;s.version=h_++}}function c(h,u){let f=0;let m=0;let g=0;let S=0;let p=0;const d=u.matrixWorldInverse;for(let T=0,x=h.length;T<x;T++){const y=h[T];if(y.isDirectionalLight){const L=s.directional[f];L.direction.setFromMatrixPosition(y.matrixWorld);r.setFromMatrixPosition(y.target.matrixWorld);L.direction.sub(r);L.direction.transformDirection(d);f++}else if(y.isSpotLight){const L=s.spot[g];L.position.setFromMatrixPosition(y.matrixWorld);L.position.applyMatrix4(d);L.direction.setFromMatrixPosition(y.matrixWorld);r.setFromMatrixPosition(y.target.matrixWorld);L.direction.sub(r);L.direction.transformDirection(d);g++}else if(y.isRectAreaLight){const L=s.rectArea[S];L.position.setFromMatrixPosition(y.matrixWorld);L.position.applyMatrix4(d);a.identity();o.copy(y.matrixWorld);o.premultiply(d);a.extractRotation(o);L.halfWidth.set(y.width*.5,0,0);L.halfHeight.set(0,y.height*.5,0);L.halfWidth.applyMatrix4(a);L.halfHeight.applyMatrix4(a);S++}else if(y.isPointLight){const L=s.point[m];L.position.setFromMatrixPosition(y.matrixWorld);L.position.applyMatrix4(d);m++}else if(y.isHemisphereLight){const L=s.hemi[p];L.direction.setFromMatrixPosition(y.matrixWorld);L.direction.transformDirection(d);p++}}}return{setup:l,setupView:c,state:s}}function lc(i,e){const t=new d_(i,e);const n=[];const s=[];function r(){n.length=0;s.length=0}function o(u){n.push(u)}function a(u){s.push(u)}function l(u){t.setup(n,u)}function c(u){t.setupView(n,u)}const h={lightsArray:n,shadowsArray:s,lights:t};return{init:r,state:h,setupLights:l,setupLightsView:c,pushLight:o,pushShadow:a}}function f_(i,e){let t=new WeakMap;function n(r,o=0){const a=t.get(r);let l;if(a===void 0){l=new lc(i,e);t.set(r,[l])}else{if(o>=a.length){l=new lc(i,e);a.push(l)}else{l=a[o]}}return l}function s(){t=new WeakMap}return{get:n,dispose:s}}class p_ extends os{constructor(e){super();this.isMeshDepthMaterial=true;this.type="MeshDepthMaterial";this.depthPacking=ld;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.setValues(e)}copy(e){super.copy(e);this.depthPacking=e.depthPacking;this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;return this}}class m_ extends os{constructor(e){super();this.isMeshDistanceMaterial=true;this.type="MeshDistanceMaterial";this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.setValues(e)}copy(e){super.copy(e);this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;return this}}const g_="void main() {\n	gl_Position = vec4( position, 1.0 );\n}";const __="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function v_(i,e,t){let n=new fh;const s=new Be,r=new Be,o=new gt,a=new p_({depthPacking:cd}),l=new m_,c={},h=t.maxTextureSize;const u={[Hn]:Rt,[Rt]:Hn,[$t]:$t};const f=new Nt({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Be},radius:{value:4}},vertexShader:g_,fragmentShader:__});const m=f.clone();m.defines.HORIZONTAL_PASS=1;const g=new Pt;g.setAttribute("position",new sn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const S=new Vt(g,f);const p=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=Bc;let d=this.type;this.render=function(w,A,B){if(p.enabled===false)return;if(p.autoUpdate===false&&p.needsUpdate===false)return;if(w.length===0)return;const Q=i.getRenderTarget();const v=i.getActiveCubeFace();const b=i.getActiveMipmapLevel();const ee=i.state;ee.setBlending(yn);ee.buffers.color.setClear(1,1,1,1);ee.buffers.depth.setTest(true);ee.setScissorTest(false);const $=d!==fn&&this.type===fn;const C=d===fn&&this.type!==fn;for(let V=0,H=w.length;V<H;V++){const q=w[V];const k=q.shadow;if(k===void 0){console.warn("THREE.WebGLShadowMap:",q,"has no shadow.");continue}if(k.autoUpdate===false&&k.needsUpdate===false)continue;s.copy(k.mapSize);const X=k.getFrameExtents();s.multiply(X);r.copy(k.mapSize);if(s.x>h||s.y>h){if(s.x>h){r.x=Math.floor(h/X.x);s.x=r.x*X.x;k.mapSize.x=r.x}if(s.y>h){r.y=Math.floor(h/X.y);s.y=r.y*X.y;k.mapSize.y=r.y}}if(k.map===null||$===true||C===true){const re=this.type!==fn?{minFilter:yt,magFilter:yt}:{};if(k.map!==null){k.map.dispose()}k.map=new rn(s.x,s.y,re);k.map.texture.name=q.name+".shadowMap";k.camera.updateProjectionMatrix()}i.setRenderTarget(k.map);i.clear();const Y=k.getViewportCount();for(let re=0;re<Y;re++){const de=k.getViewport(re);o.set(r.x*de.x,r.y*de.y,r.x*de.z,r.y*de.w);ee.viewport(o);k.updateMatrices(q,re);n=k.getFrustum();y(A,B,k.camera,q,this.type)}if(k.isPointLightShadow!==true&&this.type===fn){T(k,B)}k.needsUpdate=false}d=this.type;p.needsUpdate=false;i.setRenderTarget(Q,v,b)};function T(w,A){const B=e.update(S);if(f.defines.VSM_SAMPLES!==w.blurSamples){f.defines.VSM_SAMPLES=w.blurSamples;m.defines.VSM_SAMPLES=w.blurSamples;f.needsUpdate=true;m.needsUpdate=true}if(w.mapPass===null){w.mapPass=new rn(s.x,s.y)}f.uniforms.shadow_pass.value=w.map.texture;f.uniforms.resolution.value=w.mapSize;f.uniforms.radius.value=w.radius;i.setRenderTarget(w.mapPass);i.clear();i.renderBufferDirect(A,null,B,f,S,null);m.uniforms.shadow_pass.value=w.mapPass.texture;m.uniforms.resolution.value=w.mapSize;m.uniforms.radius.value=w.radius;i.setRenderTarget(w.map);i.clear();i.renderBufferDirect(A,null,B,m,S,null)}function x(w,A,B,Q){let v=null;const b=B.isPointLight===true?w.customDistanceMaterial:w.customDepthMaterial;if(b!==void 0){v=b}else{v=B.isPointLight===true?l:a;if(i.localClippingEnabled&&A.clipShadows===true&&Array.isArray(A.clippingPlanes)&&A.clippingPlanes.length!==0||A.displacementMap&&A.displacementScale!==0||A.alphaMap&&A.alphaTest>0||A.map&&A.alphaTest>0){const ee=v.uuid,$=A.uuid;let C=c[ee];if(C===void 0){C={};c[ee]=C}let V=C[$];if(V===void 0){V=v.clone();C[$]=V;A.addEventListener("dispose",L)}v=V}}v.visible=A.visible;v.wireframe=A.wireframe;if(Q===fn){v.side=A.shadowSide!==null?A.shadowSide:A.side}else{v.side=A.shadowSide!==null?A.shadowSide:u[A.side]}v.alphaMap=A.alphaMap;v.alphaTest=A.alphaTest;v.map=A.map;v.clipShadows=A.clipShadows;v.clippingPlanes=A.clippingPlanes;v.clipIntersection=A.clipIntersection;v.displacementMap=A.displacementMap;v.displacementScale=A.displacementScale;v.displacementBias=A.displacementBias;v.wireframeLinewidth=A.wireframeLinewidth;v.linewidth=A.linewidth;if(B.isPointLight===true&&v.isMeshDistanceMaterial===true){const ee=i.properties.get(v);ee.light=B}return v}function y(w,A,B,Q,v){if(w.visible===false)return;const b=w.layers.test(A.layers);if(b&&(w.isMesh||w.isLine||w.isPoints)){if((w.castShadow||w.receiveShadow&&v===fn)&&(!w.frustumCulled||n.intersectsObject(w))){w.modelViewMatrix.multiplyMatrices(B.matrixWorldInverse,w.matrixWorld);const $=e.update(w);const C=w.material;if(Array.isArray(C)){const V=$.groups;for(let H=0,q=V.length;H<q;H++){const k=V[H];const X=C[k.materialIndex];if(X&&X.visible){const Y=x(w,X,Q,v);w.onBeforeShadow(i,w,A,B,$,Y,k);i.renderBufferDirect(B,null,$,Y,w,k);w.onAfterShadow(i,w,A,B,$,Y,k)}}}else if(C.visible){const V=x(w,C,Q,v);w.onBeforeShadow(i,w,A,B,$,V,null);i.renderBufferDirect(B,null,$,V,w,null);w.onAfterShadow(i,w,A,B,$,V,null)}}}const ee=w.children;for(let $=0,C=ee.length;$<C;$++){y(ee[$],A,B,Q,v)}}function L(w){const A=w.target;A.removeEventListener("dispose",L);for(const B in c){const Q=c[B];const v=w.target.uuid;if(v in Q){const b=Q[v];b.dispose();delete Q[v]}}}}function x_(i,e,t){const n=t.isWebGL2;function s(){let R=false;const le=new gt;let N=null;const ne=new gt(0,0,0,0);return{setMask:function(ce){if(N!==ce&&!R){i.colorMask(ce,ce,ce,ce);N=ce}},setLocked:function(ce){R=ce},setClear:function(ce,Xe,Ke,mt,Ft){if(Ft===true){ce*=mt;Xe*=mt;Ke*=mt}le.set(ce,Xe,Ke,mt);if(ne.equals(le)===false){i.clearColor(ce,Xe,Ke,mt);ne.copy(le)}},reset:function(){R=false;N=null;ne.set(-1,0,0,0)}}}function r(){let R=false;let le=null;let N=null;let ne=null;return{setTest:function(ce){if(ce){fe(i.DEPTH_TEST)}else{je(i.DEPTH_TEST)}},setMask:function(ce){if(le!==ce&&!R){i.depthMask(ce);le=ce}},setFunc:function(ce){if(N!==ce){switch(ce){case Wu:i.depthFunc(i.NEVER);break;case Xu:i.depthFunc(i.ALWAYS);break;case qu:i.depthFunc(i.LESS);break;case wr:i.depthFunc(i.LEQUAL);break;case Yu:i.depthFunc(i.EQUAL);break;case ju:i.depthFunc(i.GEQUAL);break;case $u:i.depthFunc(i.GREATER);break;case Ku:i.depthFunc(i.NOTEQUAL);break;default:i.depthFunc(i.LEQUAL)}N=ce}},setLocked:function(ce){R=ce},setClear:function(ce){if(ne!==ce){i.clearDepth(ce);ne=ce}},reset:function(){R=false;le=null;N=null;ne=null}}}function o(){let R=false;let le=null;let N=null;let ne=null;let ce=null;let Xe=null;let Ke=null;let mt=null;let Ft=null;return{setTest:function(Ze){if(!R){if(Ze){fe(i.STENCIL_TEST)}else{je(i.STENCIL_TEST)}}},setMask:function(Ze){if(le!==Ze&&!R){i.stencilMask(Ze);le=Ze}},setFunc:function(Ze,Mt,Jt){if(N!==Ze||ne!==Mt||ce!==Jt){i.stencilFunc(Ze,Mt,Jt);N=Ze;ne=Mt;ce=Jt}},setOp:function(Ze,Mt,Jt){if(Xe!==Ze||Ke!==Mt||mt!==Jt){i.stencilOp(Ze,Mt,Jt);Xe=Ze;Ke=Mt;mt=Jt}},setLocked:function(Ze){R=Ze},setClear:function(Ze){if(Ft!==Ze){i.clearStencil(Ze);Ft=Ze}},reset:function(){R=false;le=null;N=null;ne=null;ce=null;Xe=null;Ke=null;mt=null;Ft=null}}}const a=new s;const l=new r;const c=new o;const h=new WeakMap;const u=new WeakMap;let f={};let m={};let g=new WeakMap;let S=[];let p=null;let d=false;let T=null;let x=null;let y=null;let L=null;let w=null;let A=null;let B=null;let Q=new We(0,0,0);let v=0;let b=false;let ee=null;let $=null;let C=null;let V=null;let H=null;const q=i.getParameter(i.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let k=false;let X=0;const Y=i.getParameter(i.VERSION);if(Y.indexOf("WebGL")!==-1){X=parseFloat(/^WebGL (\d)/.exec(Y)[1]);k=X>=1}else if(Y.indexOf("OpenGL ES")!==-1){X=parseFloat(/^OpenGL ES (\d)/.exec(Y)[1]);k=X>=2}let re=null;let de={};const Re=i.getParameter(i.SCISSOR_BOX);const z=i.getParameter(i.VIEWPORT);const K=new gt().fromArray(Re);const ue=new gt().fromArray(z);function Ae(R,le,N,ne){const ce=new Uint8Array(4);const Xe=i.createTexture();i.bindTexture(R,Xe);i.texParameteri(R,i.TEXTURE_MIN_FILTER,i.NEAREST);i.texParameteri(R,i.TEXTURE_MAG_FILTER,i.NEAREST);for(let Ke=0;Ke<N;Ke++){if(n&&(R===i.TEXTURE_3D||R===i.TEXTURE_2D_ARRAY)){i.texImage3D(le,0,i.RGBA,1,1,ne,0,i.RGBA,i.UNSIGNED_BYTE,ce)}else{i.texImage2D(le+Ke,0,i.RGBA,1,1,0,i.RGBA,i.UNSIGNED_BYTE,ce)}}return Xe}const _e={};_e[i.TEXTURE_2D]=Ae(i.TEXTURE_2D,i.TEXTURE_2D,1);_e[i.TEXTURE_CUBE_MAP]=Ae(i.TEXTURE_CUBE_MAP,i.TEXTURE_CUBE_MAP_POSITIVE_X,6);if(n){_e[i.TEXTURE_2D_ARRAY]=Ae(i.TEXTURE_2D_ARRAY,i.TEXTURE_2D_ARRAY,1,1);_e[i.TEXTURE_3D]=Ae(i.TEXTURE_3D,i.TEXTURE_3D,1,1)}a.setClear(0,0,0,1);l.setClear(1);c.setClear(0);fe(i.DEPTH_TEST);l.setFunc(wr);ze(false);ke(ko);fe(i.CULL_FACE);Me(yn);function fe(R){if(f[R]!==true){i.enable(R);f[R]=true}}function je(R){if(f[R]!==false){i.disable(R);f[R]=false}}function we(R,le){if(m[R]!==le){i.bindFramebuffer(R,le);m[R]=le;if(n){if(R===i.DRAW_FRAMEBUFFER){m[i.FRAMEBUFFER]=le}if(R===i.FRAMEBUFFER){m[i.DRAW_FRAMEBUFFER]=le}}return true}return false}function U(R,le){let N=S;let ne=false;if(R){N=g.get(le);if(N===void 0){N=[];g.set(le,N)}const ce=R.textures;if(N.length!==ce.length||N[0]!==i.COLOR_ATTACHMENT0){for(let Xe=0,Ke=ce.length;Xe<Ke;Xe++){N[Xe]=i.COLOR_ATTACHMENT0+Xe}N.length=ce.length;ne=true}}else{if(N[0]!==i.BACK){N[0]=i.BACK;ne=true}}if(ne){if(t.isWebGL2){i.drawBuffers(N)}else if(e.has("WEBGL_draw_buffers")===true){e.get("WEBGL_draw_buffers").drawBuffersWEBGL(N)}else{throw new Error("THREE.WebGLState: Usage of gl.drawBuffers() require WebGL2 or WEBGL_draw_buffers extension")}}}function pt(R){if(p!==R){i.useProgram(R);p=R;return true}return false}const xe={[ii]:i.FUNC_ADD,[Ru]:i.FUNC_SUBTRACT,[Lu]:i.FUNC_REVERSE_SUBTRACT};if(n){xe[Xo]=i.MIN;xe[qo]=i.MAX}else{const R=e.get("EXT_blend_minmax");if(R!==null){xe[Xo]=R.MIN_EXT;xe[qo]=R.MAX_EXT}}const He={[Pu]:i.ZERO,[Du]:i.ONE,[Uu]:i.SRC_COLOR,[qa]:i.SRC_ALPHA,[zu]:i.SRC_ALPHA_SATURATE,[Ou]:i.DST_COLOR,[Nu]:i.DST_ALPHA,[Iu]:i.ONE_MINUS_SRC_COLOR,[Ya]:i.ONE_MINUS_SRC_ALPHA,[Bu]:i.ONE_MINUS_DST_COLOR,[Fu]:i.ONE_MINUS_DST_ALPHA,[Gu]:i.CONSTANT_COLOR,[Hu]:i.ONE_MINUS_CONSTANT_COLOR,[ku]:i.CONSTANT_ALPHA,[Vu]:i.ONE_MINUS_CONSTANT_ALPHA};function Me(R,le,N,ne,ce,Xe,Ke,mt,Ft,Ze){if(R===yn){if(d===true){je(i.BLEND);d=false}return}if(d===false){fe(i.BLEND);d=true}if(R!==Cu){if(R!==T||Ze!==b){if(x!==ii||w!==ii){i.blendEquation(i.FUNC_ADD);x=ii;w=ii}if(Ze){switch(R){case Oi:i.blendFuncSeparate(i.ONE,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case Xa:i.blendFunc(i.ONE,i.ONE);break;case Vo:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case Wo:i.blendFuncSeparate(i.ZERO,i.SRC_COLOR,i.ZERO,i.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",R);break}}else{switch(R){case Oi:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case Xa:i.blendFunc(i.SRC_ALPHA,i.ONE);break;case Vo:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case Wo:i.blendFunc(i.ZERO,i.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",R);break}}y=null;L=null;A=null;B=null;Q.set(0,0,0);v=0;T=R;b=Ze}return}ce=ce||le;Xe=Xe||N;Ke=Ke||ne;if(le!==x||ce!==w){i.blendEquationSeparate(xe[le],xe[ce]);x=le;w=ce}if(N!==y||ne!==L||Xe!==A||Ke!==B){i.blendFuncSeparate(He[N],He[ne],He[Xe],He[Ke]);y=N;L=ne;A=Xe;B=Ke}if(mt.equals(Q)===false||Ft!==v){i.blendColor(mt.r,mt.g,mt.b,Ft);Q.copy(mt);v=Ft}T=R;b=false}function qe(R,le){R.side===$t?je(i.CULL_FACE):fe(i.CULL_FACE);let N=R.side===Rt;if(le)N=!N;ze(N);R.blending===Oi&&R.transparent===false?Me(yn):Me(R.blending,R.blendEquation,R.blendSrc,R.blendDst,R.blendEquationAlpha,R.blendSrcAlpha,R.blendDstAlpha,R.blendColor,R.blendAlpha,R.premultipliedAlpha);l.setFunc(R.depthFunc);l.setTest(R.depthTest);l.setMask(R.depthWrite);a.setMask(R.colorWrite);const ne=R.stencilWrite;c.setTest(ne);if(ne){c.setMask(R.stencilWriteMask);c.setFunc(R.stencilFunc,R.stencilRef,R.stencilFuncMask);c.setOp(R.stencilFail,R.stencilZFail,R.stencilZPass)}E(R.polygonOffset,R.polygonOffsetFactor,R.polygonOffsetUnits);R.alphaToCoverage===true?fe(i.SAMPLE_ALPHA_TO_COVERAGE):je(i.SAMPLE_ALPHA_TO_COVERAGE)}function ze(R){if(ee!==R){if(R){i.frontFace(i.CW)}else{i.frontFace(i.CCW)}ee=R}}function ke(R){if(R!==bu){fe(i.CULL_FACE);if(R!==$){if(R===ko){i.cullFace(i.BACK)}else if(R===Au){i.cullFace(i.FRONT)}else{i.cullFace(i.FRONT_AND_BACK)}}}else{je(i.CULL_FACE)}$=R}function it(R){if(R!==C){if(k)i.lineWidth(R);C=R}}function E(R,le,N){if(R){fe(i.POLYGON_OFFSET_FILL);if(V!==le||H!==N){i.polygonOffset(le,N);V=le;H=N}}else{je(i.POLYGON_OFFSET_FILL)}}function _(R){if(R){fe(i.SCISSOR_TEST)}else{je(i.SCISSOR_TEST)}}function G(R){if(R===void 0)R=i.TEXTURE0+q-1;if(re!==R){i.activeTexture(R);re=R}}function W(R,le,N){if(N===void 0){if(re===null){N=i.TEXTURE0+q-1}else{N=re}}let ne=de[N];if(ne===void 0){ne={type:void 0,texture:void 0};de[N]=ne}if(ne.type!==R||ne.texture!==le){if(re!==N){i.activeTexture(N);re=N}i.bindTexture(R,le||_e[R]);ne.type=R;ne.texture=le}}function J(){const R=de[re];if(R!==void 0&&R.type!==void 0){i.bindTexture(R.type,null);R.type=void 0;R.texture=void 0}}function j(){try{i.compressedTexImage2D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function Ie(){try{i.compressedTexImage3D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function Ee(){try{i.texSubImage2D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function ae(){try{i.texSubImage3D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function oe(){try{i.compressedTexSubImage2D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function Pe(){try{i.compressedTexSubImage3D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function te(){try{i.texStorage2D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function at(){try{i.texStorage3D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function Ve(){try{i.texImage2D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function ve(){try{i.texImage3D.apply(i,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function pe(R){if(K.equals(R)===false){i.scissor(R.x,R.y,R.z,R.w);K.copy(R)}}function me(R){if(ue.equals(R)===false){i.viewport(R.x,R.y,R.z,R.w);ue.copy(R)}}function Ye(R,le){let N=u.get(le);if(N===void 0){N=new WeakMap;u.set(le,N)}let ne=N.get(R);if(ne===void 0){ne=i.getUniformBlockIndex(le,R.name);N.set(R,ne)}}function De(R,le){const N=u.get(le);const ne=N.get(R);if(h.get(le)!==ne){i.uniformBlockBinding(le,ne,R.__bindingPointIndex);h.set(le,ne)}}function Qe(){i.disable(i.BLEND);i.disable(i.CULL_FACE);i.disable(i.DEPTH_TEST);i.disable(i.POLYGON_OFFSET_FILL);i.disable(i.SCISSOR_TEST);i.disable(i.STENCIL_TEST);i.disable(i.SAMPLE_ALPHA_TO_COVERAGE);i.blendEquation(i.FUNC_ADD);i.blendFunc(i.ONE,i.ZERO);i.blendFuncSeparate(i.ONE,i.ZERO,i.ONE,i.ZERO);i.blendColor(0,0,0,0);i.colorMask(true,true,true,true);i.clearColor(0,0,0,0);i.depthMask(true);i.depthFunc(i.LESS);i.clearDepth(1);i.stencilMask(4294967295);i.stencilFunc(i.ALWAYS,0,4294967295);i.stencilOp(i.KEEP,i.KEEP,i.KEEP);i.clearStencil(0);i.cullFace(i.BACK);i.frontFace(i.CCW);i.polygonOffset(0,0);i.activeTexture(i.TEXTURE0);i.bindFramebuffer(i.FRAMEBUFFER,null);if(n===true){i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null);i.bindFramebuffer(i.READ_FRAMEBUFFER,null)}i.useProgram(null);i.lineWidth(1);i.scissor(0,0,i.canvas.width,i.canvas.height);i.viewport(0,0,i.canvas.width,i.canvas.height);f={};re=null;de={};m={};g=new WeakMap;S=[];p=null;d=false;T=null;x=null;y=null;L=null;w=null;A=null;B=null;Q=new We(0,0,0);v=0;b=false;ee=null;$=null;C=null;V=null;H=null;K.set(0,0,i.canvas.width,i.canvas.height);ue.set(0,0,i.canvas.width,i.canvas.height);a.reset();l.reset();c.reset()}return{buffers:{color:a,depth:l,stencil:c},enable:fe,disable:je,bindFramebuffer:we,drawBuffers:U,useProgram:pt,setBlending:Me,setMaterial:qe,setFlipSided:ze,setCullFace:ke,setLineWidth:it,setPolygonOffset:E,setScissorTest:_,activeTexture:G,bindTexture:W,unbindTexture:J,compressedTexImage2D:j,compressedTexImage3D:Ie,texImage2D:Ve,texImage3D:ve,updateUBOMapping:Ye,uniformBlockBinding:De,texStorage2D:te,texStorage3D:at,texSubImage2D:Ee,texSubImage3D:ae,compressedTexSubImage2D:oe,compressedTexSubImage3D:Pe,scissor:pe,viewport:me,reset:Qe}}function S_(i,e,t,n,s,r,o){const a=s.isWebGL2;const l=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null;const c=typeof navigator==="undefined"?false:/OculusBrowser/g.test(navigator.userAgent);const h=new Be;const u=new WeakMap;let f;const m=new WeakMap;let g=false;try{g=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(E){}function S(E,_){return g?new OffscreenCanvas(E,_):bs("canvas")}function p(E,_,G,W){let J=1;const j=it(E);if(j.width>W||j.height>W){J=W/Math.max(j.width,j.height)}if(J<1||_===true){if(typeof HTMLImageElement!=="undefined"&&E instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&E instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&E instanceof ImageBitmap||typeof VideoFrame!=="undefined"&&E instanceof VideoFrame){const Ie=_?eo:Math.floor;const Ee=Ie(J*j.width);const ae=Ie(J*j.height);if(f===void 0)f=S(Ee,ae);const oe=G?S(Ee,ae):f;oe.width=Ee;oe.height=ae;const Pe=oe.getContext("2d");Pe.drawImage(E,0,0,Ee,ae);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+j.width+"x"+j.height+") to ("+Ee+"x"+ae+").");return oe}else{if("data"in E){console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+j.width+"x"+j.height+").")}return E}}return E}function d(E){const _=it(E);return El(_.width)&&El(_.height)}function T(E){if(a)return false;return E.wrapS!==Kt||E.wrapT!==Kt||E.minFilter!==yt&&E.minFilter!==wt}function x(E,_){return E.generateMipmaps&&_&&E.minFilter!==yt&&E.minFilter!==wt}function y(E){i.generateMipmap(E)}function L(E,_,G,W,J=false){if(a===false)return _;if(E!==null){if(i[E]!==void 0)return i[E];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+E+"'")}let j=_;if(_===i.RED){if(G===i.FLOAT)j=i.R32F;if(G===i.HALF_FLOAT)j=i.R16F;if(G===i.UNSIGNED_BYTE)j=i.R8}if(_===i.RED_INTEGER){if(G===i.UNSIGNED_BYTE)j=i.R8UI;if(G===i.UNSIGNED_SHORT)j=i.R16UI;if(G===i.UNSIGNED_INT)j=i.R32UI;if(G===i.BYTE)j=i.R8I;if(G===i.SHORT)j=i.R16I;if(G===i.INT)j=i.R32I}if(_===i.RG){if(G===i.FLOAT)j=i.RG32F;if(G===i.HALF_FLOAT)j=i.RG16F;if(G===i.UNSIGNED_BYTE)j=i.RG8}if(_===i.RG_INTEGER){if(G===i.UNSIGNED_BYTE)j=i.RG8UI;if(G===i.UNSIGNED_SHORT)j=i.RG16UI;if(G===i.UNSIGNED_INT)j=i.RG32UI;if(G===i.BYTE)j=i.RG8I;if(G===i.SHORT)j=i.RG16I;if(G===i.INT)j=i.RG32I}if(_===i.RGBA){const Ie=J?Cr:$e.getTransfer(W);if(G===i.FLOAT)j=i.RGBA32F;if(G===i.HALF_FLOAT)j=i.RGBA16F;if(G===i.UNSIGNED_BYTE)j=Ie===Je?i.SRGB8_ALPHA8:i.RGBA8;if(G===i.UNSIGNED_SHORT_4_4_4_4)j=i.RGBA4;if(G===i.UNSIGNED_SHORT_5_5_5_1)j=i.RGB5_A1}if(j===i.R16F||j===i.R32F||j===i.RG16F||j===i.RG32F||j===i.RGBA16F||j===i.RGBA32F){e.get("EXT_color_buffer_float")}return j}function w(E,_,G){if(x(E,G)===true||E.isFramebufferTexture&&E.minFilter!==yt&&E.minFilter!==wt){return Math.log2(Math.max(_.width,_.height))+1}else if(E.mipmaps!==void 0&&E.mipmaps.length>0){return E.mipmaps.length}else if(E.isCompressedTexture&&Array.isArray(E.image)){return _.mipmaps.length}else{return 1}}function A(E){if(E===yt||E===Yo||E===ds){return i.NEAREST}return i.LINEAR}function B(E){const _=E.target;_.removeEventListener("dispose",B);v(_);if(_.isVideoTexture){u.delete(_)}}function Q(E){const _=E.target;_.removeEventListener("dispose",Q);ee(_)}function v(E){const _=n.get(E);if(_.__webglInit===void 0)return;const G=E.source;const W=m.get(G);if(W){const J=W[_.__cacheKey];J.usedTimes--;if(J.usedTimes===0){b(E)}if(Object.keys(W).length===0){m.delete(G)}}n.remove(E)}function b(E){const _=n.get(E);i.deleteTexture(_.__webglTexture);const G=E.source;const W=m.get(G);delete W[_.__cacheKey];o.memory.textures--}function ee(E){const _=n.get(E);if(E.depthTexture){E.depthTexture.dispose()}if(E.isWebGLCubeRenderTarget){for(let W=0;W<6;W++){if(Array.isArray(_.__webglFramebuffer[W])){for(let J=0;J<_.__webglFramebuffer[W].length;J++)i.deleteFramebuffer(_.__webglFramebuffer[W][J])}else{i.deleteFramebuffer(_.__webglFramebuffer[W])}if(_.__webglDepthbuffer)i.deleteRenderbuffer(_.__webglDepthbuffer[W])}}else{if(Array.isArray(_.__webglFramebuffer)){for(let W=0;W<_.__webglFramebuffer.length;W++)i.deleteFramebuffer(_.__webglFramebuffer[W])}else{i.deleteFramebuffer(_.__webglFramebuffer)}if(_.__webglDepthbuffer)i.deleteRenderbuffer(_.__webglDepthbuffer);if(_.__webglMultisampledFramebuffer)i.deleteFramebuffer(_.__webglMultisampledFramebuffer);if(_.__webglColorRenderbuffer){for(let W=0;W<_.__webglColorRenderbuffer.length;W++){if(_.__webglColorRenderbuffer[W])i.deleteRenderbuffer(_.__webglColorRenderbuffer[W])}}if(_.__webglDepthRenderbuffer)i.deleteRenderbuffer(_.__webglDepthRenderbuffer)}const G=E.textures;for(let W=0,J=G.length;W<J;W++){const j=n.get(G[W]);if(j.__webglTexture){i.deleteTexture(j.__webglTexture);o.memory.textures--}n.remove(G[W])}n.remove(E)}let $=0;function C(){$=0}function V(){const E=$;if(E>=s.maxTextures){console.warn("THREE.WebGLTextures: Trying to use "+E+" texture units while this GPU supports only "+s.maxTextures)}$+=1;return E}function H(E){const _=[];_.push(E.wrapS);_.push(E.wrapT);_.push(E.wrapR||0);_.push(E.magFilter);_.push(E.minFilter);_.push(E.anisotropy);_.push(E.internalFormat);_.push(E.format);_.push(E.type);_.push(E.generateMipmaps);_.push(E.premultiplyAlpha);_.push(E.flipY);_.push(E.unpackAlignment);_.push(E.colorSpace);return _.join()}function q(E,_){const G=n.get(E);if(E.isVideoTexture)ze(E);if(E.isRenderTargetTexture===false&&E.version>0&&G.__version!==E.version){const W=E.image;if(W===null){console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.")}else if(W.complete===false){console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}else{ue(G,E,_);return}}t.bindTexture(i.TEXTURE_2D,G.__webglTexture,i.TEXTURE0+_)}function k(E,_){const G=n.get(E);if(E.version>0&&G.__version!==E.version){ue(G,E,_);return}t.bindTexture(i.TEXTURE_2D_ARRAY,G.__webglTexture,i.TEXTURE0+_)}function X(E,_){const G=n.get(E);if(E.version>0&&G.__version!==E.version){ue(G,E,_);return}t.bindTexture(i.TEXTURE_3D,G.__webglTexture,i.TEXTURE0+_)}function Y(E,_){const G=n.get(E);if(E.version>0&&G.__version!==E.version){Ae(G,E,_);return}t.bindTexture(i.TEXTURE_CUBE_MAP,G.__webglTexture,i.TEXTURE0+_)}const re={[Ka]:i.REPEAT,[Kt]:i.CLAMP_TO_EDGE,[Za]:i.MIRRORED_REPEAT};const de={[yt]:i.NEAREST,[Yo]:i.NEAREST_MIPMAP_NEAREST,[ds]:i.NEAREST_MIPMAP_LINEAR,[wt]:i.LINEAR,[ia]:i.LINEAR_MIPMAP_NEAREST,[ri]:i.LINEAR_MIPMAP_LINEAR};const Re={[ud]:i.NEVER,[_d]:i.ALWAYS,[dd]:i.LESS,[eh]:i.LEQUAL,[fd]:i.EQUAL,[gd]:i.GEQUAL,[pd]:i.GREATER,[md]:i.NOTEQUAL};function z(E,_,G){if(_.type===Mn&&e.has("OES_texture_float_linear")===false&&(_.magFilter===wt||_.magFilter===ia||_.magFilter===ds||_.magFilter===ri||_.minFilter===wt||_.minFilter===ia||_.minFilter===ds||_.minFilter===ri)){console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.")}if(G){i.texParameteri(E,i.TEXTURE_WRAP_S,re[_.wrapS]);i.texParameteri(E,i.TEXTURE_WRAP_T,re[_.wrapT]);if(E===i.TEXTURE_3D||E===i.TEXTURE_2D_ARRAY){i.texParameteri(E,i.TEXTURE_WRAP_R,re[_.wrapR])}i.texParameteri(E,i.TEXTURE_MAG_FILTER,de[_.magFilter]);i.texParameteri(E,i.TEXTURE_MIN_FILTER,de[_.minFilter])}else{i.texParameteri(E,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE);i.texParameteri(E,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE);if(E===i.TEXTURE_3D||E===i.TEXTURE_2D_ARRAY){i.texParameteri(E,i.TEXTURE_WRAP_R,i.CLAMP_TO_EDGE)}if(_.wrapS!==Kt||_.wrapT!==Kt){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.")}i.texParameteri(E,i.TEXTURE_MAG_FILTER,A(_.magFilter));i.texParameteri(E,i.TEXTURE_MIN_FILTER,A(_.minFilter));if(_.minFilter!==yt&&_.minFilter!==wt){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")}}if(_.compareFunction){i.texParameteri(E,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE);i.texParameteri(E,i.TEXTURE_COMPARE_FUNC,Re[_.compareFunction])}if(e.has("EXT_texture_filter_anisotropic")===true){if(_.magFilter===yt)return;if(_.minFilter!==ds&&_.minFilter!==ri)return;if(_.type===Mn&&e.has("OES_texture_float_linear")===false)return;if(a===false&&(_.type===kn&&e.has("OES_texture_half_float_linear")===false))return;if(_.anisotropy>1||n.get(_).__currentAnisotropy){const W=e.get("EXT_texture_filter_anisotropic");i.texParameterf(E,W.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(_.anisotropy,s.getMaxAnisotropy()));n.get(_).__currentAnisotropy=_.anisotropy}}}function K(E,_){let G=false;if(E.__webglInit===void 0){E.__webglInit=true;_.addEventListener("dispose",B)}const W=_.source;let J=m.get(W);if(J===void 0){J={};m.set(W,J)}const j=H(_);if(j!==E.__cacheKey){if(J[j]===void 0){J[j]={texture:i.createTexture(),usedTimes:0};o.memory.textures++;G=true}J[j].usedTimes++;const Ie=J[E.__cacheKey];if(Ie!==void 0){J[E.__cacheKey].usedTimes--;if(Ie.usedTimes===0){b(_)}}E.__cacheKey=j;E.__webglTexture=J[j].texture}return G}function ue(E,_,G){let W=i.TEXTURE_2D;if(_.isDataArrayTexture||_.isCompressedArrayTexture)W=i.TEXTURE_2D_ARRAY;if(_.isData3DTexture)W=i.TEXTURE_3D;const J=K(E,_);const j=_.source;t.bindTexture(W,E.__webglTexture,i.TEXTURE0+G);const Ie=n.get(j);if(j.version!==Ie.__version||J===true){t.activeTexture(i.TEXTURE0+G);const Ee=$e.getPrimaries($e.workingColorSpace);const ae=_.colorSpace===Pn?null:$e.getPrimaries(_.colorSpace);const oe=_.colorSpace===Pn||Ee===ae?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,_.flipY);i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_.premultiplyAlpha);i.pixelStorei(i.UNPACK_ALIGNMENT,_.unpackAlignment);i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,oe);const Pe=T(_)&&d(_.image)===false;let te=p(_.image,Pe,false,s.maxTextureSize);te=ke(_,te);const at=d(te)||a,Ve=r.convert(_.format,_.colorSpace);let ve=r.convert(_.type),pe=L(_.internalFormat,Ve,ve,_.colorSpace,_.isVideoTexture);z(W,_,at);let me;const Ye=_.mipmaps;const De=a&&_.isVideoTexture!==true&&pe!==Jc;const Qe=Ie.__version===void 0||J===true;const R=j.dataReady;const le=w(_,te,at);if(_.isDepthTexture){pe=i.DEPTH_COMPONENT;if(a){if(_.type===Mn){pe=i.DEPTH_COMPONENT32F}else if(_.type===Nn){pe=i.DEPTH_COMPONENT24}else if(_.type===ui){pe=i.DEPTH24_STENCIL8}else{pe=i.DEPTH_COMPONENT16}}else{if(_.type===Mn){console.error("WebGLRenderer: Floating point depth texture requires WebGL2.")}}if(_.format===di&&pe===i.DEPTH_COMPONENT){if(_.type!==_o&&_.type!==Nn){console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");_.type=Nn;ve=r.convert(_.type)}}if(_.format===ts&&pe===i.DEPTH_COMPONENT){pe=i.DEPTH_STENCIL;if(_.type!==ui){console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");_.type=ui;ve=r.convert(_.type)}}if(Qe){if(De){t.texStorage2D(i.TEXTURE_2D,1,pe,te.width,te.height)}else{t.texImage2D(i.TEXTURE_2D,0,pe,te.width,te.height,0,Ve,ve,null)}}}else if(_.isDataTexture){if(Ye.length>0&&at){if(De&&Qe){t.texStorage2D(i.TEXTURE_2D,le,pe,Ye[0].width,Ye[0].height)}for(let N=0,ne=Ye.length;N<ne;N++){me=Ye[N];if(De){if(R){t.texSubImage2D(i.TEXTURE_2D,N,0,0,me.width,me.height,Ve,ve,me.data)}}else{t.texImage2D(i.TEXTURE_2D,N,pe,me.width,me.height,0,Ve,ve,me.data)}}_.generateMipmaps=false}else{if(De){if(Qe){t.texStorage2D(i.TEXTURE_2D,le,pe,te.width,te.height)}if(R){t.texSubImage2D(i.TEXTURE_2D,0,0,0,te.width,te.height,Ve,ve,te.data)}}else{t.texImage2D(i.TEXTURE_2D,0,pe,te.width,te.height,0,Ve,ve,te.data)}}}else if(_.isCompressedTexture){if(_.isCompressedArrayTexture){if(De&&Qe){t.texStorage3D(i.TEXTURE_2D_ARRAY,le,pe,Ye[0].width,Ye[0].height,te.depth)}for(let N=0,ne=Ye.length;N<ne;N++){me=Ye[N];if(_.format!==Zt){if(Ve!==null){if(De){if(R){t.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,N,0,0,0,me.width,me.height,te.depth,Ve,me.data,0,0)}}else{t.compressedTexImage3D(i.TEXTURE_2D_ARRAY,N,pe,me.width,me.height,te.depth,0,me.data,0,0)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(De){if(R){t.texSubImage3D(i.TEXTURE_2D_ARRAY,N,0,0,0,me.width,me.height,te.depth,Ve,ve,me.data)}}else{t.texImage3D(i.TEXTURE_2D_ARRAY,N,pe,me.width,me.height,te.depth,0,Ve,ve,me.data)}}}}else{if(De&&Qe){t.texStorage2D(i.TEXTURE_2D,le,pe,Ye[0].width,Ye[0].height)}for(let N=0,ne=Ye.length;N<ne;N++){me=Ye[N];if(_.format!==Zt){if(Ve!==null){if(De){if(R){t.compressedTexSubImage2D(i.TEXTURE_2D,N,0,0,me.width,me.height,Ve,me.data)}}else{t.compressedTexImage2D(i.TEXTURE_2D,N,pe,me.width,me.height,0,me.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(De){if(R){t.texSubImage2D(i.TEXTURE_2D,N,0,0,me.width,me.height,Ve,ve,me.data)}}else{t.texImage2D(i.TEXTURE_2D,N,pe,me.width,me.height,0,Ve,ve,me.data)}}}}}else if(_.isDataArrayTexture){if(De){if(Qe){t.texStorage3D(i.TEXTURE_2D_ARRAY,le,pe,te.width,te.height,te.depth)}if(R){t.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,te.width,te.height,te.depth,Ve,ve,te.data)}}else{t.texImage3D(i.TEXTURE_2D_ARRAY,0,pe,te.width,te.height,te.depth,0,Ve,ve,te.data)}}else if(_.isData3DTexture){if(De){if(Qe){t.texStorage3D(i.TEXTURE_3D,le,pe,te.width,te.height,te.depth)}if(R){t.texSubImage3D(i.TEXTURE_3D,0,0,0,0,te.width,te.height,te.depth,Ve,ve,te.data)}}else{t.texImage3D(i.TEXTURE_3D,0,pe,te.width,te.height,te.depth,0,Ve,ve,te.data)}}else if(_.isFramebufferTexture){if(Qe){if(De){t.texStorage2D(i.TEXTURE_2D,le,pe,te.width,te.height)}else{let N=te.width,ne=te.height;for(let ce=0;ce<le;ce++){t.texImage2D(i.TEXTURE_2D,ce,pe,N,ne,0,Ve,ve,null);N>>=1;ne>>=1}}}}else{if(Ye.length>0&&at){if(De&&Qe){const N=it(Ye[0]);t.texStorage2D(i.TEXTURE_2D,le,pe,N.width,N.height)}for(let N=0,ne=Ye.length;N<ne;N++){me=Ye[N];if(De){if(R){t.texSubImage2D(i.TEXTURE_2D,N,0,0,Ve,ve,me)}}else{t.texImage2D(i.TEXTURE_2D,N,pe,Ve,ve,me)}}_.generateMipmaps=false}else{if(De){if(Qe){const N=it(te);t.texStorage2D(i.TEXTURE_2D,le,pe,N.width,N.height)}if(R){t.texSubImage2D(i.TEXTURE_2D,0,0,0,Ve,ve,te)}}else{t.texImage2D(i.TEXTURE_2D,0,pe,Ve,ve,te)}}}if(x(_,at)){y(W)}Ie.__version=j.version;if(_.onUpdate)_.onUpdate(_)}E.__version=_.version}function Ae(E,_,G){if(_.image.length!==6)return;const W=K(E,_);const J=_.source;t.bindTexture(i.TEXTURE_CUBE_MAP,E.__webglTexture,i.TEXTURE0+G);const j=n.get(J);if(J.version!==j.__version||W===true){t.activeTexture(i.TEXTURE0+G);const Ie=$e.getPrimaries($e.workingColorSpace);const Ee=_.colorSpace===Pn?null:$e.getPrimaries(_.colorSpace);const ae=_.colorSpace===Pn||Ie===Ee?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,_.flipY);i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_.premultiplyAlpha);i.pixelStorei(i.UNPACK_ALIGNMENT,_.unpackAlignment);i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,ae);const oe=_.isCompressedTexture||_.image[0].isCompressedTexture;const Pe=_.image[0]&&_.image[0].isDataTexture;const te=[];for(let N=0;N<6;N++){if(!oe&&!Pe){te[N]=p(_.image[N],false,true,s.maxCubemapSize)}else{te[N]=Pe?_.image[N].image:_.image[N]}te[N]=ke(_,te[N])}const at=te[0],Ve=d(at)||a,ve=r.convert(_.format,_.colorSpace),pe=r.convert(_.type),me=L(_.internalFormat,ve,pe,_.colorSpace);const Ye=a&&_.isVideoTexture!==true;const De=j.__version===void 0||W===true;const Qe=J.dataReady;let R=w(_,at,Ve);z(i.TEXTURE_CUBE_MAP,_,Ve);let le;if(oe){if(Ye&&De){t.texStorage2D(i.TEXTURE_CUBE_MAP,R,me,at.width,at.height)}for(let N=0;N<6;N++){le=te[N].mipmaps;for(let ne=0;ne<le.length;ne++){const ce=le[ne];if(_.format!==Zt){if(ve!==null){if(Ye){if(Qe){t.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,ne,0,0,ce.width,ce.height,ve,ce.data)}}else{t.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,ne,me,ce.width,ce.height,0,ce.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")}}else{if(Ye){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,ne,0,0,ce.width,ce.height,ve,pe,ce.data)}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,ne,me,ce.width,ce.height,0,ve,pe,ce.data)}}}}}else{le=_.mipmaps;if(Ye&&De){if(le.length>0)R++;const N=it(te[0]);t.texStorage2D(i.TEXTURE_CUBE_MAP,R,me,N.width,N.height)}for(let N=0;N<6;N++){if(Pe){if(Ye){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,0,0,0,te[N].width,te[N].height,ve,pe,te[N].data)}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,0,me,te[N].width,te[N].height,0,ve,pe,te[N].data)}for(let ne=0;ne<le.length;ne++){const ce=le[ne];const Xe=ce.image[N].image;if(Ye){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,ne+1,0,0,Xe.width,Xe.height,ve,pe,Xe.data)}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,ne+1,me,Xe.width,Xe.height,0,ve,pe,Xe.data)}}}else{if(Ye){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,0,0,0,ve,pe,te[N])}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,0,me,ve,pe,te[N])}for(let ne=0;ne<le.length;ne++){const ce=le[ne];if(Ye){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,ne+1,0,0,ve,pe,ce.image[N])}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+N,ne+1,me,ve,pe,ce.image[N])}}}}}if(x(_,Ve)){y(i.TEXTURE_CUBE_MAP)}j.__version=J.version;if(_.onUpdate)_.onUpdate(_)}E.__version=_.version}function _e(E,_,G,W,J,j){const Ie=r.convert(G.format,G.colorSpace);const Ee=r.convert(G.type);const ae=L(G.internalFormat,Ie,Ee,G.colorSpace);const oe=n.get(_);if(!oe.__hasExternalTextures){const Pe=Math.max(1,_.width>>j);const te=Math.max(1,_.height>>j);if(J===i.TEXTURE_3D||J===i.TEXTURE_2D_ARRAY){t.texImage3D(J,j,ae,Pe,te,_.depth,0,Ie,Ee,null)}else{t.texImage2D(J,j,ae,Pe,te,0,Ie,Ee,null)}}t.bindFramebuffer(i.FRAMEBUFFER,E);if(qe(_)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,W,J,n.get(G).__webglTexture,0,Me(_))}else if(J===i.TEXTURE_2D||J>=i.TEXTURE_CUBE_MAP_POSITIVE_X&&J<=i.TEXTURE_CUBE_MAP_NEGATIVE_Z){i.framebufferTexture2D(i.FRAMEBUFFER,W,J,n.get(G).__webglTexture,j)}t.bindFramebuffer(i.FRAMEBUFFER,null)}function fe(E,_,G){i.bindRenderbuffer(i.RENDERBUFFER,E);if(_.depthBuffer&&!_.stencilBuffer){let W=a===true?i.DEPTH_COMPONENT24:i.DEPTH_COMPONENT16;if(G||qe(_)){const J=_.depthTexture;if(J&&J.isDepthTexture){if(J.type===Mn){W=i.DEPTH_COMPONENT32F}else if(J.type===Nn){W=i.DEPTH_COMPONENT24}}const j=Me(_);if(qe(_)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,j,W,_.width,_.height)}else{i.renderbufferStorageMultisample(i.RENDERBUFFER,j,W,_.width,_.height)}}else{i.renderbufferStorage(i.RENDERBUFFER,W,_.width,_.height)}i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,E)}else if(_.depthBuffer&&_.stencilBuffer){const W=Me(_);if(G&&qe(_)===false){i.renderbufferStorageMultisample(i.RENDERBUFFER,W,i.DEPTH24_STENCIL8,_.width,_.height)}else if(qe(_)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,W,i.DEPTH24_STENCIL8,_.width,_.height)}else{i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,_.width,_.height)}i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,E)}else{const W=_.textures;for(let J=0;J<W.length;J++){const j=W[J];const Ie=r.convert(j.format,j.colorSpace);const Ee=r.convert(j.type);const ae=L(j.internalFormat,Ie,Ee,j.colorSpace);const oe=Me(_);if(G&&qe(_)===false){i.renderbufferStorageMultisample(i.RENDERBUFFER,oe,ae,_.width,_.height)}else if(qe(_)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,oe,ae,_.width,_.height)}else{i.renderbufferStorage(i.RENDERBUFFER,ae,_.width,_.height)}}}i.bindRenderbuffer(i.RENDERBUFFER,null)}function je(E,_){const G=_&&_.isWebGLCubeRenderTarget;if(G)throw new Error("Depth Texture with cube render targets is not supported");t.bindFramebuffer(i.FRAMEBUFFER,E);if(!(_.depthTexture&&_.depthTexture.isDepthTexture)){throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")}if(!n.get(_.depthTexture).__webglTexture||_.depthTexture.image.width!==_.width||_.depthTexture.image.height!==_.height){_.depthTexture.image.width=_.width;_.depthTexture.image.height=_.height;_.depthTexture.needsUpdate=true}q(_.depthTexture,0);const W=n.get(_.depthTexture).__webglTexture;const J=Me(_);if(_.depthTexture.format===di){if(qe(_)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,W,0,J)}else{i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,W,0)}}else if(_.depthTexture.format===ts){if(qe(_)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,W,0,J)}else{i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,W,0)}}else{throw new Error("Unknown depthTexture format")}}function we(E){const _=n.get(E);const G=E.isWebGLCubeRenderTarget===true;if(E.depthTexture&&!_.__autoAllocateDepthBuffer){if(G)throw new Error("target.depthTexture not supported in Cube render targets");je(_.__webglFramebuffer,E)}else{if(G){_.__webglDepthbuffer=[];for(let W=0;W<6;W++){t.bindFramebuffer(i.FRAMEBUFFER,_.__webglFramebuffer[W]);_.__webglDepthbuffer[W]=i.createRenderbuffer();fe(_.__webglDepthbuffer[W],E,false)}}else{t.bindFramebuffer(i.FRAMEBUFFER,_.__webglFramebuffer);_.__webglDepthbuffer=i.createRenderbuffer();fe(_.__webglDepthbuffer,E,false)}}t.bindFramebuffer(i.FRAMEBUFFER,null)}function U(E,_,G){const W=n.get(E);if(_!==void 0){_e(W.__webglFramebuffer,E,E.texture,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,0)}if(G!==void 0){we(E)}}function pt(E){const _=E.texture;const G=n.get(E);const W=n.get(_);E.addEventListener("dispose",Q);const J=E.textures;const j=E.isWebGLCubeRenderTarget===true;const Ie=J.length>1;const Ee=d(E)||a;if(!Ie){if(W.__webglTexture===void 0){W.__webglTexture=i.createTexture()}W.__version=_.version;o.memory.textures++}if(j){G.__webglFramebuffer=[];for(let ae=0;ae<6;ae++){if(a&&_.mipmaps&&_.mipmaps.length>0){G.__webglFramebuffer[ae]=[];for(let oe=0;oe<_.mipmaps.length;oe++){G.__webglFramebuffer[ae][oe]=i.createFramebuffer()}}else{G.__webglFramebuffer[ae]=i.createFramebuffer()}}}else{if(a&&_.mipmaps&&_.mipmaps.length>0){G.__webglFramebuffer=[];for(let ae=0;ae<_.mipmaps.length;ae++){G.__webglFramebuffer[ae]=i.createFramebuffer()}}else{G.__webglFramebuffer=i.createFramebuffer()}if(Ie){if(s.drawBuffers){for(let ae=0,oe=J.length;ae<oe;ae++){const Pe=n.get(J[ae]);if(Pe.__webglTexture===void 0){Pe.__webglTexture=i.createTexture();o.memory.textures++}}}else{console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.")}}if(a&&E.samples>0&&qe(E)===false){G.__webglMultisampledFramebuffer=i.createFramebuffer();G.__webglColorRenderbuffer=[];t.bindFramebuffer(i.FRAMEBUFFER,G.__webglMultisampledFramebuffer);for(let ae=0;ae<J.length;ae++){const oe=J[ae];G.__webglColorRenderbuffer[ae]=i.createRenderbuffer();i.bindRenderbuffer(i.RENDERBUFFER,G.__webglColorRenderbuffer[ae]);const Pe=r.convert(oe.format,oe.colorSpace);const te=r.convert(oe.type);const at=L(oe.internalFormat,Pe,te,oe.colorSpace,E.isXRRenderTarget===true);const Ve=Me(E);i.renderbufferStorageMultisample(i.RENDERBUFFER,Ve,at,E.width,E.height);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+ae,i.RENDERBUFFER,G.__webglColorRenderbuffer[ae])}i.bindRenderbuffer(i.RENDERBUFFER,null);if(E.depthBuffer){G.__webglDepthRenderbuffer=i.createRenderbuffer();fe(G.__webglDepthRenderbuffer,E,true)}t.bindFramebuffer(i.FRAMEBUFFER,null)}}if(j){t.bindTexture(i.TEXTURE_CUBE_MAP,W.__webglTexture);z(i.TEXTURE_CUBE_MAP,_,Ee);for(let ae=0;ae<6;ae++){if(a&&_.mipmaps&&_.mipmaps.length>0){for(let oe=0;oe<_.mipmaps.length;oe++){_e(G.__webglFramebuffer[ae][oe],E,_,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+ae,oe)}}else{_e(G.__webglFramebuffer[ae],E,_,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+ae,0)}}if(x(_,Ee)){y(i.TEXTURE_CUBE_MAP)}t.unbindTexture()}else if(Ie){for(let ae=0,oe=J.length;ae<oe;ae++){const Pe=J[ae];const te=n.get(Pe);t.bindTexture(i.TEXTURE_2D,te.__webglTexture);z(i.TEXTURE_2D,Pe,Ee);_e(G.__webglFramebuffer,E,Pe,i.COLOR_ATTACHMENT0+ae,i.TEXTURE_2D,0);if(x(Pe,Ee)){y(i.TEXTURE_2D)}}t.unbindTexture()}else{let ae=i.TEXTURE_2D;if(E.isWebGL3DRenderTarget||E.isWebGLArrayRenderTarget){if(a){ae=E.isWebGL3DRenderTarget?i.TEXTURE_3D:i.TEXTURE_2D_ARRAY}else{console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")}}t.bindTexture(ae,W.__webglTexture);z(ae,_,Ee);if(a&&_.mipmaps&&_.mipmaps.length>0){for(let oe=0;oe<_.mipmaps.length;oe++){_e(G.__webglFramebuffer[oe],E,_,i.COLOR_ATTACHMENT0,ae,oe)}}else{_e(G.__webglFramebuffer,E,_,i.COLOR_ATTACHMENT0,ae,0)}if(x(_,Ee)){y(ae)}t.unbindTexture()}if(E.depthBuffer){we(E)}}function xe(E){const _=d(E)||a;const G=E.textures;for(let W=0,J=G.length;W<J;W++){const j=G[W];if(x(j,_)){const Ie=E.isWebGLCubeRenderTarget?i.TEXTURE_CUBE_MAP:i.TEXTURE_2D;const Ee=n.get(j).__webglTexture;t.bindTexture(Ie,Ee);y(Ie);t.unbindTexture()}}}function He(E){if(a&&E.samples>0&&qe(E)===false){const _=E.textures;const G=E.width;const W=E.height;let J=i.COLOR_BUFFER_BIT;const j=[];const Ie=E.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT;const Ee=n.get(E);const ae=_.length>1;if(ae){for(let oe=0;oe<_.length;oe++){t.bindFramebuffer(i.FRAMEBUFFER,Ee.__webglMultisampledFramebuffer);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+oe,i.RENDERBUFFER,null);t.bindFramebuffer(i.FRAMEBUFFER,Ee.__webglFramebuffer);i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+oe,i.TEXTURE_2D,null,0)}}t.bindFramebuffer(i.READ_FRAMEBUFFER,Ee.__webglMultisampledFramebuffer);t.bindFramebuffer(i.DRAW_FRAMEBUFFER,Ee.__webglFramebuffer);for(let oe=0;oe<_.length;oe++){j.push(i.COLOR_ATTACHMENT0+oe);if(E.depthBuffer){j.push(Ie)}const Pe=Ee.__ignoreDepthValues!==void 0?Ee.__ignoreDepthValues:false;if(Pe===false){if(E.depthBuffer)J|=i.DEPTH_BUFFER_BIT;if(E.stencilBuffer)J|=i.STENCIL_BUFFER_BIT}if(ae){i.framebufferRenderbuffer(i.READ_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,Ee.__webglColorRenderbuffer[oe])}if(Pe===true){i.invalidateFramebuffer(i.READ_FRAMEBUFFER,[Ie]);i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,[Ie])}if(ae){const te=n.get(_[oe]).__webglTexture;i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,te,0)}i.blitFramebuffer(0,0,G,W,0,0,G,W,J,i.NEAREST);if(c){i.invalidateFramebuffer(i.READ_FRAMEBUFFER,j)}}t.bindFramebuffer(i.READ_FRAMEBUFFER,null);t.bindFramebuffer(i.DRAW_FRAMEBUFFER,null);if(ae){for(let oe=0;oe<_.length;oe++){t.bindFramebuffer(i.FRAMEBUFFER,Ee.__webglMultisampledFramebuffer);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+oe,i.RENDERBUFFER,Ee.__webglColorRenderbuffer[oe]);const Pe=n.get(_[oe]).__webglTexture;t.bindFramebuffer(i.FRAMEBUFFER,Ee.__webglFramebuffer);i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+oe,i.TEXTURE_2D,Pe,0)}}t.bindFramebuffer(i.DRAW_FRAMEBUFFER,Ee.__webglMultisampledFramebuffer)}}function Me(E){return Math.min(s.maxSamples,E.samples)}function qe(E){const _=n.get(E);return a&&E.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===true&&_.__useRenderToTexture!==false}function ze(E){const _=o.render.frame;if(u.get(E)!==_){u.set(E,_);E.update()}}function ke(E,_){const G=E.colorSpace;const W=E.format;const J=E.type;if(E.isCompressedTexture===true||E.isVideoTexture===true||E.format===Ja)return _;if(G!==Vn&&G!==Pn){if($e.getTransfer(G)===Je){if(a===false){if(e.has("EXT_sRGB")===true&&W===Zt){E.format=Ja;E.minFilter=wt;E.generateMipmaps=false}else{_=nh.sRGBToLinear(_)}}else{if(W!==Zt||J!==Bn){console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.")}}}else{console.error("THREE.WebGLTextures: Unsupported texture color space:",G)}}return _}function it(E){if(typeof HTMLImageElement!=="undefined"&&E instanceof HTMLImageElement){h.width=E.naturalWidth||E.width;h.height=E.naturalHeight||E.height}else if(typeof VideoFrame!=="undefined"&&E instanceof VideoFrame){h.width=E.displayWidth;h.height=E.displayHeight}else{h.width=E.width;h.height=E.height}return h}this.allocateTextureUnit=V;this.resetTextureUnits=C;this.setTexture2D=q;this.setTexture2DArray=k;this.setTexture3D=X;this.setTextureCube=Y;this.rebindTextures=U;this.setupRenderTarget=pt;this.updateRenderTargetMipmap=xe;this.updateMultisampleRenderTarget=He;this.setupDepthRenderbuffer=we;this.setupFrameBufferTexture=_e;this.useMultisampledRTT=qe}function M_(i,e,t){const n=t.isWebGL2;function s(r,o=Pn){let a;const l=$e.getTransfer(o);if(r===Bn)return i.UNSIGNED_BYTE;if(r===Yc)return i.UNSIGNED_SHORT_4_4_4_4;if(r===jc)return i.UNSIGNED_SHORT_5_5_5_1;if(r===ed)return i.BYTE;if(r===td)return i.SHORT;if(r===_o)return i.UNSIGNED_SHORT;if(r===qc)return i.INT;if(r===Nn)return i.UNSIGNED_INT;if(r===Mn)return i.FLOAT;if(r===kn){if(n)return i.HALF_FLOAT;a=e.get("OES_texture_half_float");if(a!==null){return a.HALF_FLOAT_OES}else{return null}}if(r===nd)return i.ALPHA;if(r===Zt)return i.RGBA;if(r===id)return i.LUMINANCE;if(r===sd)return i.LUMINANCE_ALPHA;if(r===di)return i.DEPTH_COMPONENT;if(r===ts)return i.DEPTH_STENCIL;if(r===Ja){a=e.get("EXT_sRGB");if(a!==null){return a.SRGB_ALPHA_EXT}else{return null}}if(r===rd)return i.RED;if(r===$c)return i.RED_INTEGER;if(r===ad)return i.RG;if(r===Kc)return i.RG_INTEGER;if(r===Zc)return i.RGBA_INTEGER;if(r===sa||r===ra||r===aa||r===oa){if(l===Je){a=e.get("WEBGL_compressed_texture_s3tc_srgb");if(a!==null){if(r===sa)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(r===ra)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(r===aa)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(r===oa)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{return null}}else{a=e.get("WEBGL_compressed_texture_s3tc");if(a!==null){if(r===sa)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(r===ra)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(r===aa)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(r===oa)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else{return null}}}if(r===jo||r===$o||r===Ko||r===Zo){a=e.get("WEBGL_compressed_texture_pvrtc");if(a!==null){if(r===jo)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(r===$o)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(r===Ko)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(r===Zo)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else{return null}}if(r===Jc){a=e.get("WEBGL_compressed_texture_etc1");if(a!==null){return a.COMPRESSED_RGB_ETC1_WEBGL}else{return null}}if(r===Jo||r===Qo){a=e.get("WEBGL_compressed_texture_etc");if(a!==null){if(r===Jo)return l===Je?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(r===Qo)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else{return null}}if(r===el||r===tl||r===nl||r===il||r===sl||r===rl||r===al||r===ol||r===ll||r===cl||r===hl||r===ul||r===dl||r===fl){a=e.get("WEBGL_compressed_texture_astc");if(a!==null){if(r===el)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(r===tl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(r===nl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(r===il)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(r===sl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(r===rl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(r===al)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(r===ol)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(r===ll)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(r===cl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(r===hl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(r===ul)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(r===dl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(r===fl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else{return null}}if(r===la||r===pl||r===ml){a=e.get("EXT_texture_compression_bptc");if(a!==null){if(r===la)return l===Je?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(r===pl)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(r===ml)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else{return null}}if(r===od||r===gl||r===_l||r===vl){a=e.get("EXT_texture_compression_rgtc");if(a!==null){if(r===la)return a.COMPRESSED_RED_RGTC1_EXT;if(r===gl)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(r===_l)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(r===vl)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else{return null}}if(r===ui){if(n)return i.UNSIGNED_INT_24_8;a=e.get("WEBGL_depth_texture");if(a!==null){return a.UNSIGNED_INT_24_8_WEBGL}else{return null}}return i[r]!==void 0?i[r]:null}return{convert:s}}class E_ extends kt{constructor(e=[]){super();this.isArrayCamera=true;this.cameras=e}}class pr extends Lt{constructor(){super();this.isGroup=true;this.type="Group"}}const y_={type:"move"};class Na{constructor(){this._targetRay=null;this._grip=null;this._hand=null}getHandSpace(){if(this._hand===null){this._hand=new pr;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false}}return this._hand}getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new pr;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new P;this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new P}return this._targetRay}getGripSpace(){if(this._grip===null){this._grip=new pr;this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new P;this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new P}return this._grip}dispatchEvent(e){if(this._targetRay!==null){this._targetRay.dispatchEvent(e)}if(this._grip!==null){this._grip.dispatchEvent(e)}if(this._hand!==null){this._hand.dispatchEvent(e)}return this}connect(e){if(e&&e.hand){const t=this._hand;if(t){for(const n of e.hand.values()){this._getHandJoint(t,n)}}}this.dispatchEvent({type:"connected",data:e});return this}disconnect(e){this.dispatchEvent({type:"disconnected",data:e});if(this._targetRay!==null){this._targetRay.visible=false}if(this._grip!==null){this._grip.visible=false}if(this._hand!==null){this._hand.visible=false}return this}update(e,t,n){let s=null;let r=null;let o=null;const a=this._targetRay;const l=this._grip;const c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(c&&e.hand){o=true;for(const S of e.hand.values()){const p=t.getJointPose(S,n);const d=this._getHandJoint(c,S);if(p!==null){d.matrix.fromArray(p.transform.matrix);d.matrix.decompose(d.position,d.rotation,d.scale);d.matrixWorldNeedsUpdate=true;d.jointRadius=p.radius}d.visible=p!==null}const h=c.joints["index-finger-tip"];const u=c.joints["thumb-tip"];const f=h.position.distanceTo(u.position);const m=.02;const g=.005;if(c.inputState.pinching&&f>m+g){c.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})}else if(!c.inputState.pinching&&f<=m-g){c.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this})}}else{if(l!==null&&e.gripSpace){r=t.getPose(e.gripSpace,n);if(r!==null){l.matrix.fromArray(r.transform.matrix);l.matrix.decompose(l.position,l.rotation,l.scale);l.matrixWorldNeedsUpdate=true;if(r.linearVelocity){l.hasLinearVelocity=true;l.linearVelocity.copy(r.linearVelocity)}else{l.hasLinearVelocity=false}if(r.angularVelocity){l.hasAngularVelocity=true;l.angularVelocity.copy(r.angularVelocity)}else{l.hasAngularVelocity=false}}}}if(a!==null){s=t.getPose(e.targetRaySpace,n);if(s===null&&r!==null){s=r}if(s!==null){a.matrix.fromArray(s.transform.matrix);a.matrix.decompose(a.position,a.rotation,a.scale);a.matrixWorldNeedsUpdate=true;if(s.linearVelocity){a.hasLinearVelocity=true;a.linearVelocity.copy(s.linearVelocity)}else{a.hasLinearVelocity=false}if(s.angularVelocity){a.hasAngularVelocity=true;a.angularVelocity.copy(s.angularVelocity)}else{a.hasAngularVelocity=false}this.dispatchEvent(y_)}}}if(a!==null){a.visible=s!==null}if(l!==null){l.visible=r!==null}if(c!==null){c.visible=o!==null}return this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new pr;n.matrixAutoUpdate=false;n.visible=false;e.joints[t.jointName]=n;e.add(n)}return e.joints[t.jointName]}}const T_=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`;const b_=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepthEXT = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepthEXT = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class A_{constructor(){this.texture=null;this.mesh=null;this.depthNear=0;this.depthFar=0}init(e,t,n){if(this.texture===null){const s=new Tt;const r=e.properties.get(s);r.__webglTexture=t.texture;if(t.depthNear!=n.depthNear||t.depthFar!=n.depthFar){this.depthNear=t.depthNear;this.depthFar=t.depthFar}this.texture=s}}render(e,t){if(this.texture!==null){if(this.mesh===null){const n=t.cameras[0].viewport;const s=new Nt({extensions:{fragDepth:true},vertexShader:T_,fragmentShader:b_,uniforms:{depthColor:{value:this.texture},depthWidth:{value:n.z},depthHeight:{value:n.w}}});this.mesh=new Vt(new Vs(20,20),s)}e.render(this.mesh,t)}}reset(){this.texture=null;this.mesh=null}}class w_ extends as{constructor(e,t){super();const n=this;let s=null;let r=1;let o=null;let a="local-floor";let l=1;let c=null;let h=null;let u=null;let f=null;let m=null;let g=null;const S=new A_;const p=t.getContextAttributes();let d=null;let T=null;const x=[];const y=[];const L=new Be;let w=null;const A=new kt;A.layers.enable(1);A.viewport=new gt;const B=new kt;B.layers.enable(2);B.viewport=new gt;const Q=[A,B];const v=new E_;v.layers.enable(1);v.layers.enable(2);let b=null;let ee=null;this.cameraAutoUpdate=true;this.enabled=false;this.isPresenting=false;this.getController=function(z){let K=x[z];if(K===void 0){K=new Na;x[z]=K}return K.getTargetRaySpace()};this.getControllerGrip=function(z){let K=x[z];if(K===void 0){K=new Na;x[z]=K}return K.getGripSpace()};this.getHand=function(z){let K=x[z];if(K===void 0){K=new Na;x[z]=K}return K.getHandSpace()};function $(z){const K=y.indexOf(z.inputSource);if(K===-1){return}const ue=x[K];if(ue!==void 0){ue.update(z.inputSource,z.frame,c||o);ue.dispatchEvent({type:z.type,data:z.inputSource})}}function C(){s.removeEventListener("select",$);s.removeEventListener("selectstart",$);s.removeEventListener("selectend",$);s.removeEventListener("squeeze",$);s.removeEventListener("squeezestart",$);s.removeEventListener("squeezeend",$);s.removeEventListener("end",C);s.removeEventListener("inputsourceschange",V);for(let z=0;z<x.length;z++){const K=y[z];if(K===null)continue;y[z]=null;x[z].disconnect(K)}b=null;ee=null;S.reset();e.setRenderTarget(d);m=null;f=null;u=null;s=null;T=null;Re.stop();n.isPresenting=false;e.setPixelRatio(w);e.setSize(L.width,L.height,false);n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(z){r=z;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")}};this.setReferenceSpaceType=function(z){a=z;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")}};this.getReferenceSpace=function(){return c||o};this.setReferenceSpace=function(z){c=z};this.getBaseLayer=function(){return f!==null?f:m};this.getBinding=function(){return u};this.getFrame=function(){return g};this.getSession=function(){return s};this.setSession=async function(z){s=z;if(s!==null){d=e.getRenderTarget();s.addEventListener("select",$);s.addEventListener("selectstart",$);s.addEventListener("selectend",$);s.addEventListener("squeeze",$);s.addEventListener("squeezestart",$);s.addEventListener("squeezeend",$);s.addEventListener("end",C);s.addEventListener("inputsourceschange",V);if(p.xrCompatible!==true){await t.makeXRCompatible()}w=e.getPixelRatio();e.getSize(L);if(s.renderState.layers===void 0||e.capabilities.isWebGL2===false){const K={antialias:s.renderState.layers===void 0?p.antialias:true,alpha:true,depth:p.depth,stencil:p.stencil,framebufferScaleFactor:r};m=new XRWebGLLayer(s,t,K);s.updateRenderState({baseLayer:m});e.setPixelRatio(1);e.setSize(m.framebufferWidth,m.framebufferHeight,false);T=new rn(m.framebufferWidth,m.framebufferHeight,{format:Zt,type:Bn,colorSpace:e.outputColorSpace,stencilBuffer:p.stencil})}else{let K=null;let ue=null;let Ae=null;if(p.depth){Ae=p.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24;K=p.stencil?ts:di;ue=p.stencil?ui:Nn}const _e={colorFormat:t.RGBA8,depthFormat:Ae,scaleFactor:r};u=new XRWebGLBinding(s,t);f=u.createProjectionLayer(_e);s.updateRenderState({layers:[f]});e.setPixelRatio(1);e.setSize(f.textureWidth,f.textureHeight,false);T=new rn(f.textureWidth,f.textureHeight,{format:Zt,type:Bn,depthTexture:new gh(f.textureWidth,f.textureHeight,ue,void 0,void 0,void 0,void 0,void 0,void 0,K),stencilBuffer:p.stencil,colorSpace:e.outputColorSpace,samples:p.antialias?4:0});const fe=e.properties.get(T);fe.__ignoreDepthValues=f.ignoreDepthValues}T.isXRRenderTarget=true;this.setFoveation(l);c=null;o=await s.requestReferenceSpace(a);Re.setContext(s);Re.start();n.isPresenting=true;n.dispatchEvent({type:"sessionstart"})}};this.getEnvironmentBlendMode=function(){if(s!==null){return s.environmentBlendMode}};function V(z){for(let K=0;K<z.removed.length;K++){const ue=z.removed[K];const Ae=y.indexOf(ue);if(Ae>=0){y[Ae]=null;x[Ae].disconnect(ue)}}for(let K=0;K<z.added.length;K++){const ue=z.added[K];let Ae=y.indexOf(ue);if(Ae===-1){for(let fe=0;fe<x.length;fe++){if(fe>=y.length){y.push(ue);Ae=fe;break}else if(y[fe]===null){y[fe]=ue;Ae=fe;break}}if(Ae===-1)break}const _e=x[Ae];if(_e){_e.connect(ue)}}}const H=new P;const q=new P;function k(z,K,ue){H.setFromMatrixPosition(K.matrixWorld);q.setFromMatrixPosition(ue.matrixWorld);const Ae=H.distanceTo(q);const _e=K.projectionMatrix.elements;const fe=ue.projectionMatrix.elements;const je=_e[14]/(_e[10]-1);const we=_e[14]/(_e[10]+1);const U=(_e[9]+1)/_e[5];const pt=(_e[9]-1)/_e[5];const xe=(_e[8]-1)/_e[0];const He=(fe[8]+1)/fe[0];const Me=je*xe;const qe=je*He;const ze=Ae/(-xe+He);const ke=ze*-xe;K.matrixWorld.decompose(z.position,z.quaternion,z.scale);z.translateX(ke);z.translateZ(ze);z.matrixWorld.compose(z.position,z.quaternion,z.scale);z.matrixWorldInverse.copy(z.matrixWorld).invert();const it=je+ze;const E=we+ze;const _=Me-ke;const G=qe+(Ae-ke);const W=U*we/E*it;const J=pt*we/E*it;z.projectionMatrix.makePerspective(_,G,W,J,it,E);z.projectionMatrixInverse.copy(z.projectionMatrix).invert()}function X(z,K){if(K===null){z.matrixWorld.copy(z.matrix)}else{z.matrixWorld.multiplyMatrices(K.matrixWorld,z.matrix)}z.matrixWorldInverse.copy(z.matrixWorld).invert()}this.updateCamera=function(z){if(s===null)return;if(S.texture!==null){z.near=S.depthNear;z.far=S.depthFar}v.near=B.near=A.near=z.near;v.far=B.far=A.far=z.far;if(b!==v.near||ee!==v.far){s.updateRenderState({depthNear:v.near,depthFar:v.far});b=v.near;ee=v.far;A.near=b;A.far=ee;B.near=b;B.far=ee;A.updateProjectionMatrix();B.updateProjectionMatrix();z.updateProjectionMatrix()}const K=z.parent;const ue=v.cameras;X(v,K);for(let Ae=0;Ae<ue.length;Ae++){X(ue[Ae],K)}if(ue.length===2){k(v,A,B)}else{v.projectionMatrix.copy(A.projectionMatrix)}Y(z,v,K)};function Y(z,K,ue){if(ue===null){z.matrix.copy(K.matrixWorld)}else{z.matrix.copy(ue.matrixWorld);z.matrix.invert();z.matrix.multiply(K.matrixWorld)}z.matrix.decompose(z.position,z.quaternion,z.scale);z.updateMatrixWorld(true);z.projectionMatrix.copy(K.projectionMatrix);z.projectionMatrixInverse.copy(K.projectionMatrixInverse);if(z.isPerspectiveCamera){z.fov=Qa*2*Math.atan(1/z.projectionMatrix.elements[5]);z.zoom=1}}this.getCamera=function(){return v};this.getFoveation=function(){if(f===null&&m===null){return void 0}return l};this.setFoveation=function(z){l=z;if(f!==null){f.fixedFoveation=z}if(m!==null&&m.fixedFoveation!==void 0){m.fixedFoveation=z}};this.hasDepthSensing=function(){return S.texture!==null};let re=null;function de(z,K){h=K.getViewerPose(c||o);g=K;if(h!==null){const ue=h.views;if(m!==null){e.setRenderTargetFramebuffer(T,m.framebuffer);e.setRenderTarget(T)}let Ae=false;if(ue.length!==v.cameras.length){v.cameras.length=0;Ae=true}for(let fe=0;fe<ue.length;fe++){const je=ue[fe];let we=null;if(m!==null){we=m.getViewport(je)}else{const pt=u.getViewSubImage(f,je);we=pt.viewport;if(fe===0){e.setRenderTargetTextures(T,pt.colorTexture,f.ignoreDepthValues?void 0:pt.depthStencilTexture);e.setRenderTarget(T)}}let U=Q[fe];if(U===void 0){U=new kt;U.layers.enable(fe);U.viewport=new gt;Q[fe]=U}U.matrix.fromArray(je.transform.matrix);U.matrix.decompose(U.position,U.quaternion,U.scale);U.projectionMatrix.fromArray(je.projectionMatrix);U.projectionMatrixInverse.copy(U.projectionMatrix).invert();U.viewport.set(we.x,we.y,we.width,we.height);if(fe===0){v.matrix.copy(U.matrix);v.matrix.decompose(v.position,v.quaternion,v.scale)}if(Ae===true){v.cameras.push(U)}}const _e=s.enabledFeatures;if(_e&&_e.includes("depth-sensing")){const fe=u.getDepthInformation(ue[0]);if(fe&&fe.isValid&&fe.texture){S.init(e,fe,s.renderState)}}}for(let ue=0;ue<x.length;ue++){const Ae=y[ue];const _e=x[ue];if(Ae!==null&&_e!==void 0){_e.update(Ae,K,c||o)}}S.render(e,v);if(re)re(z,K);if(K.detectedPlanes){n.dispatchEvent({type:"planesdetected",data:K})}g=null}const Re=new ph;Re.setAnimationLoop(de);this.setAnimationLoop=function(z){re=z};this.dispose=function(){}}}const Jn=new an;const C_=new rt;function R_(i,e){function t(p,d){if(p.matrixAutoUpdate===true){p.updateMatrix()}d.value.copy(p.matrix)}function n(p,d){d.color.getRGB(p.fogColor.value,hh(i));if(d.isFog){p.fogNear.value=d.near;p.fogFar.value=d.far}else if(d.isFogExp2){p.fogDensity.value=d.density}}function s(p,d,T,x,y){if(d.isMeshBasicMaterial){r(p,d)}else if(d.isMeshLambertMaterial){r(p,d)}else if(d.isMeshToonMaterial){r(p,d);u(p,d)}else if(d.isMeshPhongMaterial){r(p,d);h(p,d)}else if(d.isMeshStandardMaterial){r(p,d);f(p,d);if(d.isMeshPhysicalMaterial){m(p,d,y)}}else if(d.isMeshMatcapMaterial){r(p,d);g(p,d)}else if(d.isMeshDepthMaterial){r(p,d)}else if(d.isMeshDistanceMaterial){r(p,d);S(p,d)}else if(d.isMeshNormalMaterial){r(p,d)}else if(d.isLineBasicMaterial){o(p,d);if(d.isLineDashedMaterial){a(p,d)}}else if(d.isPointsMaterial){l(p,d,T,x)}else if(d.isSpriteMaterial){c(p,d)}else if(d.isShadowMaterial){p.color.value.copy(d.color);p.opacity.value=d.opacity}else if(d.isShaderMaterial){d.uniformsNeedUpdate=false}}function r(p,d){p.opacity.value=d.opacity;if(d.color){p.diffuse.value.copy(d.color)}if(d.emissive){p.emissive.value.copy(d.emissive).multiplyScalar(d.emissiveIntensity)}if(d.map){p.map.value=d.map;t(d.map,p.mapTransform)}if(d.alphaMap){p.alphaMap.value=d.alphaMap;t(d.alphaMap,p.alphaMapTransform)}if(d.bumpMap){p.bumpMap.value=d.bumpMap;t(d.bumpMap,p.bumpMapTransform);p.bumpScale.value=d.bumpScale;if(d.side===Rt){p.bumpScale.value*=-1}}if(d.normalMap){p.normalMap.value=d.normalMap;t(d.normalMap,p.normalMapTransform);p.normalScale.value.copy(d.normalScale);if(d.side===Rt){p.normalScale.value.negate()}}if(d.displacementMap){p.displacementMap.value=d.displacementMap;t(d.displacementMap,p.displacementMapTransform);p.displacementScale.value=d.displacementScale;p.displacementBias.value=d.displacementBias}if(d.emissiveMap){p.emissiveMap.value=d.emissiveMap;t(d.emissiveMap,p.emissiveMapTransform)}if(d.specularMap){p.specularMap.value=d.specularMap;t(d.specularMap,p.specularMapTransform)}if(d.alphaTest>0){p.alphaTest.value=d.alphaTest}const T=e.get(d);const x=T.envMap;const y=T.envMapRotation;if(x){p.envMap.value=x;Jn.copy(y);Jn.x*=-1;Jn.y*=-1;Jn.z*=-1;if(x.isCubeTexture&&x.isRenderTargetTexture===false){Jn.y*=-1;Jn.z*=-1}p.envMapRotation.value.setFromMatrix4(C_.makeRotationFromEuler(Jn));p.flipEnvMap.value=x.isCubeTexture&&x.isRenderTargetTexture===false?-1:1;p.reflectivity.value=d.reflectivity;p.ior.value=d.ior;p.refractionRatio.value=d.refractionRatio}if(d.lightMap){p.lightMap.value=d.lightMap;const L=i._useLegacyLights===true?Math.PI:1;p.lightMapIntensity.value=d.lightMapIntensity*L;t(d.lightMap,p.lightMapTransform)}if(d.aoMap){p.aoMap.value=d.aoMap;p.aoMapIntensity.value=d.aoMapIntensity;t(d.aoMap,p.aoMapTransform)}}function o(p,d){p.diffuse.value.copy(d.color);p.opacity.value=d.opacity;if(d.map){p.map.value=d.map;t(d.map,p.mapTransform)}}function a(p,d){p.dashSize.value=d.dashSize;p.totalSize.value=d.dashSize+d.gapSize;p.scale.value=d.scale}function l(p,d,T,x){p.diffuse.value.copy(d.color);p.opacity.value=d.opacity;p.size.value=d.size*T;p.scale.value=x*.5;if(d.map){p.map.value=d.map;t(d.map,p.uvTransform)}if(d.alphaMap){p.alphaMap.value=d.alphaMap;t(d.alphaMap,p.alphaMapTransform)}if(d.alphaTest>0){p.alphaTest.value=d.alphaTest}}function c(p,d){p.diffuse.value.copy(d.color);p.opacity.value=d.opacity;p.rotation.value=d.rotation;if(d.map){p.map.value=d.map;t(d.map,p.mapTransform)}if(d.alphaMap){p.alphaMap.value=d.alphaMap;t(d.alphaMap,p.alphaMapTransform)}if(d.alphaTest>0){p.alphaTest.value=d.alphaTest}}function h(p,d){p.specular.value.copy(d.specular);p.shininess.value=Math.max(d.shininess,1e-4)}function u(p,d){if(d.gradientMap){p.gradientMap.value=d.gradientMap}}function f(p,d){p.metalness.value=d.metalness;if(d.metalnessMap){p.metalnessMap.value=d.metalnessMap;t(d.metalnessMap,p.metalnessMapTransform)}p.roughness.value=d.roughness;if(d.roughnessMap){p.roughnessMap.value=d.roughnessMap;t(d.roughnessMap,p.roughnessMapTransform)}const T=e.get(d).envMap;if(T){p.envMapIntensity.value=d.envMapIntensity}}function m(p,d,T){p.ior.value=d.ior;if(d.sheen>0){p.sheenColor.value.copy(d.sheenColor).multiplyScalar(d.sheen);p.sheenRoughness.value=d.sheenRoughness;if(d.sheenColorMap){p.sheenColorMap.value=d.sheenColorMap;t(d.sheenColorMap,p.sheenColorMapTransform)}if(d.sheenRoughnessMap){p.sheenRoughnessMap.value=d.sheenRoughnessMap;t(d.sheenRoughnessMap,p.sheenRoughnessMapTransform)}}if(d.clearcoat>0){p.clearcoat.value=d.clearcoat;p.clearcoatRoughness.value=d.clearcoatRoughness;if(d.clearcoatMap){p.clearcoatMap.value=d.clearcoatMap;t(d.clearcoatMap,p.clearcoatMapTransform)}if(d.clearcoatRoughnessMap){p.clearcoatRoughnessMap.value=d.clearcoatRoughnessMap;t(d.clearcoatRoughnessMap,p.clearcoatRoughnessMapTransform)}if(d.clearcoatNormalMap){p.clearcoatNormalMap.value=d.clearcoatNormalMap;t(d.clearcoatNormalMap,p.clearcoatNormalMapTransform);p.clearcoatNormalScale.value.copy(d.clearcoatNormalScale);if(d.side===Rt){p.clearcoatNormalScale.value.negate()}}}if(d.iridescence>0){p.iridescence.value=d.iridescence;p.iridescenceIOR.value=d.iridescenceIOR;p.iridescenceThicknessMinimum.value=d.iridescenceThicknessRange[0];p.iridescenceThicknessMaximum.value=d.iridescenceThicknessRange[1];if(d.iridescenceMap){p.iridescenceMap.value=d.iridescenceMap;t(d.iridescenceMap,p.iridescenceMapTransform)}if(d.iridescenceThicknessMap){p.iridescenceThicknessMap.value=d.iridescenceThicknessMap;t(d.iridescenceThicknessMap,p.iridescenceThicknessMapTransform)}}if(d.transmission>0){p.transmission.value=d.transmission;p.transmissionSamplerMap.value=T.texture;p.transmissionSamplerSize.value.set(T.width,T.height);if(d.transmissionMap){p.transmissionMap.value=d.transmissionMap;t(d.transmissionMap,p.transmissionMapTransform)}p.thickness.value=d.thickness;if(d.thicknessMap){p.thicknessMap.value=d.thicknessMap;t(d.thicknessMap,p.thicknessMapTransform)}p.attenuationDistance.value=d.attenuationDistance;p.attenuationColor.value.copy(d.attenuationColor)}if(d.anisotropy>0){p.anisotropyVector.value.set(d.anisotropy*Math.cos(d.anisotropyRotation),d.anisotropy*Math.sin(d.anisotropyRotation));if(d.anisotropyMap){p.anisotropyMap.value=d.anisotropyMap;t(d.anisotropyMap,p.anisotropyMapTransform)}}p.specularIntensity.value=d.specularIntensity;p.specularColor.value.copy(d.specularColor);if(d.specularColorMap){p.specularColorMap.value=d.specularColorMap;t(d.specularColorMap,p.specularColorMapTransform)}if(d.specularIntensityMap){p.specularIntensityMap.value=d.specularIntensityMap;t(d.specularIntensityMap,p.specularIntensityMapTransform)}}function g(p,d){if(d.matcap){p.matcap.value=d.matcap}}function S(p,d){const T=e.get(d).light;p.referencePosition.value.setFromMatrixPosition(T.matrixWorld);p.nearDistance.value=T.shadow.camera.near;p.farDistance.value=T.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:s}}function L_(i,e,t,n){let s={};let r={};let o=[];const a=t.isWebGL2?i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(T,x){const y=x.program;n.uniformBlockBinding(T,y)}function c(T,x){let y=s[T.id];if(y===void 0){g(T);y=h(T);s[T.id]=y;T.addEventListener("dispose",p)}const L=x.program;n.updateUBOMapping(T,L);const w=e.render.frame;if(r[T.id]!==w){f(T);r[T.id]=w}}function h(T){const x=u();T.__bindingPointIndex=x;const y=i.createBuffer();const L=T.__size;const w=T.usage;i.bindBuffer(i.UNIFORM_BUFFER,y);i.bufferData(i.UNIFORM_BUFFER,L,w);i.bindBuffer(i.UNIFORM_BUFFER,null);i.bindBufferBase(i.UNIFORM_BUFFER,x,y);return y}function u(){for(let T=0;T<a;T++){if(o.indexOf(T)===-1){o.push(T);return T}}console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");return 0}function f(T){const x=s[T.id];const y=T.uniforms;const L=T.__cache;i.bindBuffer(i.UNIFORM_BUFFER,x);for(let w=0,A=y.length;w<A;w++){const B=Array.isArray(y[w])?y[w]:[y[w]];for(let Q=0,v=B.length;Q<v;Q++){const b=B[Q];if(m(b,w,Q,L)===true){const ee=b.__offset;const $=Array.isArray(b.value)?b.value:[b.value];let C=0;for(let V=0;V<$.length;V++){const H=$[V];const q=S(H);if(typeof H==="number"||typeof H==="boolean"){b.__data[0]=H;i.bufferSubData(i.UNIFORM_BUFFER,ee+C,b.__data)}else if(H.isMatrix3){b.__data[0]=H.elements[0];b.__data[1]=H.elements[1];b.__data[2]=H.elements[2];b.__data[3]=0;b.__data[4]=H.elements[3];b.__data[5]=H.elements[4];b.__data[6]=H.elements[5];b.__data[7]=0;b.__data[8]=H.elements[6];b.__data[9]=H.elements[7];b.__data[10]=H.elements[8];b.__data[11]=0}else{H.toArray(b.__data,C);C+=q.storage/Float32Array.BYTES_PER_ELEMENT}}i.bufferSubData(i.UNIFORM_BUFFER,ee,b.__data)}}}i.bindBuffer(i.UNIFORM_BUFFER,null)}function m(T,x,y,L){const w=T.value;const A=x+"_"+y;if(L[A]===void 0){if(typeof w==="number"||typeof w==="boolean"){L[A]=w}else{L[A]=w.clone()}return true}else{const B=L[A];if(typeof w==="number"||typeof w==="boolean"){if(B!==w){L[A]=w;return true}}else{if(B.equals(w)===false){B.copy(w);return true}}}return false}function g(T){const x=T.uniforms;let y=0;const L=16;for(let A=0,B=x.length;A<B;A++){const Q=Array.isArray(x[A])?x[A]:[x[A]];for(let v=0,b=Q.length;v<b;v++){const ee=Q[v];const $=Array.isArray(ee.value)?ee.value:[ee.value];for(let C=0,V=$.length;C<V;C++){const H=$[C];const q=S(H);const k=y%L;if(k!==0&&L-k<q.boundary){y+=L-k}ee.__data=new Float32Array(q.storage/Float32Array.BYTES_PER_ELEMENT);ee.__offset=y;y+=q.storage}}}const w=y%L;if(w>0)y+=L-w;T.__size=y;T.__cache={};return this}function S(T){const x={boundary:0,storage:0};if(typeof T==="number"||typeof T==="boolean"){x.boundary=4;x.storage=4}else if(T.isVector2){x.boundary=8;x.storage=8}else if(T.isVector3||T.isColor){x.boundary=16;x.storage=12}else if(T.isVector4){x.boundary=16;x.storage=16}else if(T.isMatrix3){x.boundary=48;x.storage=48}else if(T.isMatrix4){x.boundary=64;x.storage=64}else if(T.isTexture){console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.")}else{console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",T)}return x}function p(T){const x=T.target;x.removeEventListener("dispose",p);const y=o.indexOf(x.__bindingPointIndex);o.splice(y,1);i.deleteBuffer(s[x.id]);delete s[x.id];delete r[x.id]}function d(){for(const T in s){i.deleteBuffer(s[T])}o=[];s={};r={}}return{bind:l,update:c,dispose:d}}class Eh{constructor(e={}){const{canvas:t=xd(),context:n=null,depth:s=true,stencil:r=true,alpha:o=false,antialias:a=false,premultipliedAlpha:l=true,preserveDrawingBuffer:c=false,powerPreference:h="default",failIfMajorPerformanceCaveat:u=false}=e;this.isWebGLRenderer=true;let f;if(n!==null){f=n.getContextAttributes().alpha}else{f=o}const m=new Uint32Array(4);const g=new Int32Array(4);let S=null;let p=null;const d=[];const T=[];this.domElement=t;this.debug={checkShaderErrors:true,onShaderError:null};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this._outputColorSpace=Qt;this._useLegacyLights=false;this.toneMapping=On;this.toneMappingExposure=1;const x=this;let y=false;let L=0;let w=0;let A=null;let B=-1;let Q=null;const v=new gt;const b=new gt;let ee=null;const $=new We(0);let C=0;let V=t.width;let H=t.height;let q=1;let k=null;let X=null;const Y=new gt(0,0,V,H);const re=new gt(0,0,V,H);let de=false;const Re=new fh;let z=false;let K=false;let ue=null;const Ae=new rt;const _e=new Be;const fe=new P;const je={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function we(){return A===null?q:1}let U=n;function pt(M,D){for(let F=0;F<M.length;F++){const O=M[F];const I=t.getContext(O,D);if(I!==null)return I}return null}try{const M={alpha:true,depth:s,stencil:r,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if("setAttribute"in t)t.setAttribute("data-engine",`three.js r${mo}`);t.addEventListener("webglcontextlost",Qe,false);t.addEventListener("webglcontextrestored",R,false);t.addEventListener("webglcontextcreationerror",le,false);if(U===null){const D=["webgl2","webgl","experimental-webgl"];if(x.isWebGL1Renderer===true){D.shift()}U=pt(D,M);if(U===null){if(pt(D)){throw new Error("Error creating WebGL context with your selected attributes.")}else{throw new Error("Error creating WebGL context.")}}}if(typeof WebGLRenderingContext!=="undefined"&&U instanceof WebGLRenderingContext){console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.")}if(U.getShaderPrecisionFormat===void 0){U.getShaderPrecisionFormat=function(){return{"rangeMin":1,"rangeMax":1,"precision":1}}}}catch(M){console.error("THREE.WebGLRenderer: "+M.message);throw M}let xe,He,Me,qe;let ze,ke,it,E,_,G,W;let J,j,Ie,Ee,ae,oe;let Pe,te,at,Ve;let ve,pe,me;function Ye(){xe=new Fm(U);He=new Lm(U,xe,e);xe.init(He);ve=new M_(U,xe,He);Me=new x_(U,xe,He);qe=new zm(U);ze=new r_;ke=new S_(U,xe,Me,ze,He,ve,qe);it=new Dm(x);E=new Nm(x);_=new Wd(U,He);pe=new Cm(U,xe,_,He);G=new Om(U,_,qe,pe);W=new Vm(U,G,_,qe);te=new km(U,He,ke);ae=new Pm(ze);J=new s_(x,it,E,xe,He,pe,ae);j=new R_(x,ze);Ie=new o_;Ee=new f_(xe,He);Pe=new wm(x,it,E,Me,W,f,l);oe=new v_(x,W,He);me=new L_(U,qe,He,Me);at=new Rm(U,xe,qe,He);Ve=new Bm(U,xe,qe,He);qe.programs=J.programs;x.capabilities=He;x.extensions=xe;x.properties=ze;x.renderLists=Ie;x.shadowMap=oe;x.state=Me;x.info=qe}Ye();const De=new w_(x,U);this.xr=De;this.getContext=function(){return U};this.getContextAttributes=function(){return U.getContextAttributes()};this.forceContextLoss=function(){const M=xe.get("WEBGL_lose_context");if(M)M.loseContext()};this.forceContextRestore=function(){const M=xe.get("WEBGL_lose_context");if(M)M.restoreContext()};this.getPixelRatio=function(){return q};this.setPixelRatio=function(M){if(M===void 0)return;q=M;this.setSize(V,H,false)};this.getSize=function(M){return M.set(V,H)};this.setSize=function(M,D,F=true){if(De.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}V=M;H=D;t.width=Math.floor(M*q);t.height=Math.floor(D*q);if(F===true){t.style.width=M+"px";t.style.height=D+"px"}this.setViewport(0,0,M,D)};this.getDrawingBufferSize=function(M){return M.set(V*q,H*q).floor()};this.setDrawingBufferSize=function(M,D,F){V=M;H=D;q=F;t.width=Math.floor(M*F);t.height=Math.floor(D*F);this.setViewport(0,0,M,D)};this.getCurrentViewport=function(M){return M.copy(v)};this.getViewport=function(M){return M.copy(Y)};this.setViewport=function(M,D,F,O){if(M.isVector4){Y.set(M.x,M.y,M.z,M.w)}else{Y.set(M,D,F,O)}Me.viewport(v.copy(Y).multiplyScalar(q).round())};this.getScissor=function(M){return M.copy(re)};this.setScissor=function(M,D,F,O){if(M.isVector4){re.set(M.x,M.y,M.z,M.w)}else{re.set(M,D,F,O)}Me.scissor(b.copy(re).multiplyScalar(q).round())};this.getScissorTest=function(){return de};this.setScissorTest=function(M){Me.setScissorTest(de=M)};this.setOpaqueSort=function(M){k=M};this.setTransparentSort=function(M){X=M};this.getClearColor=function(M){return M.copy(Pe.getClearColor())};this.setClearColor=function(){Pe.setClearColor.apply(Pe,arguments)};this.getClearAlpha=function(){return Pe.getClearAlpha()};this.setClearAlpha=function(){Pe.setClearAlpha.apply(Pe,arguments)};this.clear=function(M=true,D=true,F=true){let O=0;if(M){let I=false;if(A!==null){const he=A.texture.format;I=he===Zc||he===Kc||he===$c}if(I){const he=A.texture.type;const ge=he===Bn||he===Nn||he===_o||he===ui||he===Yc||he===jc;const Se=Pe.getClearColor();const ye=Pe.getClearAlpha();const Ge=Se.r;const Le=Se.g;const Ue=Se.b;if(ge){m[0]=Ge;m[1]=Le;m[2]=Ue;m[3]=ye;U.clearBufferuiv(U.COLOR,0,m)}else{g[0]=Ge;g[1]=Le;g[2]=Ue;g[3]=ye;U.clearBufferiv(U.COLOR,0,g)}}else{O|=U.COLOR_BUFFER_BIT}}if(D)O|=U.DEPTH_BUFFER_BIT;if(F){O|=U.STENCIL_BUFFER_BIT;this.state.buffers.stencil.setMask(4294967295)}U.clear(O)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){t.removeEventListener("webglcontextlost",Qe,false);t.removeEventListener("webglcontextrestored",R,false);t.removeEventListener("webglcontextcreationerror",le,false);Ie.dispose();Ee.dispose();ze.dispose();it.dispose();E.dispose();W.dispose();pe.dispose();me.dispose();J.dispose();De.dispose();De.removeEventListener("sessionstart",Ft);De.removeEventListener("sessionend",Ze);if(ue){ue.dispose();ue=null}Mt.stop()};function Qe(M){M.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");y=true}function R(){console.log("THREE.WebGLRenderer: Context Restored.");y=false;const M=qe.autoReset;const D=oe.enabled;const F=oe.autoUpdate;const O=oe.needsUpdate;const I=oe.type;Ye();qe.autoReset=M;oe.enabled=D;oe.autoUpdate=F;oe.needsUpdate=O;oe.type=I}function le(M){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",M.statusMessage)}function N(M){const D=M.target;D.removeEventListener("dispose",N);ne(D)}function ne(M){ce(M);ze.remove(M)}function ce(M){const D=ze.get(M).programs;if(D!==void 0){D.forEach(function(F){J.releaseProgram(F)});if(M.isShaderMaterial){J.releaseShaderCache(M)}}}this.renderBufferDirect=function(M,D,F,O,I,he){if(D===null)D=je;const ge=I.isMesh&&I.matrixWorld.determinant()<0;const Se=Vh(M,D,F,O,I);Me.setMaterial(O,ge);let ye=F.index;let Ge=1;if(O.wireframe===true){ye=G.getWireframeAttribute(F);if(ye===void 0)return;Ge=2}const Le=F.drawRange;const Ue=F.attributes.position;let st=Le.start*Ge;let Dt=(Le.start+Le.count)*Ge;if(he!==null){st=Math.max(st,he.start*Ge);Dt=Math.min(Dt,(he.start+he.count)*Ge)}if(ye!==null){st=Math.max(st,0);Dt=Math.min(Dt,ye.count)}else if(Ue!==void 0&&Ue!==null){st=Math.max(st,0);Dt=Math.min(Dt,Ue.count)}const ut=Dt-st;if(ut<0||ut===Infinity)return;pe.setup(I,O,Se,F,ye);let on;let tt=at;if(ye!==null){on=_.get(ye);tt=Ve;tt.setIndex(on)}if(I.isMesh){if(O.wireframe===true){Me.setLineWidth(O.wireframeLinewidth*we());tt.setMode(U.LINES)}else{tt.setMode(U.TRIANGLES)}}else if(I.isLine){let Ne=O.linewidth;if(Ne===void 0)Ne=1;Me.setLineWidth(Ne*we());if(I.isLineSegments){tt.setMode(U.LINES)}else if(I.isLineLoop){tt.setMode(U.LINE_LOOP)}else{tt.setMode(U.LINE_STRIP)}}else if(I.isPoints){tt.setMode(U.POINTS)}else if(I.isSprite){tt.setMode(U.TRIANGLES)}if(I.isBatchedMesh){tt.renderMultiDraw(I._multiDrawStarts,I._multiDrawCounts,I._multiDrawCount)}else if(I.isInstancedMesh){tt.renderInstances(st,ut,I.count)}else if(F.isInstancedBufferGeometry){const Ne=F._maxInstanceCount!==void 0?F._maxInstanceCount:Infinity;const Kr=Math.min(F.instanceCount,Ne);tt.renderInstances(st,ut,Kr)}else{tt.render(st,ut)}};function Xe(M,D,F){if(M.transparent===true&&M.side===$t&&M.forceSinglePass===false){M.side=Rt;M.needsUpdate=true;qs(M,D,F);M.side=Hn;M.needsUpdate=true;qs(M,D,F);M.side=$t}else{qs(M,D,F)}}this.compile=function(M,D,F=null){if(F===null)F=M;p=Ee.get(F);p.init();T.push(p);F.traverseVisible(function(I){if(I.isLight&&I.layers.test(D.layers)){p.pushLight(I);if(I.castShadow){p.pushShadow(I)}}});if(M!==F){M.traverseVisible(function(I){if(I.isLight&&I.layers.test(D.layers)){p.pushLight(I);if(I.castShadow){p.pushShadow(I)}}})}p.setupLights(x._useLegacyLights);const O=new Set;M.traverse(function(I){const he=I.material;if(he){if(Array.isArray(he)){for(let ge=0;ge<he.length;ge++){const Se=he[ge];Xe(Se,F,I);O.add(Se)}}else{Xe(he,F,I);O.add(he)}}});T.pop();p=null;return O};this.compileAsync=function(M,D,F=null){const O=this.compile(M,D,F);return new Promise(I=>{function he(){O.forEach(function(ge){const Se=ze.get(ge);const ye=Se.currentProgram;if(ye.isReady()){O.delete(ge)}});if(O.size===0){I(M);return}setTimeout(he,10)}if(xe.get("KHR_parallel_shader_compile")!==null){he()}else{setTimeout(he,10)}})};let Ke=null;function mt(M){if(Ke)Ke(M)}function Ft(){Mt.stop()}function Ze(){Mt.start()}const Mt=new ph;Mt.setAnimationLoop(mt);if(typeof self!=="undefined")Mt.setContext(self);this.setAnimationLoop=function(M){Ke=M;De.setAnimationLoop(M);M===null?Mt.stop():Mt.start()};De.addEventListener("sessionstart",Ft);De.addEventListener("sessionend",Ze);this.render=function(M,D){if(D!==void 0&&D.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(y===true)return;if(M.matrixWorldAutoUpdate===true)M.updateMatrixWorld();if(D.parent===null&&D.matrixWorldAutoUpdate===true)D.updateMatrixWorld();if(De.enabled===true&&De.isPresenting===true){if(De.cameraAutoUpdate===true)De.updateCamera(D);D=De.getCamera()}if(M.isScene===true)M.onBeforeRender(x,M,D,A);p=Ee.get(M,T.length);p.init();T.push(p);Ae.multiplyMatrices(D.projectionMatrix,D.matrixWorldInverse);Re.setFromProjectionMatrix(Ae);K=this.localClippingEnabled;z=ae.init(this.clippingPlanes,K);S=Ie.get(M,d.length);S.init();d.push(S);Jt(M,D,0,x.sortObjects);S.finish();if(x.sortObjects===true){S.sort(k,X)}this.info.render.frame++;if(z===true)ae.beginShadows();const F=p.state.shadowsArray;oe.render(F,M,D);if(z===true)ae.endShadows();if(this.info.autoReset===true)this.info.reset();if(De.enabled===false||De.isPresenting===false||De.hasDepthSensing()===false){Pe.render(S,M)}p.setupLights(x._useLegacyLights);if(D.isArrayCamera){const O=D.cameras;for(let I=0,he=O.length;I<he;I++){const ge=O[I];Po(S,M,ge,ge.viewport)}}else{Po(S,M,D)}if(A!==null){ke.updateMultisampleRenderTarget(A);ke.updateRenderTargetMipmap(A)}if(M.isScene===true)M.onAfterRender(x,M,D);pe.resetDefaultState();B=-1;Q=null;T.pop();if(T.length>0){p=T[T.length-1]}else{p=null}d.pop();if(d.length>0){S=d[d.length-1]}else{S=null}};function Jt(M,D,F,O){if(M.visible===false)return;const I=M.layers.test(D.layers);if(I){if(M.isGroup){F=M.renderOrder}else if(M.isLOD){if(M.autoUpdate===true)M.update(D)}else if(M.isLight){p.pushLight(M);if(M.castShadow){p.pushShadow(M)}}else if(M.isSprite){if(!M.frustumCulled||Re.intersectsSprite(M)){if(O){fe.setFromMatrixPosition(M.matrixWorld).applyMatrix4(Ae)}const ge=W.update(M);const Se=M.material;if(Se.visible){S.push(M,ge,Se,F,fe.z,null)}}}else if(M.isMesh||M.isLine||M.isPoints){if(!M.frustumCulled||Re.intersectsObject(M)){const ge=W.update(M);const Se=M.material;if(O){if(M.boundingSphere!==void 0){if(M.boundingSphere===null)M.computeBoundingSphere();fe.copy(M.boundingSphere.center)}else{if(ge.boundingSphere===null)ge.computeBoundingSphere();fe.copy(ge.boundingSphere.center)}fe.applyMatrix4(M.matrixWorld).applyMatrix4(Ae)}if(Array.isArray(Se)){const ye=ge.groups;for(let Ge=0,Le=ye.length;Ge<Le;Ge++){const Ue=ye[Ge];const st=Se[Ue.materialIndex];if(st&&st.visible){S.push(M,ge,st,F,fe.z,Ue)}}}else if(Se.visible){S.push(M,ge,Se,F,fe.z,null)}}}}const he=M.children;for(let ge=0,Se=he.length;ge<Se;ge++){Jt(he[ge],D,F,O)}}function Po(M,D,F,O){const I=M.opaque;const he=M.transmissive;const ge=M.transparent;p.setupLightsView(F);if(z===true)ae.setGlobalState(x.clippingPlanes,F);if(he.length>0)kh(I,he,D,F);if(O)Me.viewport(v.copy(O));if(I.length>0)Xs(I,D,F);if(he.length>0)Xs(he,D,F);if(ge.length>0)Xs(ge,D,F);Me.buffers.depth.setTest(true);Me.buffers.depth.setMask(true);Me.buffers.color.setMask(true);Me.setPolygonOffset(false)}function kh(M,D,F,O){const I=F.isScene===true?F.overrideMaterial:null;if(I!==null){return}const he=He.isWebGL2;if(ue===null){ue=new rn(1,1,{generateMipmaps:true,type:xe.has("EXT_color_buffer_half_float")?kn:Bn,minFilter:ri,samples:he?4:0})}x.getDrawingBufferSize(_e);if(he){ue.setSize(_e.x,_e.y)}else{ue.setSize(eo(_e.x),eo(_e.y))}const ge=x.getRenderTarget();x.setRenderTarget(ue);x.getClearColor($);C=x.getClearAlpha();if(C<1)x.setClearColor(16777215,.5);x.clear();const Se=x.toneMapping;x.toneMapping=On;Xs(M,F,O);ke.updateMultisampleRenderTarget(ue);ke.updateRenderTargetMipmap(ue);let ye=false;for(let Ge=0,Le=D.length;Ge<Le;Ge++){const Ue=D[Ge];const st=Ue.object;const Dt=Ue.geometry;const ut=Ue.material;const on=Ue.group;if(ut.side===$t&&st.layers.test(O.layers)){const tt=ut.side;ut.side=Rt;ut.needsUpdate=true;Do(st,F,O,Dt,ut,on);ut.side=tt;ut.needsUpdate=true;ye=true}}if(ye===true){ke.updateMultisampleRenderTarget(ue);ke.updateRenderTargetMipmap(ue)}x.setRenderTarget(ge);x.setClearColor($,C);x.toneMapping=Se}function Xs(M,D,F){const O=D.isScene===true?D.overrideMaterial:null;for(let I=0,he=M.length;I<he;I++){const ge=M[I];const Se=ge.object;const ye=ge.geometry;const Ge=O===null?ge.material:O;const Le=ge.group;if(Se.layers.test(F.layers)){Do(Se,D,F,ye,Ge,Le)}}}function Do(M,D,F,O,I,he){M.onBeforeRender(x,D,F,O,I,he);M.modelViewMatrix.multiplyMatrices(F.matrixWorldInverse,M.matrixWorld);M.normalMatrix.getNormalMatrix(M.modelViewMatrix);I.onBeforeRender(x,D,F,O,M,he);if(I.transparent===true&&I.side===$t&&I.forceSinglePass===false){I.side=Rt;I.needsUpdate=true;x.renderBufferDirect(F,D,O,I,M,he);I.side=Hn;I.needsUpdate=true;x.renderBufferDirect(F,D,O,I,M,he);I.side=$t}else{x.renderBufferDirect(F,D,O,I,M,he)}M.onAfterRender(x,D,F,O,I,he)}function qs(M,D,F){if(D.isScene!==true)D=je;const O=ze.get(M);const I=p.state.lights;const he=p.state.shadowsArray;const ge=I.state.version;const Se=J.getParameters(M,I.state,he,D,F);const ye=J.getProgramCacheKey(Se);let Ge=O.programs;O.environment=M.isMeshStandardMaterial?D.environment:null;O.fog=D.fog;O.envMap=(M.isMeshStandardMaterial?E:it).get(M.envMap||O.environment);O.envMapRotation=O.environment!==null&&M.envMap===null?D.environmentRotation:M.envMapRotation;if(Ge===void 0){M.addEventListener("dispose",N);Ge=new Map;O.programs=Ge}let Le=Ge.get(ye);if(Le!==void 0){if(O.currentProgram===Le&&O.lightsStateVersion===ge){Io(M,Se);return Le}}else{Se.uniforms=J.getUniforms(M);M.onBuild(F,Se,x);M.onBeforeCompile(Se,x);Le=J.acquireProgram(Se,ye);Ge.set(ye,Le);O.uniforms=Se.uniforms}const Ue=O.uniforms;if(!M.isShaderMaterial&&!M.isRawShaderMaterial||M.clipping===true){Ue.clippingPlanes=ae.uniform}Io(M,Se);O.needsLights=Xh(M);O.lightsStateVersion=ge;if(O.needsLights){Ue.ambientLightColor.value=I.state.ambient;Ue.lightProbe.value=I.state.probe;Ue.directionalLights.value=I.state.directional;Ue.directionalLightShadows.value=I.state.directionalShadow;Ue.spotLights.value=I.state.spot;Ue.spotLightShadows.value=I.state.spotShadow;Ue.rectAreaLights.value=I.state.rectArea;Ue.ltc_1.value=I.state.rectAreaLTC1;Ue.ltc_2.value=I.state.rectAreaLTC2;Ue.pointLights.value=I.state.point;Ue.pointLightShadows.value=I.state.pointShadow;Ue.hemisphereLights.value=I.state.hemi;Ue.directionalShadowMap.value=I.state.directionalShadowMap;Ue.directionalShadowMatrix.value=I.state.directionalShadowMatrix;Ue.spotShadowMap.value=I.state.spotShadowMap;Ue.spotLightMatrix.value=I.state.spotLightMatrix;Ue.spotLightMap.value=I.state.spotLightMap;Ue.pointShadowMap.value=I.state.pointShadowMap;Ue.pointShadowMatrix.value=I.state.pointShadowMatrix}O.currentProgram=Le;O.uniformsList=null;return Le}function Uo(M){if(M.uniformsList===null){const D=M.currentProgram.getUniforms();M.uniformsList=Sr.seqWithValue(D.seq,M.uniforms)}return M.uniformsList}function Io(M,D){const F=ze.get(M);F.outputColorSpace=D.outputColorSpace;F.batching=D.batching;F.instancing=D.instancing;F.instancingColor=D.instancingColor;F.instancingMorph=D.instancingMorph;F.skinning=D.skinning;F.morphTargets=D.morphTargets;F.morphNormals=D.morphNormals;F.morphColors=D.morphColors;F.morphTargetsCount=D.morphTargetsCount;F.numClippingPlanes=D.numClippingPlanes;F.numIntersection=D.numClipIntersection;F.vertexAlphas=D.vertexAlphas;F.vertexTangents=D.vertexTangents;F.toneMapping=D.toneMapping}function Vh(M,D,F,O,I){if(D.isScene!==true)D=je;ke.resetTextureUnits();const he=D.fog;const ge=O.isMeshStandardMaterial?D.environment:null;const Se=A===null?x.outputColorSpace:A.isXRRenderTarget===true?A.texture.colorSpace:Vn;const ye=(O.isMeshStandardMaterial?E:it).get(O.envMap||ge);const Ge=O.vertexColors===true&&!!F.attributes.color&&F.attributes.color.itemSize===4;const Le=!!F.attributes.tangent&&(!!O.normalMap||O.anisotropy>0);const Ue=!!F.morphAttributes.position;const st=!!F.morphAttributes.normal;const Dt=!!F.morphAttributes.color;let ut=On;if(O.toneMapped){if(A===null||A.isXRRenderTarget===true){ut=x.toneMapping}}const on=F.morphAttributes.position||F.morphAttributes.normal||F.morphAttributes.color;const tt=on!==void 0?on.length:0;const Ne=ze.get(O);const Kr=p.state.lights;if(z===true){if(K===true||M!==Q){const Ot=M===Q&&O.id===B;ae.setState(O,M,Ot)}}let et=false;if(O.version===Ne.__version){if(Ne.needsLights&&Ne.lightsStateVersion!==Kr.state.version){et=true}else if(Ne.outputColorSpace!==Se){et=true}else if(I.isBatchedMesh&&Ne.batching===false){et=true}else if(!I.isBatchedMesh&&Ne.batching===true){et=true}else if(I.isInstancedMesh&&Ne.instancing===false){et=true}else if(!I.isInstancedMesh&&Ne.instancing===true){et=true}else if(I.isSkinnedMesh&&Ne.skinning===false){et=true}else if(!I.isSkinnedMesh&&Ne.skinning===true){et=true}else if(I.isInstancedMesh&&Ne.instancingColor===true&&I.instanceColor===null){et=true}else if(I.isInstancedMesh&&Ne.instancingColor===false&&I.instanceColor!==null){et=true}else if(I.isInstancedMesh&&Ne.instancingMorph===true&&I.morphTexture===null){et=true}else if(I.isInstancedMesh&&Ne.instancingMorph===false&&I.morphTexture!==null){et=true}else if(Ne.envMap!==ye){et=true}else if(O.fog===true&&Ne.fog!==he){et=true}else if(Ne.numClippingPlanes!==void 0&&(Ne.numClippingPlanes!==ae.numPlanes||Ne.numIntersection!==ae.numIntersection)){et=true}else if(Ne.vertexAlphas!==Ge){et=true}else if(Ne.vertexTangents!==Le){et=true}else if(Ne.morphTargets!==Ue){et=true}else if(Ne.morphNormals!==st){et=true}else if(Ne.morphColors!==Dt){et=true}else if(Ne.toneMapping!==ut){et=true}else if(He.isWebGL2===true&&Ne.morphTargetsCount!==tt){et=true}}else{et=true;Ne.__version=O.version}let Wn=Ne.currentProgram;if(et===true){Wn=qs(O,D,I)}let No=false;let hs=false;let Zr=false;const _t=Wn.getUniforms(),Xn=Ne.uniforms;if(Me.useProgram(Wn.program)){No=true;hs=true;Zr=true}if(O.id!==B){B=O.id;hs=true}if(No||Q!==M){_t.setValue(U,"projectionMatrix",M.projectionMatrix);_t.setValue(U,"viewMatrix",M.matrixWorldInverse);const Ot=_t.map.cameraPosition;if(Ot!==void 0){Ot.setValue(U,fe.setFromMatrixPosition(M.matrixWorld))}if(He.logarithmicDepthBuffer){_t.setValue(U,"logDepthBufFC",2/(Math.log(M.far+1)/Math.LN2))}if(O.isMeshPhongMaterial||O.isMeshToonMaterial||O.isMeshLambertMaterial||O.isMeshBasicMaterial||O.isMeshStandardMaterial||O.isShaderMaterial){_t.setValue(U,"isOrthographic",M.isOrthographicCamera===true)}if(Q!==M){Q=M;hs=true;Zr=true}}if(I.isSkinnedMesh){_t.setOptional(U,I,"bindMatrix");_t.setOptional(U,I,"bindMatrixInverse");const Ot=I.skeleton;if(Ot){if(He.floatVertexTextures){if(Ot.boneTexture===null)Ot.computeBoneTexture();_t.setValue(U,"boneTexture",Ot.boneTexture,ke)}else{console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.")}}}if(I.isBatchedMesh){_t.setOptional(U,I,"batchingTexture");_t.setValue(U,"batchingTexture",I._matricesTexture,ke)}const Jr=F.morphAttributes;if(Jr.position!==void 0||Jr.normal!==void 0||Jr.color!==void 0&&He.isWebGL2===true){te.update(I,F,Wn)}if(hs||Ne.receiveShadow!==I.receiveShadow){Ne.receiveShadow=I.receiveShadow;_t.setValue(U,"receiveShadow",I.receiveShadow)}if(O.isMeshGouraudMaterial&&O.envMap!==null){Xn.envMap.value=ye;Xn.flipEnvMap.value=ye.isCubeTexture&&ye.isRenderTargetTexture===false?-1:1}if(hs){_t.setValue(U,"toneMappingExposure",x.toneMappingExposure);if(Ne.needsLights){Wh(Xn,Zr)}if(he&&O.fog===true){j.refreshFogUniforms(Xn,he)}j.refreshMaterialUniforms(Xn,O,q,H,ue);Sr.upload(U,Uo(Ne),Xn,ke)}if(O.isShaderMaterial&&O.uniformsNeedUpdate===true){Sr.upload(U,Uo(Ne),Xn,ke);O.uniformsNeedUpdate=false}if(O.isSpriteMaterial){_t.setValue(U,"center",I.center)}_t.setValue(U,"modelViewMatrix",I.modelViewMatrix);_t.setValue(U,"normalMatrix",I.normalMatrix);_t.setValue(U,"modelMatrix",I.matrixWorld);if(O.isShaderMaterial||O.isRawShaderMaterial){const Ot=O.uniformsGroups;for(let Qr=0,qh=Ot.length;Qr<qh;Qr++){if(He.isWebGL2){const Fo=Ot[Qr];me.update(Fo,Wn);me.bind(Fo,Wn)}else{console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}}}return Wn}function Wh(M,D){M.ambientLightColor.needsUpdate=D;M.lightProbe.needsUpdate=D;M.directionalLights.needsUpdate=D;M.directionalLightShadows.needsUpdate=D;M.pointLights.needsUpdate=D;M.pointLightShadows.needsUpdate=D;M.spotLights.needsUpdate=D;M.spotLightShadows.needsUpdate=D;M.rectAreaLights.needsUpdate=D;M.hemisphereLights.needsUpdate=D}function Xh(M){return M.isMeshLambertMaterial||M.isMeshToonMaterial||M.isMeshPhongMaterial||M.isMeshStandardMaterial||M.isShadowMaterial||M.isShaderMaterial&&M.lights===true}this.getActiveCubeFace=function(){return L};this.getActiveMipmapLevel=function(){return w};this.getRenderTarget=function(){return A};this.setRenderTargetTextures=function(M,D,F){ze.get(M.texture).__webglTexture=D;ze.get(M.depthTexture).__webglTexture=F;const O=ze.get(M);O.__hasExternalTextures=true;O.__autoAllocateDepthBuffer=F===void 0;if(!O.__autoAllocateDepthBuffer){if(xe.has("WEBGL_multisampled_render_to_texture")===true){console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");O.__useRenderToTexture=false}}};this.setRenderTargetFramebuffer=function(M,D){const F=ze.get(M);F.__webglFramebuffer=D;F.__useDefaultFramebuffer=D===void 0};this.setRenderTarget=function(M,D=0,F=0){A=M;L=D;w=F;let O=true;let I=null;let he=false;let ge=false;if(M){const ye=ze.get(M);if(ye.__useDefaultFramebuffer!==void 0){Me.bindFramebuffer(U.FRAMEBUFFER,null);O=false}else if(ye.__webglFramebuffer===void 0){ke.setupRenderTarget(M)}else if(ye.__hasExternalTextures){ke.rebindTextures(M,ze.get(M.texture).__webglTexture,ze.get(M.depthTexture).__webglTexture)}const Ge=M.texture;if(Ge.isData3DTexture||Ge.isDataArrayTexture||Ge.isCompressedArrayTexture){ge=true}const Le=ze.get(M).__webglFramebuffer;if(M.isWebGLCubeRenderTarget){if(Array.isArray(Le[D])){I=Le[D][F]}else{I=Le[D]}he=true}else if(He.isWebGL2&&M.samples>0&&ke.useMultisampledRTT(M)===false){I=ze.get(M).__webglMultisampledFramebuffer}else{if(Array.isArray(Le)){I=Le[F]}else{I=Le}}v.copy(M.viewport);b.copy(M.scissor);ee=M.scissorTest}else{v.copy(Y).multiplyScalar(q).floor();b.copy(re).multiplyScalar(q).floor();ee=de}const Se=Me.bindFramebuffer(U.FRAMEBUFFER,I);if(Se&&He.drawBuffers&&O){Me.drawBuffers(M,I)}Me.viewport(v);Me.scissor(b);Me.setScissorTest(ee);if(he){const ye=ze.get(M.texture);U.framebufferTexture2D(U.FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_CUBE_MAP_POSITIVE_X+D,ye.__webglTexture,F)}else if(ge){const ye=ze.get(M.texture);const Ge=D||0;U.framebufferTextureLayer(U.FRAMEBUFFER,U.COLOR_ATTACHMENT0,ye.__webglTexture,F||0,Ge)}B=-1};this.readRenderTargetPixels=function(M,D,F,O,I,he,ge){if(!(M&&M.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Se=ze.get(M).__webglFramebuffer;if(M.isWebGLCubeRenderTarget&&ge!==void 0){Se=Se[ge]}if(Se){Me.bindFramebuffer(U.FRAMEBUFFER,Se);try{const ye=M.texture;const Ge=ye.format;const Le=ye.type;if(Ge!==Zt&&ve.convert(Ge)!==U.getParameter(U.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Ue=Le===kn&&(xe.has("EXT_color_buffer_half_float")||He.isWebGL2&&xe.has("EXT_color_buffer_float"));if(Le!==Bn&&ve.convert(Le)!==U.getParameter(U.IMPLEMENTATION_COLOR_READ_TYPE)&&!(Le===Mn&&(He.isWebGL2||xe.has("OES_texture_float")||xe.has("WEBGL_color_buffer_float")))&&!Ue){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if(D>=0&&D<=M.width-O&&(F>=0&&F<=M.height-I)){U.readPixels(D,F,O,I,ve.convert(Ge),ve.convert(Le),he)}}finally{const ye=A!==null?ze.get(A).__webglFramebuffer:null;Me.bindFramebuffer(U.FRAMEBUFFER,ye)}}};this.copyFramebufferToTexture=function(M,D,F=0){const O=Math.pow(2,-F);const I=Math.floor(D.image.width*O);const he=Math.floor(D.image.height*O);ke.setTexture2D(D,0);U.copyTexSubImage2D(U.TEXTURE_2D,F,0,0,M.x,M.y,I,he);Me.unbindTexture()};this.copyTextureToTexture=function(M,D,F,O=0){const I=D.image.width;const he=D.image.height;const ge=ve.convert(F.format);const Se=ve.convert(F.type);ke.setTexture2D(F,0);U.pixelStorei(U.UNPACK_FLIP_Y_WEBGL,F.flipY);U.pixelStorei(U.UNPACK_PREMULTIPLY_ALPHA_WEBGL,F.premultiplyAlpha);U.pixelStorei(U.UNPACK_ALIGNMENT,F.unpackAlignment);if(D.isDataTexture){U.texSubImage2D(U.TEXTURE_2D,O,M.x,M.y,I,he,ge,Se,D.image.data)}else{if(D.isCompressedTexture){U.compressedTexSubImage2D(U.TEXTURE_2D,O,M.x,M.y,D.mipmaps[0].width,D.mipmaps[0].height,ge,D.mipmaps[0].data)}else{U.texSubImage2D(U.TEXTURE_2D,O,M.x,M.y,ge,Se,D.image)}}if(O===0&&F.generateMipmaps)U.generateMipmap(U.TEXTURE_2D);Me.unbindTexture()};this.copyTextureToTexture3D=function(M,D,F,O,I=0){if(x.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const he=Math.round(M.max.x-M.min.x);const ge=Math.round(M.max.y-M.min.y);const Se=M.max.z-M.min.z+1;const ye=ve.convert(O.format);const Ge=ve.convert(O.type);let Le;if(O.isData3DTexture){ke.setTexture3D(O,0);Le=U.TEXTURE_3D}else if(O.isDataArrayTexture||O.isCompressedArrayTexture){ke.setTexture2DArray(O,0);Le=U.TEXTURE_2D_ARRAY}else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}U.pixelStorei(U.UNPACK_FLIP_Y_WEBGL,O.flipY);U.pixelStorei(U.UNPACK_PREMULTIPLY_ALPHA_WEBGL,O.premultiplyAlpha);U.pixelStorei(U.UNPACK_ALIGNMENT,O.unpackAlignment);const Ue=U.getParameter(U.UNPACK_ROW_LENGTH);const st=U.getParameter(U.UNPACK_IMAGE_HEIGHT);const Dt=U.getParameter(U.UNPACK_SKIP_PIXELS);const ut=U.getParameter(U.UNPACK_SKIP_ROWS);const on=U.getParameter(U.UNPACK_SKIP_IMAGES);const tt=F.isCompressedTexture?F.mipmaps[I]:F.image;U.pixelStorei(U.UNPACK_ROW_LENGTH,tt.width);U.pixelStorei(U.UNPACK_IMAGE_HEIGHT,tt.height);U.pixelStorei(U.UNPACK_SKIP_PIXELS,M.min.x);U.pixelStorei(U.UNPACK_SKIP_ROWS,M.min.y);U.pixelStorei(U.UNPACK_SKIP_IMAGES,M.min.z);if(F.isDataTexture||F.isData3DTexture){U.texSubImage3D(Le,I,D.x,D.y,D.z,he,ge,Se,ye,Ge,tt.data)}else{if(O.isCompressedArrayTexture){U.compressedTexSubImage3D(Le,I,D.x,D.y,D.z,he,ge,Se,ye,tt.data)}else{U.texSubImage3D(Le,I,D.x,D.y,D.z,he,ge,Se,ye,Ge,tt)}}U.pixelStorei(U.UNPACK_ROW_LENGTH,Ue);U.pixelStorei(U.UNPACK_IMAGE_HEIGHT,st);U.pixelStorei(U.UNPACK_SKIP_PIXELS,Dt);U.pixelStorei(U.UNPACK_SKIP_ROWS,ut);U.pixelStorei(U.UNPACK_SKIP_IMAGES,on);if(I===0&&O.generateMipmaps)U.generateMipmap(Le);Me.unbindTexture()};this.initTexture=function(M){if(M.isCubeTexture){ke.setTextureCube(M,0)}else if(M.isData3DTexture){ke.setTexture3D(M,0)}else if(M.isDataArrayTexture||M.isCompressedArrayTexture){ke.setTexture2DArray(M,0)}else{ke.setTexture2D(M,0)}Me.unbindTexture()};this.resetState=function(){L=0;w=0;A=null;Me.reset();pe.reset()};if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}get coordinateSystem(){return En}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=e===vo?"display-p3":"srgb";t.unpackColorSpace=$e.workingColorSpace===Xr?"display-p3":"srgb"}get useLegacyLights(){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");return this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");this._useLegacyLights=e}}class P_ extends Eh{}P_.prototype.isWebGL1Renderer=true;class D_ extends Lt{constructor(){super();this.isScene=true;this.type="Scene";this.background=null;this.environment=null;this.fog=null;this.backgroundBlurriness=0;this.backgroundIntensity=1;this.backgroundRotation=new an;this.environmentRotation=new an;this.overrideMaterial=null;if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}copy(e,t){super.copy(e,t);if(e.background!==null)this.background=e.background.clone();if(e.environment!==null)this.environment=e.environment.clone();if(e.fog!==null)this.fog=e.fog.clone();this.backgroundBlurriness=e.backgroundBlurriness;this.backgroundIntensity=e.backgroundIntensity;this.backgroundRotation.copy(e.backgroundRotation);this.environmentRotation.copy(e.environmentRotation);if(e.overrideMaterial!==null)this.overrideMaterial=e.overrideMaterial.clone();this.matrixAutoUpdate=e.matrixAutoUpdate;return this}toJSON(e){const t=super.toJSON(e);if(this.fog!==null)t.object.fog=this.fog.toJSON();if(this.backgroundBlurriness>0)t.object.backgroundBlurriness=this.backgroundBlurriness;if(this.backgroundIntensity!==1)t.object.backgroundIntensity=this.backgroundIntensity;t.object.backgroundRotation=this.backgroundRotation.toArray();t.object.environmentRotation=this.environmentRotation.toArray();return t}}class Ws extends os{constructor(e){super();this.isLineBasicMaterial=true;this.type="LineBasicMaterial";this.color=new We(16777215);this.map=null;this.linewidth=1;this.linecap="round";this.linejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.linewidth=e.linewidth;this.linecap=e.linecap;this.linejoin=e.linejoin;this.fog=e.fog;return this}}const cc=new P;const hc=new P;const uc=new rt;const Fa=new rh;const mr=new qr;class Mo extends Lt{constructor(e=new Pt,t=new Ws){super();this.isLine=true;this.type="Line";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position;const n=[0];for(let s=1,r=t.count;s<r;s++){cc.fromBufferAttribute(t,s-1);hc.fromBufferAttribute(t,s);n[s]=n[s-1];n[s]+=cc.distanceTo(hc)}e.setAttribute("lineDistance",new ft(n,1))}else{console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}raycast(e,t){const n=this.geometry;const s=this.matrixWorld;const r=e.params.Line.threshold;const o=n.drawRange;if(n.boundingSphere===null)n.computeBoundingSphere();mr.copy(n.boundingSphere);mr.applyMatrix4(s);mr.radius+=r;if(e.ray.intersectsSphere(mr)===false)return;uc.copy(s).invert();Fa.copy(e.ray).applyMatrix4(uc);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3);const l=a*a;const c=new P;const h=new P;const u=new P;const f=new P;const m=this.isLineSegments?2:1;const g=n.index;const S=n.attributes;const p=S.position;if(g!==null){const d=Math.max(0,o.start);const T=Math.min(g.count,o.start+o.count);for(let x=d,y=T-1;x<y;x+=m){const L=g.getX(x);const w=g.getX(x+1);c.fromBufferAttribute(p,L);h.fromBufferAttribute(p,w);const A=Fa.distanceSqToSegment(c,h,f,u);if(A>l)continue;f.applyMatrix4(this.matrixWorld);const B=e.ray.origin.distanceTo(f);if(B<e.near||B>e.far)continue;t.push({distance:B,point:u.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}else{const d=Math.max(0,o.start);const T=Math.min(p.count,o.start+o.count);for(let x=d,y=T-1;x<y;x+=m){c.fromBufferAttribute(p,x);h.fromBufferAttribute(p,x+1);const L=Fa.distanceSqToSegment(c,h,f,u);if(L>l)continue;f.applyMatrix4(this.matrixWorld);const w=e.ray.origin.distanceTo(f);if(w<e.near||w>e.far)continue;t.push({distance:w,point:u.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let r=0,o=s.length;r<o;r++){const a=s[r].name||String(r);this.morphTargetInfluences.push(0);this.morphTargetDictionary[a]=r}}}}}const dc=new P;const fc=new P;class yh extends Mo{constructor(e,t){super(e,t);this.isLineSegments=true;this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position;const n=[];for(let s=0,r=t.count;s<r;s+=2){dc.fromBufferAttribute(t,s);fc.fromBufferAttribute(t,s+1);n[s]=s===0?0:n[s-1];n[s+1]=n[s]+dc.distanceTo(fc)}e.setAttribute("lineDistance",new ft(n,1))}else{console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}}class U_{constructor(){this.type="Curve";this.arcLengthDivisions=200}getPoint(){console.warn("THREE.Curve: .getPoint() not implemented.");return null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++){t.push(this.getPoint(n/e))}return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++){t.push(this.getPointAt(n/e))}return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate){return this.cacheArcLengths}this.needsUpdate=false;const t=[];let n,s=this.getPoint(0);let r=0;t.push(0);for(let o=1;o<=e;o++){n=this.getPoint(o/e);r+=n.distanceTo(s);t.push(r);s=n}this.cacheArcLengths=t;return t}updateArcLengths(){this.needsUpdate=true;this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let s=0;const r=n.length;let o;if(t){o=t}else{o=e*n[r-1]}let a=0,l=r-1,c;while(a<=l){s=Math.floor(a+(l-a)/2);c=n[s]-o;if(c<0){a=s+1}else if(c>0){l=s-1}else{l=s;break}}s=l;if(n[s]===o){return s/(r-1)}const h=n[s];const u=n[s+1];const f=u-h;const m=(o-h)/f;const g=(s+m)/(r-1);return g}getTangent(e,t){const n=1e-4;let s=e-n;let r=e+n;if(s<0)s=0;if(r>1)r=1;const o=this.getPoint(s);const a=this.getPoint(r);const l=t||(o.isVector2?new Be:new P);l.copy(a).sub(o).normalize();return l}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new P;const s=[];const r=[];const o=[];const a=new P;const l=new rt;for(let m=0;m<=e;m++){const g=m/e;s[m]=this.getTangentAt(g,new P)}r[0]=new P;o[0]=new P;let c=Number.MAX_VALUE;const h=Math.abs(s[0].x);const u=Math.abs(s[0].y);const f=Math.abs(s[0].z);if(h<=c){c=h;n.set(1,0,0)}if(u<=c){c=u;n.set(0,1,0)}if(f<=c){n.set(0,0,1)}a.crossVectors(s[0],n).normalize();r[0].crossVectors(s[0],a);o[0].crossVectors(s[0],r[0]);for(let m=1;m<=e;m++){r[m]=r[m-1].clone();o[m]=o[m-1].clone();a.crossVectors(s[m-1],s[m]);if(a.length()>Number.EPSILON){a.normalize();const g=Math.acos(St(s[m-1].dot(s[m]),-1,1));r[m].applyMatrix4(l.makeRotationAxis(a,g))}o[m].crossVectors(s[m],r[m])}if(t===true){let m=Math.acos(St(r[0].dot(r[e]),-1,1));m/=e;if(s[0].dot(a.crossVectors(r[0],r[e]))>0){m=-m}for(let g=1;g<=e;g++){r[g].applyMatrix4(l.makeRotationAxis(s[g],m*g));o[g].crossVectors(s[g],r[g])}}return{tangents:s,normals:r,binormals:o}}clone(){return new this.constructor().copy(this)}copy(e){this.arcLengthDivisions=e.arcLengthDivisions;return this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};e.arcLengthDivisions=this.arcLengthDivisions;e.type=this.type;return e}fromJSON(e){this.arcLengthDivisions=e.arcLengthDivisions;return this}}function Eo(){let i=0,e=0,t=0,n=0;function s(r,o,a,l){i=r;e=a;t=-3*r+3*o-2*a-l;n=2*r-2*o+a+l}return{initCatmullRom:function(r,o,a,l,c){s(o,a,c*(a-r),c*(l-o))},initNonuniformCatmullRom:function(r,o,a,l,c,h,u){let f=(o-r)/c-(a-r)/(c+h)+(a-o)/h;let m=(a-o)/h-(l-o)/(h+u)+(l-a)/u;f*=h;m*=h;s(o,a,f,m)},calc:function(r){const o=r*r;const a=o*r;return i+e*r+t*o+n*a}}}const gr=new P;const Oa=new Eo;const Ba=new Eo;const za=new Eo;class Th extends U_{constructor(e=[],t=false,n="centripetal",s=.5){super();this.isCatmullRomCurve3=true;this.type="CatmullRomCurve3";this.points=e;this.closed=t;this.curveType=n;this.tension=s}getPoint(e,t=new P){const n=t;const s=this.points;const r=s.length;const o=(r-(this.closed?0:1))*e;let a=Math.floor(o);let l=o-a;if(this.closed){a+=a>0?0:(Math.floor(Math.abs(a)/r)+1)*r}else if(l===0&&a===r-1){a=r-2;l=1}let c,h;if(this.closed||a>0){c=s[(a-1)%r]}else{gr.subVectors(s[0],s[1]).add(s[0]);c=gr}const u=s[a%r];const f=s[(a+1)%r];if(this.closed||a+2<r){h=s[(a+2)%r]}else{gr.subVectors(s[r-1],s[r-2]).add(s[r-1]);h=gr}if(this.curveType==="centripetal"||this.curveType==="chordal"){const m=this.curveType==="chordal"?.5:.25;let g=Math.pow(c.distanceToSquared(u),m);let S=Math.pow(u.distanceToSquared(f),m);let p=Math.pow(f.distanceToSquared(h),m);if(S<1e-4)S=1;if(g<1e-4)g=S;if(p<1e-4)p=S;Oa.initNonuniformCatmullRom(c.x,u.x,f.x,h.x,g,S,p);Ba.initNonuniformCatmullRom(c.y,u.y,f.y,h.y,g,S,p);za.initNonuniformCatmullRom(c.z,u.z,f.z,h.z,g,S,p)}else if(this.curveType==="catmullrom"){Oa.initCatmullRom(c.x,u.x,f.x,h.x,this.tension);Ba.initCatmullRom(c.y,u.y,f.y,h.y,this.tension);za.initCatmullRom(c.z,u.z,f.z,h.z,this.tension)}n.set(Oa.calc(l),Ba.calc(l),za.calc(l));return n}copy(e){super.copy(e);this.points=[];for(let t=0,n=e.points.length;t<n;t++){const s=e.points[t];this.points.push(s.clone())}this.closed=e.closed;this.curveType=e.curveType;this.tension=e.tension;return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const s=this.points[t];e.points.push(s.toArray())}e.closed=this.closed;e.curveType=this.curveType;e.tension=this.tension;return e}fromJSON(e){super.fromJSON(e);this.points=[];for(let t=0,n=e.points.length;t<n;t++){const s=e.points[t];this.points.push(new P().fromArray(s))}this.closed=e.closed;this.curveType=e.curveType;this.tension=e.tension;return this}}class yo extends Pt{constructor(e=1,t=32,n=16,s=0,r=Math.PI*2,o=0,a=Math.PI){super();this.type="SphereGeometry";this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:s,phiLength:r,thetaStart:o,thetaLength:a};t=Math.max(3,Math.floor(t));n=Math.max(2,Math.floor(n));const l=Math.min(o+a,Math.PI);let c=0;const h=[];const u=new P;const f=new P;const m=[];const g=[];const S=[];const p=[];for(let d=0;d<=n;d++){const T=[];const x=d/n;let y=0;if(d===0&&o===0){y=.5/t}else if(d===n&&l===Math.PI){y=-.5/t}for(let L=0;L<=t;L++){const w=L/t;u.x=-e*Math.cos(s+w*r)*Math.sin(o+x*a);u.y=e*Math.cos(o+x*a);u.z=e*Math.sin(s+w*r)*Math.sin(o+x*a);g.push(u.x,u.y,u.z);f.copy(u).normalize();S.push(f.x,f.y,f.z);p.push(w+y,1-x);T.push(c++)}h.push(T)}for(let d=0;d<n;d++){for(let T=0;T<t;T++){const x=h[d][T+1];const y=h[d][T];const L=h[d+1][T];const w=h[d+1][T+1];if(d!==0||o>0)m.push(x,y,w);if(d!==n-1||l<Math.PI)m.push(y,L,w)}}this.setIndex(m);this.setAttribute("position",new ft(g,3));this.setAttribute("normal",new ft(S,3));this.setAttribute("uv",new ft(p,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new yo(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class I_ extends Nt{constructor(e){super(e);this.isRawShaderMaterial=true;this.type="RawShaderMaterial"}}class N_ extends os{constructor(e){super();this.isMeshPhongMaterial=true;this.type="MeshPhongMaterial";this.color=new We(16777215);this.specular=new We(1118481);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new We(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=Qc;this.normalScale=new Be(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new an;this.combine=go;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.specular.copy(e.specular);this.shininess=e.shininess;this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapRotation.copy(e.envMapRotation);this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.flatShading=e.flatShading;this.fog=e.fog;return this}}const pc={enabled:false,files:{},add:function(i,e){if(this.enabled===false)return;this.files[i]=e},get:function(i){if(this.enabled===false)return;return this.files[i]},remove:function(i){delete this.files[i]},clear:function(){this.files={}}};class bh{constructor(e,t,n){const s=this;let r=false;let o=0;let a=0;let l=void 0;const c=[];this.onStart=void 0;this.onLoad=e;this.onProgress=t;this.onError=n;this.itemStart=function(h){a++;if(r===false){if(s.onStart!==void 0){s.onStart(h,o,a)}}r=true};this.itemEnd=function(h){o++;if(s.onProgress!==void 0){s.onProgress(h,o,a)}if(o===a){r=false;if(s.onLoad!==void 0){s.onLoad()}}};this.itemError=function(h){if(s.onError!==void 0){s.onError(h)}};this.resolveURL=function(h){if(l){return l(h)}return h};this.setURLModifier=function(h){l=h;return this};this.addHandler=function(h,u){c.push(h,u);return this};this.removeHandler=function(h){const u=c.indexOf(h);if(u!==-1){c.splice(u,2)}return this};this.getHandler=function(h){for(let u=0,f=c.length;u<f;u+=2){const m=c[u];const g=c[u+1];if(m.global)m.lastIndex=0;if(m.test(h)){return g}}return null}}}const F_=new bh;class To{constructor(e){this.manager=e!==void 0?e:F_;this.crossOrigin="anonymous";this.withCredentials=false;this.path="";this.resourcePath="";this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(s,r){n.load(e,s,t,r)})}parse(){}setCrossOrigin(e){this.crossOrigin=e;return this}setWithCredentials(e){this.withCredentials=e;return this}setPath(e){this.path=e;return this}setResourcePath(e){this.resourcePath=e;return this}setRequestHeader(e){this.requestHeader=e;return this}}To.DEFAULT_MATERIAL_NAME="__DEFAULT";class O_ extends To{constructor(e){super(e)}load(e,t,n,s){if(this.path!==void 0)e=this.path+e;e=this.manager.resolveURL(e);const r=this;const o=pc.get(e);if(o!==void 0){r.manager.itemStart(e);setTimeout(function(){if(t)t(o);r.manager.itemEnd(e)},0);return o}const a=bs("img");function l(){h();pc.add(e,this);if(t)t(this);r.manager.itemEnd(e)}function c(u){h();if(s)s(u);r.manager.itemError(e);r.manager.itemEnd(e)}function h(){a.removeEventListener("load",l,false);a.removeEventListener("error",c,false)}a.addEventListener("load",l,false);a.addEventListener("error",c,false);if(e.slice(0,5)!=="data:"){if(this.crossOrigin!==void 0)a.crossOrigin=this.crossOrigin}r.manager.itemStart(e);a.src=e;return a}}class B_ extends To{constructor(e){super(e)}load(e,t,n,s){const r=new Tt;const o=new O_(this.manager);o.setCrossOrigin(this.crossOrigin);o.setPath(this.path);o.load(e,function(a){r.image=a;r.needsUpdate=true;if(t!==void 0){t(r)}},n,s);return r}}class Ah{constructor(e=true){this.autoStart=e;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false}start(){this.startTime=mc();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true}stop(){this.getElapsedTime();this.running=false;this.autoStart=false}getElapsedTime(){this.getDelta();return this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running){this.start();return 0}if(this.running){const t=mc();e=(t-this.oldTime)/1e3;this.oldTime=t;this.elapsedTime+=e}return e}}function mc(){return(typeof performance==="undefined"?Date:performance).now()}class z_ extends yh{constructor(e=10,t=10,n=4473924,s=8947848){n=new We(n);s=new We(s);const r=t/2;const o=e/t;const a=e/2;const l=[],c=[];for(let f=0,m=0,g=-a;f<=t;f++,g+=o){l.push(-a,0,g,a,0,g);l.push(g,0,-a,g,0,a);const S=f===r?n:s;S.toArray(c,m);m+=3;S.toArray(c,m);m+=3;S.toArray(c,m);m+=3;S.toArray(c,m);m+=3}const h=new Pt;h.setAttribute("position",new ft(l,3));h.setAttribute("color",new ft(c,3));const u=new Ws({vertexColors:true,toneMapped:false});super(h,u);this.type="GridHelper"}dispose(){this.geometry.dispose();this.material.dispose()}}class G_ extends yh{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e];const n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1];const s=new Pt;s.setAttribute("position",new ft(t,3));s.setAttribute("color",new ft(n,3));const r=new Ws({vertexColors:true,toneMapped:false});super(s,r);this.type="AxesHelper"}setColors(e,t,n){const s=new We;const r=this.geometry.attributes.color.array;s.set(e);s.toArray(r,0);s.toArray(r,3);s.set(t);s.toArray(r,6);s.toArray(r,9);s.set(n);s.toArray(r,12);s.toArray(r,15);this.geometry.attributes.color.needsUpdate=true;return this}dispose(){this.geometry.dispose();this.material.dispose()}}if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:mo}}))}if(typeof window!=="undefined"){if(window.__THREE__){console.warn("WARNING: Multiple instances of Three.js being imported.")}else{window.__THREE__=mo}}const wh=[];let Ch;const H_=new Promise(function(i,e){Ch=i});const Ms=new Proxy({progress:0,sourcesCount:0},{set(i,e,t){i[e]=t;const n=i.progress/i.sourcesCount;for(let s of wh)s(n);if(Ms.sourcesCount>0&&Ms.progress===Ms.sourcesCount)Ch();return true}});var Ir,Rh,Nr,Lh;const Fr=class Fr{constructor(e){Te(this,Nr);if(e)this.audioContext=e}async loadSource(e){Ms.sourcesCount++;const t=nt(this,Nr,Lh).call(this,e);return t}async loadSources(e,t=()=>{}){const n=e.map(r=>this.loadSource(r));let s=0;t(s/e.length);for(let r of n){r.then(()=>{t(s/e.length)})}return Promise.all(n)}onProgress(e){wh.push(e)}loaded(){return H_}};Ir=new WeakSet;Rh=async function(e,t){let n;try{const s=await fetch(e);n=await s.arrayBuffer()}catch(s){console.error(`Unable to fetch the audio file. Error: ${s.message}`)}return await t.decodeAudioData(n)};Nr=new WeakSet;Lh=async function(e){var n;if(typeof e==="string")e=[e];let t;try{for(let s=0;s<e.length;s++){try{t=await nt(n=Fr,Ir,Rh).call(n,e[s],this.audioContext);break}catch(r){if(e[s+1]){console.warn(`cannot decode source ${e[s]}
trying with ${e[s+1]}`)}else console.error(`cannot load ${e[s]}`)}}}catch(s){console.error(`Unable to load audio source. Error: ${s.message}`);t=null}Ms.progress++;return t};Te(Fr,Ir);let pi=Fr;const k_="/assets/gain01-CN-HkUcj.js";const V_="/assets/player-BvOVBOqH.js";const W_="/assets/oneh-73Tlo9Z8.js";async function X_(){let i=null;const e={create:{}};function t(n){e.create[n]=(s,r)=>{try{e[s]=new AudioWorkletNode(i,n,r)}catch(o){console.error(`** Error: Unable to create worklet node: ${o}`)}return e[s]}}try{i=new AudioContext({sampleRate:44100});i.suspend()}catch(n){console.error(`** Error: Unable to create audio context: ${n}`)}try{await i.audioWorklet.addModule(k_);t("gain01");await i.audioWorklet.addModule(V_);t("player");await i.audioWorklet.addModule(W_);t("oneh")}catch(n){console.error(`** Error: Unable to add audio worklet module: ${n}`)}return[i,e]}var ws,mn,ai;class Ph extends pi{constructor(t,{fadems:n=10,autoplay:s=true,loop:r=false,gain:o=1}={}){super();Te(this,ws);Te(this,mn);Te(this,ai);this.audioContext=t;this.node=new AudioWorkletNode(this.audioContext,"player",{numberOfInputs:0,numberOfOutputs:2,outputChannelCount:[2,1],parameterData:{gain:o},processorOptions:{fadems:n,loop:r,autoplay:s}});Ce(this,mn,this.audioContext.createAnalyser());ie(this,mn).fftSize=32;const a=ie(this,mn).frequencyBinCount;Ce(this,ai,new Float32Array(a));ie(this,mn).getFloatTimeDomainData(ie(this,ai));this.node.connect(ie(this,mn),1,0)}loadBuffer(t){if(!t)return;this.node.port.postMessage({buffers:[t.getChannelData(0),t.getChannelData(1)]});Ce(this,ws,t.getChannelData(0).length)}async load(t){const n=await this.loadSource(t);this.loadBuffer(n)}start(){this.node.port.postMessage({play:1})}pause(){this.node.port.postMessage({play:0})}stop(){this.node.port.postMessage({play:-1})}restart(){this.node.port.postMessage({restart:true})}reset(){this.node.port.postMessage({reset:true})}loop(t){this.node.port.postMessage({loop:t})}getPosition(){ie(this,mn).getFloatTimeDomainData(ie(this,ai));const t=ie(this,ai)[0];return t}getDuration(){return ie(this,ws)}}ws=new WeakMap;mn=new WeakMap;ai=new WeakMap;var Gi,gn,Hi,Cs,Or,Dh;class q_ extends pi{constructor(t,{playerOptions:n={}}={}){super();Te(this,Or);Te(this,Gi,[]);Te(this,gn,-1);Te(this,Hi,null);Te(this,Cs,{});this.audioContext=t;this.node=new AudioWorkletNode(this.audioContext,"gain01",{numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[2]});Ce(this,Cs,Object.freeze(Object.assign({fadems:20,autoplay:false,loop:false},n)))}async load(t,n=()=>{}){const s=await this.loadSources(t,n);nt(this,Or,Dh).call(this,s)}play(t){var n,s;t=+t;if(isNaN(t))return;if(t===-1){(n=this.getCurrentPlayer())==null?void 0:n.pause();Ce(this,gn,t)}else{(s=this.getCurrentPlayer())==null?void 0:s.pause();ie(this,Gi)[t].start();Ce(this,gn,t);Ce(this,Hi,t)}}getState(){return ie(this,gn)}getCurrentPlayer(){return ie(this,Gi)[ie(this,gn)]??null}getLastPlayingId(){return ie(this,Hi)}getPosition(){var t;return((t=this.getCurrentPlayer())==null?void 0:t.getPosition())??null}getDuration(){var t;return((t=this.getCurrentPlayer())==null?void 0:t.getDuration())??null}getFormatedDuration(){var o;if(!this.getCurrentPlayer())return null;const t=Math.round(((o=this.getCurrentPlayer())==null?void 0:o.getDuration())/this.audioContext.sampleRate);const n=~~(t/3600);const s=~~(t%3600/60);const r=~~t%60;return{values:[n,s,r],string:[`${n}`.padStart(2,0),`${s}`.padStart(2,0),`${r}`.padStart(2,0)].join(":")}}pause(){if(ie(this,gn)!==-1)this.play(-1)}resume(){if(ie(this,gn)===-1)this.play(ie(this,Hi))}}Gi=new WeakMap;gn=new WeakMap;Hi=new WeakMap;Cs=new WeakMap;Or=new WeakSet;Dh=function(t){for(const n of t){const s=new Ph(this.audioContext,{...ie(this,Cs)});s.loadBuffer(n);s.node.connect(this.node);ie(this,Gi).push(s)}};const Y_=(()=>{const i=Array(be.projects.length);i.fill(-1);let e=0;be.projects.map(t=>t.audio).forEach((t,n)=>{if(t.length===0)return;i[n]=e;e++});return i})();function gc(i,e,t,n,s){i=(i-e)*(s-n)/(t-e)+n;return i<n?n:i>s?s:i}function _r(i,e=0,t=1){return i<e?e:t<i?t:i}var _n,ki,Gt,Rs,Ls,Ps,Vi,Wi,Ds,lt,no,Mr,io,Uh,Ih,so;const Fi=class Fi{constructor({ctx:e,param:t,el:n,range:s=[0,1],initialValue:r=0,transfer:o=h=>h,shouldSlide:a=true,slidems:l=100,speedlimms:c=0}){Te(this,lt);Te(this,_n);Te(this,ki,[0,1]);Te(this,Gt);Te(this,Rs);Te(this,Ls);Te(this,Ps,true);Te(this,Vi);Te(this,Wi,false);Te(this,Ds,null);[qn(this,_n)._,qn(this,Gt)._,qn(this,Rs)._,qn(this,Ls)._,qn(this,Ps)._,qn(this,Vi)._]=[e,t,o,l*.001,a,c];if(!ie(this,_n))Ce(this,_n,Fi.audioCtx);if(n){Ce(this,ki,[+n.min,+n.max]);nt(this,lt,Mr).call(this,+n.value);n.addEventListener("input",h=>this.update(h.target.value))}else{Ce(this,ki,s);nt(this,lt,Mr).call(this,_r(r,...s))}}static setContext(e){Fi.audioCtx=e}update(e){ie(this,Ps)===true?nt(this,lt,Ih).call(this,e):nt(this,lt,Mr).call(this,e)}};_n=new WeakMap;ki=new WeakMap;Gt=new WeakMap;Rs=new WeakMap;Ls=new WeakMap;Ps=new WeakMap;Vi=new WeakMap;Wi=new WeakMap;Ds=new WeakMap;lt=new WeakSet;no=function(e){const[t,n]=ie(this,ki);return gc(ie(this,Rs).call(this,gc(+e,t,n,0,1)),0,1,t,n)};Mr=function(e){const t=nt(this,lt,no).call(this,e);if(typeof t!=="number")return;if(Array.isArray(ie(this,Gt)))ie(this,Gt).forEach(n=>n.value=_r(t,n.minValue,n.maxValue));else ie(this,Gt).value=_r(t,ie(this,Gt).minValue,ie(this,Gt).maxValue)};io=function(){const e=nt(this,lt,no).call(this,nt(this,lt,Uh).call(this));if(typeof e!=="number")return;if(Array.isArray(ie(this,Gt))){ie(this,Gt).forEach(t=>{nt(this,lt,so).call(this,t,e)})}else{nt(this,lt,so).call(this,ie(this,Gt),e)}};Uh=function(){return ie(this,Ds)};Ih=function(e){Ce(this,Ds,e);if(ie(this,Vi)>0){if(ie(this,Wi)){return}setTimeout(()=>{Ce(this,Wi,false);nt(this,lt,io).call(this)},ie(this,Vi));Ce(this,Wi,true)}nt(this,lt,io).call(this)};so=function(e,t){const n=e.value;e.cancelScheduledValues(ie(this,_n).currentTime);e.setValueAtTime(n,ie(this,_n).currentTime);e.linearRampToValueAtTime(_r(t,e.minValue,e.maxValue),ie(this,_n).currentTime+ie(this,Ls))};Bt(Fi,"audioCtx");Bt(Fi,"transferFunction",{linear:e=>e,exp:e=>e<1e-4?0:Math.pow(2,10*e-10)});let Dr=Fi;var vn,oi,Xi,Us,li,Br,Nh,zr,Fh;const Gr=class Gr{constructor(e,t,n){Te(this,zr);Te(this,vn,null);Te(this,oi,[-1,-1]);Te(this,Xi,null);Te(this,Us,null);Te(this,li,null);Ce(this,Us,e);Ce(this,vn,n);Ce(this,li,new AudioWorkletNode(e,"player",{numberOfInputs:0,numberOfOutputs:2,outputChannelCount:[2,1],parameterData:{gain:1},processorOptions:{fadems:10,loop:true,autoplay:true}}));if(t)ie(this,li).port.postMessage({buffers:[t.getChannelData(0),t.getChannelData(1)]});Ce(this,Xi,new Dr({ctx:ie(this,Us),param:ie(this,li).parameters.get("gain"),range:[0,1],initialValue:0,speedlimms:ie(this,vn).speedlimms,slidems:ie(this,vn).slidems}))}connect(e){ie(this,li).connect(e,0,0)}setWindow(e){Ce(this,oi,e)}setPlaybackOptions(e){Object.assign(ie(this,vn),e)}updateWindow(){var e;Ce(this,oi,nt(e=Gr,Br,Nh).call(e,ie(this,vn)))}update(e){ie(this,Xi)&&ie(this,Xi).update(nt(this,zr,Fh).call(this,e))}};vn=new WeakMap;oi=new WeakMap;Xi=new WeakMap;Us=new WeakMap;li=new WeakMap;Br=new WeakSet;Nh=function(e){const t=document.body.getBoundingClientRect();const n=e.min.element.getBoundingClientRect();const s=e.max.element.getBoundingClientRect();const r=e.threshPosition===Ur.threshPosition.center?window.innerHeight*.5:0;return[(n.top+n.height*e.min.offset-t.top-r)/(t.height-document.documentElement.clientHeight),(s.top+s.height*e.max.offset-t.top-r)/(t.height-document.documentElement.clientHeight)]};zr=new WeakSet;Fh=function(e){return ou(Gn(yc(xs(e,ie(this,oi)[0],ie(this,oi)[1],0,1),.5)*(Ec(Gn(1-ie(this,vn).windowFade,0,1))+1),0,1))};Te(Gr,Br);let ro=Gr;var Is,qi,Er;class Ur extends pi{constructor(t,n){super();Te(this,qi);Te(this,Is);this.audioContext=t;Ce(this,Is,n==null?void 0:n.defaultSourceOptions);this.sources=[];this.node=new AudioWorkletNode(t,"gain01",{numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[2]});this.currentPosition=0}async load(t,n=()=>{}){const s=await this.loadSources(t,n);for(const r of s){const o=new ro(this.audioContext,r,{...ie(this,Is)});o.connect(this.node,0,0);o.update(this.currentPosition);this.sources.push(o)}}connect(...t){return this.node.connect(t)}updateWindows(){for(let t of this.sources){t.updateWindow()}}updatePosition(t){this.currentPosition=Gn(t,0,1);nt(this,qi,Er).call(this)}setWindow(t,n){var s;(s=this.sources[t])==null?void 0:s.setWindow(n);nt(this,qi,Er).call(this)}setPlaybackOptions(t,n){var s,r;(s=this.sources[t])==null?void 0:s.setPlaybackOptions(n);(r=this.sources[t])==null?void 0:r.updateWindow();nt(this,qi,Er).call(this)}log(){for(let t of this.sources){console.log(t)}}}Is=new WeakMap;qi=new WeakSet;Er=function(){for(let t of this.sources){t.update(this.currentPosition)}};Bt(Ur,"threshPosition",{center:0,top:1});var Hr,Oh;class j_ extends pi{constructor(t,{gain:n=1}={}){super();Te(this,Hr);this.audioContext=t;this.node=new AudioWorkletNode(this.audioContext,"oneh",{numberOfInputs:0,numberOfOutputs:1,outputChannelCount:[2],parameterData:{gain:n}})}async load(t,n=()=>{}){const s=await this.loadSources(t,n);nt(this,Hr,Oh).call(this,s)}play(t){if(this.audioContext.state==="running")this.node.port.postMessage({play:t})}}Hr=new WeakSet;Oh=function(t){this.node.port.postMessage({buffers:t.map(n=>n?[n.getChannelData(0),n.getChannelData(1)]:[new Float32Array([0]),new Float32Array([0])])})};class cs{constructor(){this.isPass=true;this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const $_=new mh(-1,1,1,-1,0,1);class K_ extends Pt{constructor(){super();this.setAttribute("position",new ft([-1,3,0,-1,-1,0,3,-1,0],3));this.setAttribute("uv",new ft([0,2,0,0,2,0],2))}}const Z_=new K_;class bo{constructor(e){this._mesh=new Vt(Z_,e)}dispose(){this._mesh.geometry.dispose()}render(e){e.render(this._mesh,$_)}get material(){return this._mesh.material}set material(e){this._mesh.material=e}}const J_={name:"CopyShader",uniforms:{"tDiffuse":{value:null},"opacity":{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`};class Ao extends cs{constructor(e,t){super();this.textureID=t!==void 0?t:"tDiffuse";if(e instanceof Nt){this.uniforms=e.uniforms;this.material=e}else if(e){this.uniforms=As.clone(e.uniforms);this.material=new Nt({name:e.name!==void 0?e.name:"unspecified",defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})}this.fsQuad=new bo(this.material)}render(e,t,n){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=n.texture}this.fsQuad.material=this.material;if(this.renderToScreen){e.setRenderTarget(null);this.fsQuad.render(e)}else{e.setRenderTarget(t);if(this.clear)e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil);this.fsQuad.render(e)}}dispose(){this.material.dispose();this.fsQuad.dispose()}}class _c extends cs{constructor(e,t){super();this.scene=e;this.camera=t;this.clear=true;this.needsSwap=false;this.inverse=false}render(e,t,n){const s=e.getContext();const r=e.state;r.buffers.color.setMask(false);r.buffers.depth.setMask(false);r.buffers.color.setLocked(true);r.buffers.depth.setLocked(true);let o,a;if(this.inverse){o=0;a=1}else{o=1;a=0}r.buffers.stencil.setTest(true);r.buffers.stencil.setOp(s.REPLACE,s.REPLACE,s.REPLACE);r.buffers.stencil.setFunc(s.ALWAYS,o,4294967295);r.buffers.stencil.setClear(a);r.buffers.stencil.setLocked(true);e.setRenderTarget(n);if(this.clear)e.clear();e.render(this.scene,this.camera);e.setRenderTarget(t);if(this.clear)e.clear();e.render(this.scene,this.camera);r.buffers.color.setLocked(false);r.buffers.depth.setLocked(false);r.buffers.color.setMask(true);r.buffers.depth.setMask(true);r.buffers.stencil.setLocked(false);r.buffers.stencil.setFunc(s.EQUAL,1,4294967295);r.buffers.stencil.setOp(s.KEEP,s.KEEP,s.KEEP);r.buffers.stencil.setLocked(true)}}class Q_ extends cs{constructor(){super();this.needsSwap=false}render(e){e.state.buffers.stencil.setLocked(false);e.state.buffers.stencil.setTest(false)}}class ev{constructor(e,t){this.renderer=e;this._pixelRatio=e.getPixelRatio();if(t===void 0){const n=e.getSize(new Be);this._width=n.width;this._height=n.height;t=new rn(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:kn});t.texture.name="EffectComposer.rt1"}else{this._width=t.width;this._height=t.height}this.renderTarget1=t;this.renderTarget2=t.clone();this.renderTarget2.texture.name="EffectComposer.rt2";this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.renderToScreen=true;this.passes=[];this.copyPass=new Ao(J_);this.copyPass.material.blending=yn;this.clock=new Ah}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=e}addPass(e){this.passes.push(e);e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,t){this.passes.splice(t,0,e);e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const t=this.passes.indexOf(e);if(t!==-1){this.passes.splice(t,1)}}isLastEnabledPass(e){for(let t=e+1;t<this.passes.length;t++){if(this.passes[t].enabled){return false}}return true}render(e){if(e===void 0){e=this.clock.getDelta()}const t=this.renderer.getRenderTarget();let n=false;for(let s=0,r=this.passes.length;s<r;s++){const o=this.passes[s];if(o.enabled===false)continue;o.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(s);o.render(this.renderer,this.writeBuffer,this.readBuffer,e,n);if(o.needsSwap){if(n){const a=this.renderer.getContext();const l=this.renderer.state.buffers.stencil;l.setFunc(a.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e);l.setFunc(a.EQUAL,1,4294967295)}this.swapBuffers()}if(_c!==void 0){if(o instanceof _c){n=true}else if(o instanceof Q_){n=false}}}this.renderer.setRenderTarget(t)}reset(e){if(e===void 0){const t=this.renderer.getSize(new Be);this._pixelRatio=this.renderer.getPixelRatio();this._width=t.width;this._height=t.height;e=this.renderTarget1.clone();e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=e;this.renderTarget2=e.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2}setSize(e,t){this._width=e;this._height=t;const n=this._width*this._pixelRatio;const s=this._height*this._pixelRatio;this.renderTarget1.setSize(n,s);this.renderTarget2.setSize(n,s);for(let r=0;r<this.passes.length;r++){this.passes[r].setSize(n,s)}}setPixelRatio(e){this._pixelRatio=e;this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose();this.renderTarget2.dispose();this.copyPass.dispose()}}const tv={name:"OutputShader",uniforms:{"tDiffuse":{value:null},"toneMappingExposure":{value:1}},vertexShader:`
		precision highp float;

		uniform mat4 modelViewMatrix;
		uniform mat4 projectionMatrix;

		attribute vec3 position;
		attribute vec2 uv;

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`
	
		precision highp float;

		uniform sampler2D tDiffuse;

		#include <tonemapping_pars_fragment>
		#include <colorspace_pars_fragment>

		varying vec2 vUv;

		void main() {

			gl_FragColor = texture2D( tDiffuse, vUv );

			// tone mapping

			#ifdef LINEAR_TONE_MAPPING

				gl_FragColor.rgb = LinearToneMapping( gl_FragColor.rgb );

			#elif defined( REINHARD_TONE_MAPPING )

				gl_FragColor.rgb = ReinhardToneMapping( gl_FragColor.rgb );

			#elif defined( CINEON_TONE_MAPPING )

				gl_FragColor.rgb = OptimizedCineonToneMapping( gl_FragColor.rgb );

			#elif defined( ACES_FILMIC_TONE_MAPPING )

				gl_FragColor.rgb = ACESFilmicToneMapping( gl_FragColor.rgb );

			#elif defined( AGX_TONE_MAPPING )

				gl_FragColor.rgb = AgXToneMapping( gl_FragColor.rgb );

			#elif defined( NEUTRAL_TONE_MAPPING )

				gl_FragColor.rgb = NeutralToneMapping( gl_FragColor.rgb );

			#endif

			// color space

			#ifdef SRGB_TRANSFER

				gl_FragColor = sRGBTransferOETF( gl_FragColor );

			#endif

		}`};class nv extends cs{constructor(){super();const e=tv;this.uniforms=As.clone(e.uniforms);this.material=new I_({name:e.name,uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader});this.fsQuad=new bo(this.material);this._outputColorSpace=null;this._toneMapping=null}render(e,t,n){this.uniforms["tDiffuse"].value=n.texture;this.uniforms["toneMappingExposure"].value=e.toneMappingExposure;if(this._outputColorSpace!==e.outputColorSpace||this._toneMapping!==e.toneMapping){this._outputColorSpace=e.outputColorSpace;this._toneMapping=e.toneMapping;this.material.defines={};if($e.getTransfer(this._outputColorSpace)===Je)this.material.defines.SRGB_TRANSFER="";if(this._toneMapping===zc)this.material.defines.LINEAR_TONE_MAPPING="";else if(this._toneMapping===Gc)this.material.defines.REINHARD_TONE_MAPPING="";else if(this._toneMapping===Hc)this.material.defines.CINEON_TONE_MAPPING="";else if(this._toneMapping===kc)this.material.defines.ACES_FILMIC_TONE_MAPPING="";else if(this._toneMapping===Vc)this.material.defines.AGX_TONE_MAPPING="";else if(this._toneMapping===Wc)this.material.defines.NEUTRAL_TONE_MAPPING="";this.material.needsUpdate=true}if(this.renderToScreen===true){e.setRenderTarget(null);this.fsQuad.render(e)}else{e.setRenderTarget(t);if(this.clear)e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil);this.fsQuad.render(e)}}dispose(){this.material.dispose();this.fsQuad.dispose()}}class iv extends cs{constructor(e,t,n=null,s=null,r=null){super();this.scene=e;this.camera=t;this.overrideMaterial=n;this.clearColor=s;this.clearAlpha=r;this.clear=true;this.clearDepth=false;this.needsSwap=false;this._oldClearColor=new We}render(e,t,n){const s=e.autoClear;e.autoClear=false;let r,o;if(this.overrideMaterial!==null){o=this.scene.overrideMaterial;this.scene.overrideMaterial=this.overrideMaterial}if(this.clearColor!==null){e.getClearColor(this._oldClearColor);e.setClearColor(this.clearColor)}if(this.clearAlpha!==null){r=e.getClearAlpha();e.setClearAlpha(this.clearAlpha)}if(this.clearDepth==true){e.clearDepth()}e.setRenderTarget(this.renderToScreen?null:n);if(this.clear===true){e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil)}e.render(this.scene,this.camera);if(this.clearColor!==null){e.setClearColor(this._oldClearColor)}if(this.clearAlpha!==null){e.setClearAlpha(r)}if(this.overrideMaterial!==null){this.scene.overrideMaterial=o}e.autoClear=s}}const vc={name:"ConvolutionShader",defines:{KERNEL_SIZE_FLOAT:"25.0",KERNEL_SIZE_INT:"25"},uniforms:{tDiffuse:{value:null},uImageIncrement:{value:new Be(.001953125,0)},cKernel:{value:[]},qt1:{value:3709},qt2:{value:575}},vertexShader:`

		uniform vec2 uImageIncrement;

		varying vec2 vUv;

		void main() {

			vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float cKernel[ KERNEL_SIZE_INT ];

		uniform sampler2D tDiffuse;
		uniform vec2 uImageIncrement;

		uniform float qt1;
		uniform float qt2;


		varying vec2 vUv;

		void main() {

			vec2 imageCoord = vUv;
			vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );

      vec4 color = texture2D( tDiffuse, vUv );

			for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {

				sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];
				imageCoord += uImageIncrement / (gl_FragCoord.xy / vUv) * vec2(qt1, qt2);
        imageCoord.x = max(imageCoord.x, 0.);
			}

			gl_FragColor = sum;

		}`,buildKernel:function(i){const e=25;let t=2*Math.ceil(i*3)+1;if(t>e)t=e;const n=(t-1)*.5;const s=new Array(t);let r=0;for(let o=0;o<t;++o){s[o]=sv(o-n,i);r+=s[o]}for(let o=0;o<t;++o)s[o]/=r;return s}};function sv(i,e){return Math.exp(-(i*i)/(2*e*e))}class fi extends cs{constructor(e=1,t=25,n=4){super();this.renderTargetX=new rn(1,1,{type:kn});this.renderTargetX.texture.name="BloomPass.x";this.renderTargetY=new rn(1,1,{type:kn});this.renderTargetY.texture.name="BloomPass.y";this.combineUniforms=As.clone(vr.uniforms);this.combineUniforms["strength"].value=e;this.materialCombine=new Nt({name:vr.name,uniforms:this.combineUniforms,vertexShader:vr.vertexShader,fragmentShader:vr.fragmentShader,blending:Xa,transparent:true});const s=vc;this.convolutionUniforms=As.clone(s.uniforms);this.convolutionUniforms["uImageIncrement"].value=fi.blurX;this.convolutionUniforms["cKernel"].value=vc.buildKernel(n);this.materialConvolution=new Nt({name:s.name,uniforms:this.convolutionUniforms,vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,defines:{KERNEL_SIZE_FLOAT:t.toFixed(1),KERNEL_SIZE_INT:t.toFixed(0)}});this.needsSwap=false;this.fsQuad=new bo(null)}render(e,t,n,s,r){if(r)e.state.buffers.stencil.setTest(false);this.fsQuad.material=this.materialConvolution;this.convolutionUniforms["tDiffuse"].value=n.texture;this.convolutionUniforms["uImageIncrement"].value=fi.blurX;e.setRenderTarget(this.renderTargetX);e.clear();this.fsQuad.render(e);this.convolutionUniforms["tDiffuse"].value=this.renderTargetX.texture;this.convolutionUniforms["uImageIncrement"].value=fi.blurY;e.setRenderTarget(this.renderTargetY);e.clear();this.fsQuad.render(e);this.fsQuad.material=this.materialCombine;this.combineUniforms["tDiffuse"].value=this.renderTargetY.texture;if(r)e.state.buffers.stencil.setTest(true);e.setRenderTarget(n);if(this.clear)e.clear();this.fsQuad.render(e)}setSize(e,t){this.renderTargetX.setSize(e,t);this.renderTargetY.setSize(e,t)}dispose(){this.renderTargetX.dispose();this.renderTargetY.dispose();this.materialCombine.dispose();this.materialConvolution.dispose();this.fsQuad.dispose()}}const vr={name:"CombineShader",uniforms:{tDiffuse:{value:null},strength:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float strength;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {
			vec4 texel = texture2D( tDiffuse, vUv + 0.005 );
			gl_FragColor = strength * texel;
		}`};fi.blurX=new Be(.001953125,0);fi.blurY=new Be(0,.001953125);const is=new Eh({antialias:true});is.setPixelRatio(window.devicePixelRatio);is.setSize(window.innerWidth,window.innerHeight);const Tn=new kt(50,window.innerWidth/window.innerHeight,.1,1e3);Tn.position.set(16,16,16);Tn.lookAt(16,16,16);const rv=new Vs(16,16,100,100);const av=new N_({color:yr("--three-color-mesh"),emissive:yr("--three-color-mesh-emissive"),emissiveIntensity:1,displacementScale:3,transparent:true,opacity:1,side:$t,alphaTest:0,depthTest:true,depthWrite:true});const wo=new Vt(rv,av);wo.position.set(0,0,-1.5);wo.name="mesh";const ss=new Vt(new yo(3,32,16),new xo({color:yr("--three-color-disc"),side:$t,transparent:true,opacity:.1,alphaTest:0}));ss.position.set(3.02,-8,2.2);ss.position.set(4.6,-7.6,4.6);ss.name="sphere";const Bh=new Th([new P(2,5,.8),new P(-1,3,1.2),new P(1,-2,.9),new P(5,-3,4)]);const ov=Bh.getPoints(50);const lv=new Pt().setFromPoints(ov);const cv=new Ws({color:"red"});const Co=new Mo(lv,cv);const zh=new Th([new P(-12,-2,2),new P(-6,0,-2),new P(-5,-4,-2),new P(2,-10,2)]);const hv=zh.getPoints(50);const uv=new Pt().setFromPoints(hv);const dv=new Ws({color:"blue"});const Ro=new Mo(uv,dv);const Wt=new D_;Wt.background=new We(yr("--three-color-background"));const Lo=new z_(64,16);const jr=new G_(4);jr.setColors("lime","aquamarine","LightCoral");Wt.add(wo);Wt.add(ss);Co.name="path";Wt.add(Co);Co.visible=false;Ro.visible=false;Lo.visible=false;jr.visible=false;Ro.name="lookatPath";Wt.add(Ro);Wt.add(Tn);Tn.position.set(0,0,0);Lo.name="grid";Wt.add(Lo);jr.name="axes";Wt.add(jr);const zn=new ev(is);const fv=new Ao({name:"myDotScreenShader",uniforms:{tDiffuse:{value:null},scale:{value:new Be(.42,.74)}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

    uniform sampler2D tDiffuse;
    uniform vec2 scale;

		varying vec2 vUv;

		float pattern() {

			float s = sin( 0. ), c = cos( 0. ), offset = 0.;

			vec2 tex = gl_FragCoord.xy;
      tex.x += offset;
			vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;

			return ( sin( point.x ) * sin( point.y ) ) * 4.0;

		}

		void main() {

			vec4 color = texture2D( tDiffuse, vUv );

			float average = ( color.r + color.g + color.b ) / 3.0;
      vec3 dotColor = vec3( average * 10.0 - 5.0 + pattern() );
      dotColor *= color.rgb;
			gl_FragColor = vec4( dotColor, color.a );
		}`});const pv=new Ao({name:"myRGBShiftShader",uniforms:{tDiffuse:{value:null},tSize:{value:new Be(window.innerWidth,window.innerHeight)},angle:{value:0}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

  uniform sampler2D tDiffuse;
  varying vec2 vUv;

  void main() {

    vec2 offset = vec2( 3, 0) / (gl_FragCoord.xy / vUv);

    vec4 cr = texture2D(tDiffuse, (vUv + offset));
    vec4 cga = texture2D(tDiffuse, (vUv));
    vec4 cb = texture2D(tDiffuse, (vUv - offset));
    //vec4 cb = texture2D(tDiffuse, (vUv - offset * 2.));

    gl_FragColor = sRGBTransferOETF(vec4(cr.r, cga.g, cb.b, cga.a));
  }`});const mv=new fi(20,4,9,4);zn.addPass(new iv(Wt,Tn));zn.addPass(fv);zn.addPass(pv);zn.addPass(mv);zn.addPass(new nv);const gv="/textures/alpha.jpg";const _v="/textures/displacement-soft-clouds.jpg";function vv(i=.92){let e=0;return(t=0,n=i)=>{const s=t*(1-n)+e*n;e=s;return s}}const xv=vv();const Sv=(i,e,t)=>()=>{if(i.progressNeedsUpdate===false)return;requestAnimationFrame(i.animateProgress);e.style.setProperty("--multiplayerProgress",`${xv(t())*100}%`)};function Mv(i){return Math.min(1,1.001-Math.pow(2,-10*i))}const Ev=(i,e,t)=>{if(typeof i==="number"){return(1-t)*i+t*e}else if(Array.isArray(e)){const n=[];for(let s=0;s<e.length;s++){n.push((1-t)*i[s]+t*e[s])}return n}};var ci,xn,hi,Ns,Yi,ji,oo,Fs,Os,Bs,ao;class yv{constructor({durationms:e=2e3,cb:t=()=>{},easing:n=Mv}={}){Te(this,Bs);Te(this,ci,null);Te(this,xn,null);Te(this,hi,null);Te(this,Ns,null);Te(this,Yi,null);Te(this,ji,null);Te(this,oo,null);Te(this,Fs,null);Te(this,Os,null);Ce(this,Fs,e);Ce(this,Ns,t);Ce(this,Os,n)}from(e){Ce(this,Yi,e)}to(e){Ce(this,ji,e);window.cancelAnimationFrame(ie(this,ci));Ce(this,ci,null);Ce(this,xn,null);Ce(this,hi,null);Ce(this,ci,window.requestAnimationFrame(nt(this,Bs,ao).bind(this)))}}ci=new WeakMap;xn=new WeakMap;hi=new WeakMap;Ns=new WeakMap;Yi=new WeakMap;ji=new WeakMap;oo=new WeakMap;Fs=new WeakMap;Os=new WeakMap;Bs=new WeakSet;ao=function(e){Ce(this,xn,ie(this,xn)??e);const t=e-ie(this,xn);const n=Math.min(t/ie(this,Fs),1);if(ie(this,hi)!==e){ie(this,Ns).call(this,Ev(ie(this,Yi),ie(this,ji),ie(this,Os).call(this,n)));Ce(this,hi,e)}if(n>=1){Ce(this,xn,null);Ce(this,hi,null);Ce(this,xn,e);Ce(this,Yi,ie(this,ji));return}Ce(this,ci,window.requestAnimationFrame(nt(this,Bs,ao).bind(this)))};var $i,Ki,Ht,Zi,Ji;class Tv{constructor(e){Te(this,$i,null);Te(this,Ki,[]);Te(this,Ht,[]);Te(this,Zi,0);Te(this,Ji,null);Ce(this,$i,e??console.error("provide a camera to CameraLoc constructor"));Ce(this,Ji,new yv({durationms:3e3,cb:t=>{Ce(this,Ht,t);this.update()}}))}addCurve(e,t){ie(this,Ki).push({get:n=>{const s=e.getPointAt(n);const r=t.getPointAt(n);return[[s.x,s.y,s.z],[r.x,r.y,r.z]]}});ie(this,Ht).push(0)}addPos(e,t){ie(this,Ki).push({get:n=>{return[e,t]}});ie(this,Ht).push(0)}update(){const e=[0,0,0];const t=[0,0,0];ie(this,Ki).forEach((n,s)=>{const r=n.get(ie(this,Zi))[0].map(a=>a*ie(this,Ht)[s]);e[0]+=r[0];e[1]+=r[1];e[2]+=r[2];const o=n.get(ie(this,Zi))[1].map(a=>a*ie(this,Ht)[s]);t[0]+=o[0];t[1]+=o[1];t[2]+=o[2]});ie(this,$i).position.set(e[0],e[1],e[2]);ie(this,$i).lookAt(t[0],t[1],t[2])}setScroll(e){Ce(this,Zi,e<0?0:e>1?1:e);this.update()}setPage(e){ie(this,Ji).from(ie(this,Ht));ie(this,Ji).to(ie(this,Ht).map((t,n)=>n===e?1:0))}initPage(e){Ce(this,Ht,ie(this,Ht).map((t,n)=>n===e?1:0))}}$i=new WeakMap;Ki=new WeakMap;Ht=new WeakMap;Zi=new WeakMap;Ji=new WeakMap;var bv=typeof globalThis!=="undefined"?globalThis:typeof window!=="undefined"?window:typeof global!=="undefined"?global:typeof self!=="undefined"?self:{};function Av(i){return i&&i.__esModule&&Object.prototype.hasOwnProperty.call(i,"default")?i["default"]:i}var Gh={exports:{}};(function(i,e){(function(t,n){i.exports=n()})(bv,function(){var t=function(){function n(m){o.appendChild(m.dom);return m}function s(m){for(var g=0;g<o.children.length;g++)o.children[g].style.display=g===m?"block":"none";r=m}var r=0,o=document.createElement("div");o.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";o.addEventListener("click",function(m){m.preventDefault();s(++r%o.children.length)},false);var a=(performance||Date).now(),l=a,c=0,h=n(new t.Panel("FPS","#0ff","#002")),u=n(new t.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var f=n(new t.Panel("MB","#f08","#201"));s(0);return{REVISION:16,dom:o,addPanel:n,showPanel:s,begin:function(){a=(performance||Date).now()},end:function(){c++;var m=(performance||Date).now();u.update(m-a,200);if(m>l+1e3&&(h.update(1e3*c/(m-l),100),l=m,c=0,f)){var g=performance.memory;f.update(g.usedJSHeapSize/1048576,g.jsHeapSizeLimit/1048576)}return m},update:function(){a=this.end()},domElement:o,setMode:s}};t.Panel=function(n,s,r){var o=Infinity,a=0,l=Math.round,c=l(window.devicePixelRatio||1),h=80*c,u=48*c,f=3*c,m=2*c,g=3*c,S=15*c,p=74*c,d=30*c,T=document.createElement("canvas");T.width=h;T.height=u;T.style.cssText="width:80px;height:48px";var x=T.getContext("2d");x.font="bold "+9*c+"px Helvetica,Arial,sans-serif";x.textBaseline="top";x.fillStyle=r;x.fillRect(0,0,h,u);x.fillStyle=s;x.fillText(n,f,m);x.fillRect(g,S,p,d);x.fillStyle=r;x.globalAlpha=.9;x.fillRect(g,S,p,d);return{dom:T,update:function(y,L){o=Math.min(o,y);a=Math.max(a,y);x.fillStyle=r;x.globalAlpha=1;x.fillRect(0,0,h,S);x.fillStyle=s;x.fillText(l(y)+" "+n+" ("+l(o)+"-"+l(a)+")",f,m);x.drawImage(T,g+c,S,p-c,d,g,S,p-c,d);x.fillRect(g+p-c,S,c,d);x.fillStyle=r;x.globalAlpha=.9;x.fillRect(g+p-c,S,c,l((1-y/L)*d))}}};return t})})(Gh);var wv=Gh.exports;const Cv=Av(wv);new Cv;let Ct;let Qn;let Dn;let At;let Hh;let en;let pn;(function(){const i=window.location.pathname;if(!!i&&i!=="/"&&i.charAt(i.length-1)==="/"){const e=i.slice(0,window.location.pathname.length-1);history.replaceState(history.state,"",e)}})();const zi=new Tv(Tn);zi.addCurve(Bh,zh);zi.addPos([2,-1,3],[1,0,-1]);zi.addPos([2,0,2],[1,0,-1]);const Rv=()=>be.sounds.atmos.forEach((i,e)=>At.setWindow(e,i.win));async function Lv(){[Ct,Qn]=await X_();Dn=new q_(Ct,{playerOptions:{fadems:1800,loop:false,gain:.75}});const i=be.projects.map(e=>e.audio);At=new Ur(Ct,{defaultSourceOptions:{speedlimms:1e3,slidems:4e3,threshPosition:Ur.threshPosition.center,windowFade:.4}});Hh=new Dr({ctx:Ct,param:At.node.parameters.get("gain"),range:[0,1],initialValue:0,speedlimms:20,slidems:4e3});en=new j_(Ct);pn=new Ph(Ct,{fadems:2e3,autoplay:false,loop:true});Qn.create.gain01("masterGain");Dn.node.connect(Qn.masterGain);At.node.connect(Qn.masterGain);en.node.connect(Qn.masterGain);pn.node.connect(Qn.masterGain);Qn.masterGain.connect(Ct.destination);return Promise.all([Dn.load(i.filter(e=>e.length>0)),At.load(be.sounds.atmos.map(e=>e.src)),en.load(be.sounds.os.map(e=>e.src)),pn.load(be.sounds.projects[0].src)])}function Pv(i){const e=new B_(i);return new Promise(t=>{i.onLoad=t;Wt.getObjectByName("mesh").material.alphaMap=e.load(gv);Wt.getObjectByName("mesh").material.displacementMap=e.load(_v)})}const $r=function i(){i.loaded=false;i.nextView="/fk";i.loadNextView=function(){document.querySelector("section.loading").innerHTML="";document.querySelector("section.loading").remove();i.route(i.nextView)};i.lenis=null;i.lenisResize=null;const e=new Ah;i.render3d=function(){const l=e.getElapsedTime();ss.rotation.x=-l*.1;ss.rotation.y=l*.2;zn.render(Wt,Tn)};i.animate=function(l){i.lenis&&i.lenis.raf(l);i.render3d();requestAnimationFrame(i.animate)};i.render3d();i.progressNeedsUpdate=false;i.animateProgress=Sv(i,Nc,()=>Dn.getPosition());i.renderNewScroll=function(l){if(i.lenis){window.removeEventListener("resize",i.lenisResize,false);i.lenis.stop();i.lenis.destroy();i.lenis=null}i.lenis=new Tu;i.lenisResize=()=>{i.lenis.resize();if((l==null?void 0:l.data.scroll3d)===true){zi.setScroll(i.lenis.progress);At==null?void 0:At.updatePosition(i.lenis.progress)}};window.addEventListener("resize",i.lenisResize);i.lenis.on("scroll",c=>{if((l==null?void 0:l.data.scroll3d)===true){zi.setScroll(i.lenis.progress);At==null?void 0:At.updatePosition(i.lenis.progress)}})};i.update=(l,c)=>{try{if(!i.updates.get(l))console.warn(`No update function corresponding to App.updates.get(${l})(${c})`);else i.updates.get(l)(c)}catch(h){console.error(`App.updates.get(${l})(${c}) : ${h}`)}};i.render=(()=>{let l={};return c=>{const h=c??{};const u=Object.keys(h).filter(f=>f!=="data"&&h[f]!==void 0&&l[f]!==h[f]);nu([...document.querySelectorAll("section"),Fn]);i.transitions(l,c);u.map(f=>i.update(f,h[f]));l=h;Jh();i.renderNewScroll(c);if(u.length===0){return false}return true}})();i.route=l=>{if(l!=="/"&&i.loaded===false){i.nextView=l;i.route("/");return}const c=i.views.get(l);if(l!=="/"){const h=window.location.origin+l;if(i.nextView)history.replaceState(c,"",h);else history.pushState(c,"",h)}if(l===i.nextView)i.nextView=null;i.render(c);window.scrollY===0?window.dispatchEvent(new Event("scroll")):window.scrollTo(0,0)};i.views=new Map([["/",{meta:{title:"hello",description:be.fk.meta.description},docTitle:"~ François Kerforn",loading:true,fkSection:false,projectsSection:false,displayArrows:false,project:-1,displayCarousel:false,multiplayer:-1,projectLinksGrid:false,footer:false,nav:false,three:false,data:{scroll3d:false},progress:false,heroContent:false,projectsPlayer:false}],["/fk",{meta:{title:be.fk.meta.title,description:be.fk.meta.description},docTitle:be.fk.meta.title,loading:false,fkSection:true,projectsSection:false,displayArrows:false,project:-1,displayCarousel:false,multiplayer:-1,projectLinksGrid:false,footer:true,nav:true,three:true,data:{scroll3d:true},progress:false,heroContent:true,cameraLoc:0,atmos1Gain:1,projectsPlayer:false}],["/projects",{meta:{title:be.projectsList.meta.title,description:be.projectsList.meta.description},loading:false,fkSection:false,projectsSection:true,docTitle:be.projectsList.meta.title,displayArrows:false,project:-1,displayCarousel:false,multiplayer:-1,projectLinksGrid:true,footer:false,nav:true,three:true,data:{scroll3d:false},progress:false,heroContent:false,cameraLoc:1,atmos1Gain:0,projectsPlayer:true}],...be.projects.map((l,c)=>{return[l.href,{meta:{title:`${l.name} | François Kerforn`,description:l.meta.description},docTitle:`${l.name} | François Kerforn`,loading:false,fkSection:false,projectsSection:false,displayArrows:true,project:c,displayCarousel:true,multiplayer:Y_[c],projectLinksGrid:false,footer:false,nav:true,three:true,data:{scroll3d:false},progress:true,heroContent:false,cameraLoc:2,atmos1Gain:0,projectsPlayer:false}]})]);i.transitions=(l,c)=>{if(l.loading&&c.fkSection){Ts.classList.add("noFade");setTimeout(()=>{Ts.classList.remove("noFade")},400)}if(l.projectsSection&&c.project!==-1){en.play(4)}if(l.project!==-1&&c.projectsSection){en.play(5)}};i.updates=new Map([["loading",async l=>{if(!l)return;let c=0;let h=0;const u=document.getElementById("loadingProgress");const f=()=>{const S=`${Math.floor((c+h)*.5*100)}%`;u.textContent=S};const m=new bh;const g=new pi;m.onProgress=function(S,p,d){h=p/d;f()};g.onProgress(S=>{c=S;f()});Promise.all([Lv(),Pv(m)]).catch(S=>console.error("Error while loading audio/textures > ",S)).finally(()=>{i.loaded=true;Rv();At==null?void 0:At.updatePosition(i.lenis.progress);Go.classList.add("ready");Go.addEventListener("click",()=>{if(ei.classList.contains("active"))r();i.loadNextView()});Array.from([Es,ys]).forEach(S=>S.onmouseenter=()=>en.play(0));Array.from([...document.getElementsByClassName("projectContentLinks")]).forEach(S=>S.onmouseenter=()=>en.play(3));ka.forEach(S=>S.onmouseenter=()=>en.play(1));Uc.forEach(S=>S.onmouseenter=()=>en.play(1));rs.querySelectorAll("a").forEach(S=>S.onmouseenter=()=>en.play(2));u.addEventListener("animationend",()=>{u.textContent="Enter";u.classList.add("show")});u.addEventListener("webkitAnimationEnd",()=>{u.textContent="Enter";u.classList.add("show")});u.classList.add("hidden")})}],["meta",({title:l,description:c})=>{document.querySelector('meta[name="title"]').setAttribute("content",l);document.querySelector('meta[name="description"]').setAttribute("content",c)}],["docTitle",l=>document.title=l],["fkSection",l=>{if(l){Xt([document.querySelector("section#fk"),document.querySelector("footer")],false);document.querySelector("section#fk").style.opacity=1}else{Xt([document.querySelector("section#fk"),document.querySelector("footer")],true);document.querySelector("section#fk").style.opacity=0}}],["projectsSection",l=>{if(l)Xt(document.querySelector("section#projects"),false);else Xt(document.querySelector("section#projects"),true)}],["footer",l=>{l===false?Fn.classList.add("hidden"):Fn.classList.remove("hidden")}],["nav",l=>{if(l){Xt(Un,false);Un.classList.remove("hidden"),In.classList.contains("hidden")&&setTimeout(()=>In.classList.remove("hidden"),1500)}else{Xt(Un,true);Un.classList.add("hidden")}}],["displayArrows",l=>{l===false?Ss.forEach(c=>(c.style.opacity="0",c.style.pointerEvents="none")):Ss.forEach(c=>(c.style.opacity="1",c.style.pointerEvents="all"))}],["project",(()=>{let l=-1;return c=>{var h,u,f,m;if(l===void 0||l===-1){if(c===void 0||c===-1){return}else{Xt(document.querySelectorAll("section.project")[c],false);vs[c].appear("appearToTop");Sn[c].display(true);(h=Ui[c])==null?void 0:h.display(true);Di[c].appear("appearToTop");Va.textContent=`${c+1}/${be.projects.length}`}}else{if(c===void 0||c===-1){Xt(document.querySelectorAll("section.project")[l],true);vs[l].vanish("vanishToTop");Sn[l].display(false);(u=Ui[l])==null?void 0:u.display(false);Di[l].vanish()}else{let g=c>l?"RIGHT":"LEFT";if(c===0&&l===be.projects.length-1){g="RIGHT"}if(c===be.projects.length-1&&l===0){g="LEFT"}Xt(document.querySelectorAll("section.project")[c],false);Xt(document.querySelectorAll("section.project")[l],true);Sn[l].display(false);(f=Ui[l])==null?void 0:f.display(false);Di[l].vanish();vs[l].vanish(g==="LEFT"?"vanishToRight":"vanishToLeft");vs[c].appear(g==="LEFT"?"appearToLeft":"appearToRight");Sn[c].display(true);(m=Ui[c])==null?void 0:m.display(true);Di[c].appear("appearToTop");Va.textContent=`${c+1}/${be.projects.length}`}}l=c}})()],["displayCarousel",l=>l?Wa.el.classList.remove("hidden"):Wa.el.classList.add("hidden")],["multiplayer",l=>{Dn==null?void 0:Dn.play(l)}],["projectLinksGrid",l=>{if(l){xr.style.opacity="1";xr.classList.add("fadeIn")}else{xr.style.opacity="0"}}],["three",l=>{l?document.getElementById("three").classList.remove("hidden"):document.getElementById("three").classList.add("hidden")}],["progress",l=>{if(l){Ar.classList.remove("hidden");if(Dn)i.progressNeedsUpdate=true;requestAnimationFrame(i.animateProgress)}else{Ar.classList.add("hidden");i.progressNeedsUpdate=false}}],["heroContent",l=>{l?(Ga.appear("appearToLeft"),Ha.appear("appearToRight")):(Ga.vanish("vanishToRight"),Ha.vanish("vanishToLeft"))}],["cameraLoc",l=>{if(l==null)return;zi.setPage(l)}],["atmos1Gain",l=>{Hh.update(l)}],["projectsPlayer",l=>{l?pn==null?void 0:pn.start():pn==null?void 0:pn.stop()}]]);[...ka,Es,ys,...Di.map(l=>l.el),pu,mu].forEach(l=>l.onclick=()=>{const c=l.href.substring(window.location.origin.length);i.route(c);return false});Xt([...document.querySelectorAll("section"),document.querySelector("footer"),document.querySelector("nav")].filter(l=>!l.classList.contains("loading")),true);const t=()=>{ei.classList.add("active");Pi.classList.remove("active")};const n=()=>{ei.classList.remove("active");Pi.classList.add("active")};ei.addEventListener("click",t);Pi.addEventListener("click",n);document.addEventListener("keyup",(()=>{let l=false;return c=>{if(l===true)return;l=true;const h=be.projects.length;if(c.key==="ArrowLeft"&&be.projects.map(u=>u.href).includes(window.location.pathname)){const u=history.state.project-1<0?h-1:history.state.project-1;i.route(be.projects[u].href)}if(c.key==="ArrowRight"&&be.projects.map(u=>u.href).includes(window.location.pathname)){const u=history.state.project+1>=h?0:history.state.project+1;i.route(be.projects[u].href)}setTimeout(()=>l=false,300)}})());Ss.forEach((()=>{let l=false;return(c,h)=>c.addEventListener("click",()=>{if(l===true)return;l=true;const u=be.projects.length;if(h===0){const f=history.state.project-1<0?u-1:history.state.project-1;i.route(be.projects[f].href)}if(h===1){const f=history.state.project+1>=u?0:history.state.project+1;i.route(be.projects[f].href)}setTimeout(()=>l=false,300)})})());async function s(l){if(Ct.state==="running"){o()}else{r()}}async function r(){audioSwitch.classList.add("on");await Ct.resume();if(Ct.state!=="running"){audioSwitch.classList.remove("on");Pi.classList.add("active");ei.classList.remove("active")}}async function o(){audioSwitch.classList.remove("on");Pi.classList.add("active");ei.classList.remove("active");await Ct.suspend();if(Ct.state==="running"){audioSwitch.classList.add("on")}}audioSwitch.addEventListener("click",s);document.addEventListener("keyup",l=>{if(l.key.toLowerCase()==="m")s()});window.onblur=async()=>{if(In.classList.contains("on"))await Ct.suspend()};window.onfocus=async()=>{if(In.classList.contains("on"))await Ct.resume()};function a(){Tn.aspect=window.innerWidth/window.innerHeight;Tn.updateProjectionMatrix();is.setSize(window.innerWidth,window.innerHeight);is.setPixelRatio(Math.min(window.devicePixelRatio,2));zn.setSize(window.innerWidth,window.innerHeight);zn.setPixelRatio(Math.min(window.devicePixelRatio,2))}window.addEventListener("resize",a)};$r();window.addEventListener("popstate",i=>$r.render(i.state));$r.route(window.location.pathname);document.getElementById("three").appendChild(is.domElement);requestAnimationFrame($r.animate);
